@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<section id="slider" class="@(count > 0 ? "py-4 px-4" : "")">
  <div class="banner_main">
    <div class="carousel">
      <BlazorSlickCarousel @ref="banner" Configurations="configurations">
        <BlazorSlickCarouselContent>
          @foreach (var item in dataList)
          {
            <a class="image" href="@item.link" target="_blank" title="@item.name">
              <img src="@item.image" alt="img" />
            </a>
          }
        </BlazorSlickCarouselContent>
      </BlazorSlickCarousel>
      <div class="dots"></div>
      <div class="arrows"></div>
    </div>
  </div>
</section>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  public BlazorSlickCarousel banner;
  public WMBSCInitialSettings configurations;
  private List<BannerModel> database = new();
  private List<BannerModel> dataList = new();
  private int count = 0;
  private List<string> hideList = new ()
  {
    "/config",
    "/user",
    "/feedback",
    "/work",
    "/hrm",
    "/okr/overview",
  };


  protected override void OnInitialized()
  {
    database = DbBanner.GetList(Layout.Company.id);
    ConfigSlide();
    SlideFirst();
  }

  private void ConfigSlide()
  {
    configurations = new WMBSCInitialSettings
      {
        arrows = true,
        dots = true,
        autoplay = true,
        infinite = true,
        useCSS = false,
        slidesToShow = 1,
        slidesToScroll = 1,
        autoplaySpeed = 5000,
        appendDots = ".dots",
        appendArrows = ".arrows",
        prevArrow = "<a class='material-icons-round'>chevron_left</a>",
        nextArrow = "<span class='material-icons-round'>chevron_right</span>"
      };
  }

  protected override async Task OnParametersSetAsync()
  {
    await SlideChange();
  }

  private async Task SlideChange()
  {
    if(banner != null)
    {
      var url = navigation.Uri.Replace(navigation.BaseUri, "/");
      if(count > 0)
        for (int i = 0; i < count; i++)
          await banner.Remove(0, false);

      var list = GetList();
      foreach (var item in list)
      {
        var html = $"<a class=\"image\" href=\"{item.link}\" target=\"_blank\" title=\"{item.name}\">";
        html += $"<img src=\"{item.image}\" alt=\"img\" />";
        html += "</a>";
        await banner.Add(html);
      }
      count = list.Count;
    }
  }

  private void SlideFirst()
  {
    var url = navigation.Uri.Replace(navigation.BaseUri, "/");
    if (PageShows(url))
      dataList = GetList();
    count = dataList.Count;
  }

  private List<BannerModel> GetList()
  {
    var list = new List<BannerModel>();
    var url = navigation.Uri.Replace(navigation.BaseUri, "/");
    if (PageShows(url))
    {
      foreach (var item in database)
      {
        if (Layout.User.departments_id.Contains(item.department) || string.IsNullOrEmpty(item.department))
        {
          if(item.pages.Count == 0)
          {
            list.Add(item);
          }
          else
          {
            foreach (var page in item.pages)
            {
              if (url.StartsWith(page.Key))
              {
                list.Add(item);
                break;
              }
            }
          }
        }
      }
    }
    return list;
  }

  private bool PageShows(string url)
  {
    foreach (var item in hideList)
      if(url.StartsWith(item))
        return false;
    return true;
  }
}