@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject ProtectedLocalStorage storage
@inject NavigationManager navigation

<CascadingValue Value="this">
  <main id="main" class="columns is-gapless is-multiline">
    @if (User != null && User.active)
    {
      if (Company != null)
      {
        <aside class="column is-narrow">
          <SidebarMain />
        </aside>
        <section id="content" class="column">
          <HeaderMain />
          <Carousel />
          @Body
        </section>
      }
      else
      {
        <aside class="column is-narrow">
          <SidebarMain />
        </aside>
        <section id="content" class="column has-text-centered">
          <div class="px-6">
            Bạn chưa chọn công ty
          </div>
        </section>
      }
    }
    else if (User != null && !User.active)
    {
      <section class="column is-full is-flex is-vcentered is-centered">
        <div class="has-text-danger has-text-weight-semibold">
          Tài khoản của bạn trong công ty @Company.name đã bị khóa !
        </div>
      </section>
    }
    else
    {
      <section class="column is-full movingBallG"></section>
    }
  </main>
</CascadingValue>

@code {
  public UserModel User = null;

  public CompanyModel Company = null;

  public OkrConfigModel OkrConfig = null;

  public List<UserModel> UserList = new();

  public List<DayOffModel> DaysOff = new();

  public string CycleId = null;

  public int PageSize = 25;

  public long MaxFileSize = 10 * 1024000;

  public bool IsMobile = false;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    try
    {
      if (firstRender)
      {
        var userAgent = await JSRuntime.InvokeAsync<string>("getUserAgent");
        IsMobile = Shared.DeviceMobile(userAgent);
        await JSRuntime.InvokeVoidAsync("console.log", "Device detection: " + (IsMobile ? "Mobile" : "Desktop"));

        var userStorage = await storage.GetAsync<string>("user");
        
        if (!userStorage.Success || string.IsNullOrEmpty(userStorage.Value))
        {
          navigation.NavigateTo("/logout", false);
          return;
        }
        else
        {
          var customer = await DbMainUser.GetbySession(userStorage.Value);
          if (customer == null)
          {
            navigation.NavigateTo("/logout", false);
            return;
          }
          else
          {
            var companyStorage = await storage.GetAsync<string>("company");
            if (userStorage.Success && !string.IsNullOrEmpty(userStorage.Value))
            {
              Company = await DbMainCompany.Get(companyStorage.Value);
              if (Company == null)
              {
                navigation.NavigateTo("/", true);
              }
              else
              {
                User = await DbUser.Get(Company.id, customer.id);
                if (User != null)
                {
                  UserList = DbUser.GetAll(Company.id);
                  DaysOff = DbDayOff.GetAll(Company.id);
                  OkrConfig = await DbOkrConfig.Get(Company.id);

                  // Lấy chu kỳ
                  var cycleStorage = await storage.GetAsync<string>("cycle");
                  if (cycleStorage.Success && !string.IsNullOrEmpty(cycleStorage.Value))
                    CycleId = cycleStorage.Value;

                  // Cập nhật database chính
                  customer.online = DateTime.Now.Ticks;
                  await DbMainUser.Update(customer);
                }
              }
            }
          }
        }
        await InvokeAsync(StateHasChanged);
      }
    }
    catch (Exception ex)
    {
      await JSRuntime.InvokeAsync<string>("console.log", "ERROR: " + ex.Message);
      navigation.NavigateTo("/logout", false);
      return;
    }
  }

  public async Task RefreshData()
  {
    Company = await DbMainCompany.Get(Company.id);
    OkrConfig = await DbOkrConfig.Get(Company.id);
    DaysOff = DbDayOff.GetAll(Company.id);
    UserList = DbUser.GetAll(Company.id);
    

    await InvokeAsync(StateHasChanged);

    await JSRuntime.InvokeAsync<string>("console.log", string.Format("Update Layout at {0:HH:mm:ss}", DateTime.Now));
  }
}