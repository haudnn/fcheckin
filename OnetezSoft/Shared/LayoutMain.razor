@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<CascadingValue Value="this">
  <main id="main" class="columns is-gapless is-multiline">
    @if (User != null && User.active)
    {
      if (Company != null)
      {
        <aside class="column is-narrow">
          <SidebarMain OnToggle="ToggleNav" />
        </aside>
        <section id="content" class="column">
          <HeaderMain />
          <Carousel />
          @Body
        </section>
      }
      else
      {
        <section class="column is-full is-flex is-vcentered is-centered">
          <div class="has-text-danger has-text-weight-semibold">
            Bạn chưa chọn công ty
          </div>
        </section>
      }
    }
    else if (User != null && !User.active)
    {
      <section class="column is-full is-flex is-vcentered is-centered">
        <div class="has-text-danger has-text-weight-semibold">
          Tài khoản của bạn trong công ty @Company.name đã bị khóa !
        </div>
      </section>
    }
    else
    {
      <section class="column is-full">
        <div class="p-6 has-text-centered">
          <a class="button is-white is-loading">
            Đang tải...
          </a>
        </div>
      </section>
    }
  </main>
</CascadingValue>

@code {
  public UserModel User = null;

  public CompanyModel Company = null;

  public OkrConfigModel OkrConfig = null;

  public List<UserModel> UserList = new();

  public List<DayOffModel> DaysOff = new();

  public string CycleId = null;

  public bool NavLess = false;

  public int PageSize = 25;

  public long MaxFileSize = 10 * 1024000;

  public bool IsMobile = false;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      try
      {
        var cookieUser = await JSRuntime.InvokeAsync<string>("getCookie", "_user");
        if (string.IsNullOrEmpty(cookieUser))
        {
          navigation.NavigateTo("/", true);
        }
        else
        {
          var user = await DbMainUser.GetbySession(cookieUser);
          if (user == null)
          {
            navigation.NavigateTo("/logout", false);
            return;
          }
          else
          {
            // Cập nhật database chính
            user.online = DateTime.Now.Ticks;
            await DbMainUser.Update(user);
            // Lấy thiết bị
            await GetDevice();
            // Lấy Navbar
            await GetNavbar();
            // Lấy tổ chức
            await GetCompany(user);
            // Tác vụ chạy ngầm
            BackgroundService();
          }
        }
      }
      catch (Exception ex)
      {
        await JSRuntime.InvokeAsync<string>("console.warn", "LayoutMain: " + ex.Message);
      }
      StateHasChanged();
    }
  }

  private async Task ToggleNav(bool value)
  {
    NavLess = value;
    await JSRuntime.InvokeVoidAsync("setCookie", "_nav", NavLess);
  }

  private async Task GetDevice()
  {
    var userAgent = await JSRuntime.InvokeAsync<string>("getUserAgent");
    IsMobile = Shared.DeviceMobile(userAgent);
    await JSRuntime.InvokeVoidAsync("console.log", "Device detection: " + (IsMobile ? "Mobile" : "Desktop"));
  }

  private async Task GetNavbar()
  {
    var cookieNav = await JSRuntime.InvokeAsync<string>("getCookie", "_nav");
    if (!string.IsNullOrEmpty(cookieNav))
      NavLess = Convert.ToBoolean(cookieNav);
  }

  private async Task GetCompany(UserModel user)
  {
    try
    {
      var cookieCompany = await JSRuntime.InvokeAsync<string>("getCookie", "_company");
      if (!string.IsNullOrEmpty(cookieCompany))
      {
        Company = await DbMainCompany.Get(cookieCompany);
        if (Company != null)
        {
          User = await DbUser.Get(Company.id, user.id);
          if (User != null)
          {
            UserList = DbUser.GetAll(Company.id);
            DaysOff = DbDayOff.GetAll(Company.id);
            OkrConfig = await DbOkrConfig.Get(Company.id);

            // Lấy chu kỳ
            var cookieCycle = await JSRuntime.InvokeAsync<string>("getCookie", "_cycle");
            if (!string.IsNullOrEmpty(cookieCycle))
              CycleId = cookieCycle;
          }
        }
        else
        {
          navigation.NavigateTo("/", true);
        }
      }
      else
        navigation.NavigateTo("/", true);
    }
    catch (System.Exception ex)
    {
      await JSRuntime.InvokeAsync<string>("console.warn", "GetCompany: " + ex.Message);
    }
  }

  public async Task RefreshData()
  {
    Company = await DbMainCompany.Get(Company.id);
    OkrConfig = await DbOkrConfig.Get(Company.id);
    DaysOff = DbDayOff.GetAll(Company.id);
    UserList = DbUser.GetAll(Company.id);

    await InvokeAsync(StateHasChanged);

    await JSRuntime.InvokeAsync<string>("console.log", string.Format("Update Layout at {0:HH:mm:ss}", DateTime.Now));
  }

  private void BackgroundService()
  {
    if(Company != null)
    {
      new Task(async () =>
      {
        var storage = CompanyService.UpdateStorageUsed(Company.id);
        await Task.WhenAll(storage);
      }).Start();
    }
  }
}