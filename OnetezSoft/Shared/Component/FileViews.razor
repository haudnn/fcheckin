@inject IJSRuntime JSRuntime

<ul class="columns is-multiline is-vcentered is-variable is-1 is-mobile">
  @foreach (var link in Values)
  {
    <li class="column is-narrow">
      <div class="icon-text storage_item mr-2">
        @if(Delete)
        {
          <a class="icon is-small has-text-danger item_delete" title="Xóa" @onclick="() => DeleteFile(link)">
            <i class="material-icons is-size-6">close</i>
          </a>
        }
        <span class="icon is-small item_format @Color(link)">
          <i class="material-icons is-size-6">insert_drive_file</i>
        </span>
        <a class="has-text-link" href="@link" target="_blank">@Files.FileName(link, 20)</a>
        @if(Layout.IsMobile && Delete)
        {
          <a class="icon has-text-danger" @onclick="() => DeleteFile(link)">
            <i class="material-icons is-size-6">close</i>
          </a> 
        }
      </div>
    </li>
  }
</ul>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public List<string> Values { get; set; }
  [Parameter]
  public bool Delete { get; set; }
  [Parameter]
  public EventCallback<List<string>> OnDelete { get; set; }
  
  private string[] typePic = new string[] { ".png", ".jpg", ".jpeg", ".gif" };
  
  private string[] typeDoc = new string[] { ".doc", ".docx", ".pdf", ".xls", ".xlsx", ".ppt", ".ppx" };


  private async Task DeleteFile(string link)
  {
    var fileName = Files.FileName(link);

    if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa file [{fileName}]?"))
      return;

    Values.Remove(link);
    await JSRuntime.InvokeVoidAsync("tagline", true, $"Đã xóa file [{fileName}]");
    await OnDelete.InvokeAsync(Values);
    StorageService.DeleteFile(link);
  }

  private string Color(string link)
  {
    foreach (var item in typePic)
      if(link.EndsWith(item))
        return "has-text-danger";

    foreach (var item in typeDoc)
      if(link.EndsWith(item))
        return "has-text-link";
        
    return "has-text-black";
  }
}