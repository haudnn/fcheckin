@page "/config/other/quotes"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

@if (!string.IsNullOrEmpty(_message))
{
  <div id="notify">
    <div class="notification is-@(_success ? "success" : "danger")">
      <button class="delete" @onclick="() => _message = string.Empty"></button>
      <p>@((MarkupString)_message)</p>
    </div>
  </div>
}

@if (Layout.User.role != 1 && !Layout.User.role_manage.other)
{
  <PopupNoRole />
}
else
{
  <section class="columns is-gapless has_menu_left @(_loaded ? "" : "is-loading")">
    <div class="column is-narrow">
      <div class="card p-3 menu_left">
        <a href="/config/other/banner">
          Banner
        </a>
        <a href="/config/other/blogs">
          Tin tức
        </a>
        <a class="is-active" href="/config/other/quotes">
          Chăm ngôn
        </a>
      </div>
    </div>
    <div class="column">
      <div class="card p-5">
        <ul class="columns is-vcentered is-multiline is-variable is-2 mb-5">
          <li class="column is-full">
            <h1 class="title is-5 has-text-info">
              CẤU HÌNH TRÍCH DẪN - CHĂM NGÔN
            </h1>
          </li>
          <li class="column">
            <input @bind="current.name" type="text" class="input" placeholder="Nhập nội dung trích dẫn - chăm ngôn..." />
          </li>
          <li class="column is-one-quarter">
            <input @bind="current.author" type="text" class="input" placeholder="Tác giả..." />
          </li>
          <li class="column is-narrow">
            <a class="button is-link" @onclick="Update">
              @if (string.IsNullOrEmpty(current.id))
              {
                <span class="icon">
                  <span class="material-icons-outlined is-size-6">add</span>
                </span>
                <span>Thêm mới</span>
              }
              else
              {
                <span class="icon">
                  <span class="material-icons-outlined is-size-6">done</span>
                </span>
                <span>Cập nhật</span>
              }
            </a>
            <a class="button" @onclick="() => current = new()">
              <span>Hủy</span>
            </a>
          </li>
        </ul>
        <table class="table is-fullwidth is-vcentered mt-5">
          <thead>
            <tr>
              <th>Trích dẫn - chăm ngôn</th>
              <th width="200px">Tác giả</th>
              <th width="70px" align="center">Xử lý</th>
            </tr>
          </thead>
          <tbody>
            @foreach (var item in dataList)
            {
              <tr>
                <td>
                  @item.name
                </td>
                <td>
                  @item.author
                </td>
                <td>
                  <a class="icon has-text-link" title="Chỉnh sửa" @onclick="() => EditItem(item)">
                    <i class="material-icons-outlined is-size-5">
                      edit
                    </i>
                  </a>
                  <a class="icon has-text-danger" title="Xóa" @onclick="() => DeleteItem(item)">
                    <i class="material-icons-outlined is-size-5">
                      delete
                    </i>
                  </a>
                </td>
              </tr>
            }
          </tbody>
        </table>
      </div>
    </div>
  </section>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }

  private bool _loaded = false;
  private bool _success = false;
  private string _message = string.Empty;
  private string _title = "Cấu hình trích dẫn - chăm ngôn";

  private QuotesModel current = new();
  private List<QuotesModel> dataList = new();

  protected override async Task OnInitializedAsync()
  {
    dataList = await DbQuotes.GetList(Layout.Company.id);
    _loaded = true;
  }

  protected override void OnAfterRender(bool firstRender)
  {
    _message = string.Empty;
  }

  private async Task DeleteItem(QuotesModel item)
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa {item.name}"))
      return;

    dataList.Remove(item);
    await DbQuotes.Delete(Layout.Company.id, item.id);
  }

  private void EditItem(QuotesModel item)
  {
    current = item;
  }

  private async Task Update()
  {
    _success = false;
    _message = string.Empty;

    if (string.IsNullOrEmpty(current.name) || string.IsNullOrEmpty(current.author))
    {
      _message = "Bạn cần nhập nội dung và tác giả !";
      await Task.Delay(5000);
      _message = string.Empty;
    }
    else
    {
      if (string.IsNullOrEmpty(current.id))
      {
        current = await DbQuotes.Create(Layout.Company.id, current);
        dataList.Insert(0, current);
      }
      else
      {
        current = await DbQuotes.Update(Layout.Company.id, current);
      }
      current = new();
    }
  }
}