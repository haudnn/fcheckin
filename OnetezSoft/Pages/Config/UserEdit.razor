@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<PageTitle>Thông tin nhân viên</PageTitle>

@if (Layout.User.role != 1 && !Layout.User.role_manage.system)
{
  <PopupNoRole />
}
else if (Layout.User.role == 2 && user.role == 1)
{
  <PopupNoRole />
}
else
{
  <ul class="columns is-vcentered is-variable is-2 mb-2">
      <li class="column is-narrow">
        <h1 class="title is-5 has-text-info is-uppercase">
        @(isCreate ? "Tạo tài khoản mới" : "Thông tin tài khoản")
        </h1>
      </li>
    </ul>
  <div class="inner_section flex_column" style="flex:1; @(Layout.IsMobile ? "" : "overflow:hidden")">
    <form class="flex_column" style="height:100%">
      <div class="scrolly" style="flex: 1">
        <ul class="columns is-multiline">
          <li class="column is-half">
            <div class="field">
              <label class="label">Địa chỉ email *</label>
              <div class="control">
                @if (isCreate && Enable)
                {
                  <input @bind="@user.email" type="email" class="input" @onfocusout="ChangeEmail" />
                }
                else
                {
                  <input value="@user.email" type="email" class="input" readonly />
                }
              </div>
            </div>
          </li>
          <li class="column is-half">
            <div class="field">
              <label class="label">Hình đại diện</label>
              <div class="field is-grouped">
                <div class="control">
                  <a class="image is-square is-radius">
                    <img src="@user.avatar" alt="IMG">
                  </a>
                </div>
                <FileUpload Path="avatar" Cloud ImageCompressSize="1000" UploadToMain Accept="image/*" Size="200" OnUpload="x => user.avatar = x[0]" />
              </div>
            </div>
          </li>
          <li class="column is-half">
            <div class="field">
              <label class="label">Họ *</label>
              <div class="control">
                <input @bind="user.last_name" type="text" class="input" />
              </div>
            </div>
          </li>
          <li class="column is-half">
            <div class="field">
              <label class="label">Tên *</label>
              <div class="control">
                <input @bind="user.first_name" type="text" class="input" />
              </div>
            </div>
          </li>
          <li class="column is-half">
            <div class="field">
              <label class="label">Quyền hạn *</label>
              <div class="control">
                <div class="select is-fullwidth">
                  <select @onchange="ChangeRole">
                    @foreach (var sl in DbUser.Role())
                    {
                      if (user.role == sl.id)
                      {
                        <option value="@sl.id" selected>@sl.name</option>
                      }
                      else
                      {
                        <option value="@sl.id">@sl.name</option>
                      }
                    }
                  </select>
                </div>
              </div>
            </div>
          </li>
          <li class="column is-full">
            @if (user.role == 2)
            {
              <hr class="mt-0" />
              <div class="field">
                <div class="control">
                  <label class="checkbox">
                    <input type="checkbox" @bind="user.role_manage.system" />
                    <span class="has-text-weight-bold has-text-link">CƠ CẤU</span>
                  </label>
                </div>
                <div class="control has-text-grey mt-2">
                  Truy cập tất cả chức năng trong trang Cấu hình - <b>Cơ cấu</b>
                </div>
              </div>
              if (CheckAccess("timekeeping"))
              {
                <div class="field">
                  <div class="control">
                    <label class="checkbox">
                      <input type="checkbox" @bind="user.role_manage.timekeeping" />
                      <span class="has-text-weight-bold has-text-link">CHẤM CÔNG</span>
                    </label>
                  </div>
                  <div class="control has-text-grey mt-2">
                    Truy cập tất cả chức năng trong trang Cấu hình - <b>Chấm công</b>
                  </div>
                </div>
              }
              @if (Layout.Company.products.Any(x => x.id == "storage" && x.active))
              {
                <div class="field">
                  <div class="control">
                    <label class="checkbox">
                      <input type="checkbox" @bind="user.role_manage.storage" />
                      <span class="has-text-weight-bold has-text-link">QUẢN LÝ LƯU TRỮ</span>
                    </label>
                  </div>
                  <div class="control has-text-grey mt-2">
                    Truy cập tất cả chức năng trong trang Cấu hình - <b>Quản lý lưu trữ</b>
                  </div>
                </div>
              }
              <hr class="mb-0" />
            }
          </li>
          @if (!user.id.IsEmpty() && Enable)
          {
            <li class="column is-full">
              <hr class="mt-0" />
              <div class="field">
                <div class="control">
                  <span class="has-text-weight-bold has-text-link">QUYỀN SỬ DỤNG SẢN PHẨM</span>
                </div>
              </div>
            </li>
            <li class="column is-full">
              <table class="table is-fullwidth is-vcentered is-responsive is-hoverable is_head_bg is-size-7">
                <thead>
                  <tr>
                    <th>Tài khoản</th>
                    @foreach (var product in Productions)
                    {
                      <th width="100px" align="center">
                        @product.used/@product.total - @product.title
                      </th>
                    }
                    <th width="85px" align="center">Truy cập</th>
                    <th width="85px" align="center">Trạng thái</th>
                  </tr>
                </thead>
                <tbody class="has-text-weight-medium">
                  <tr>
                    <td>
                      <a class="user_item has-text-dark">
                        <img class="image is-32x32 mr-2" src="@user.avatar" alt="IMG" />
                        <div>
                          <p>@user.email</p>
                          <p>@user.FullName</p>
                        </div>
                      </a>
                    </td>
                    @foreach (var product in Productions)
                    {
                      var access = ProductService.CheckAccess(user.products, product.id);
                      <td align="center">
                        <a class="icon" @onclick="() => AccessProduct(user, product)">
                          <i class="material-icons-round is-size-5 has-text-@(access ? "success" : "grey")">
                            toggle_@(access ? "on" : "off")
                          </i>
                        </a>
                      </td>
                    }
                    <td align="center">
                      @if (user.online > 0)
                      {
                        <span class="text_inline">
                          @Handled.Shared.ConvertDate(new DateTime(user.online)).Replace(" trước", "")
                        </span>
                      }
                    </td>
                    <td align="center">
                      <a class="icon" @onclick="() => ActiveItem(user)">
                        <i class="material-icons-round is-size-5 has-text-@(user.active ? "success" : "grey")">
                          toggle_@(user.active ? "on" : "off")
                        </i>
                      </a>
                    </td>
                  </tr>
                </tbody>
              </table>
            </li>
          }
        </ul>
      </div>
      <div class="field mt-5">
        <div class="buttons is-right">
          <a class="button" @onclick="() => OnCallback.InvokeAsync(false)">
            <span>Quay lại</span>
          </a>
          @if (string.IsNullOrEmpty(user.id))
          {
            <a class="button is-link" @onclick="Update">
              <span class="icon">
                <i class="material-icons-outlined is-size-6">add</i>
              </span>
              <span>Thêm mới</span>
            </a>
          }
          else
          {
            <a class="button is-link" @onclick="Update">
              <span class="icon">
                <i class="material-icons-outlined is-size-6">done</i>
              </span>
              <span>Cập nhật</span>
            </a>
          }
        </div>
      </div>
    </form>
  </div>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }

  [Parameter]
  public string Id { get; set; }
  [Parameter]
  public EventCallback<bool> OnCallback { get; set; }
  [Parameter]
  public List<UserModel> UserList { get; set; } = new();

  private List<CompanyModel.Product> Productions { get; set; } = new();

  private UserModel user = new();
  private List<HrmOptionModel> companyOptions = new();
  private List<HrmOptionModel> departmentOptions = new();
  private bool isCreate;
  private bool Enable;

  protected override async Task OnParametersSetAsync()
  {
    companyOptions = await DbHrmOption.GetList(Layout.Company.id, "company");
    departmentOptions = await DbHrmOption.GetList(Layout.Company.id, "department");
    Productions = Layout.Company.products.Where(x => x.active && x.id != "storage").ToList();

    if(Id.IsEmpty())
    {
      user = new();
      isCreate = true;
    }
    else
    {
      user = await DbUser.Get(Layout.Company.id, Id, globalService);
      isCreate = false;
    }
  }

  private async Task<bool> Update()
  {
    bool _success = true;
    try
    {
      if (string.IsNullOrEmpty(user.email) || !user.email.Contains("@"))
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa nhập địa chỉ email, hoặc email không đúng định dạng!");
      else if (string.IsNullOrEmpty(user.first_name) || string.IsNullOrEmpty(user.last_name))
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa nhập họ và tên cho tài khoản!");
      else
      {
        if(isCreate)
        {
          // Kiểm tra tài khoản
          var checkUser = await DbMainUser.GetbyEmail(user.email, globalService);
          if (checkUser == null)
          {
            user.password = "fastdo@123";
            await DbMainUser.Create(user);
            // Gửi email cấp tài khoản
            await JSRuntime.InvokeVoidAsync("tagline", true, "Tạo tài khoản thành công. Vui lòng kiểm tra email.");

            new Task(() =>
            {
              EmailService.UserInfo(user.email, "fastdo@123", user.FullName, Layout.Company.name, out string message);
            }).Start();
          }
          else
            user = checkUser;

          if(user.products == null) user.products = new();

          user.products = user.active ? user.products : new List<string>();
          user.page_default = null;
          // Thêm tài khoản vào tổ chức
          await CompanyService.AddStaff(Layout.Company, user, globalService);
          await globalService.Update(Layout.Company.id);
          await JSRuntime.InvokeVoidAsync("tagline", true, "Đã thêm tài khoản người dùng sản phẩm!");
          isCreate = false;
        }
        else
        {
          // Cập nhật database tổ chức
          await DbUser.Update(Layout.Company.id, user, globalService);
          // Cập nhật cho tất cả database
          await DbMainUser.Update(user, globalService);
          // Thông báo tagline
          await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cập nhật thông tin thành công!");
          await OnCallback.InvokeAsync(true);
        }
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Update()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private void ChangeRole(ChangeEventArgs e)
  {
    user.role = Convert.ToInt32(e.Value);
    user.noti_store = true;
    user.okr_checkin = false;
    if (user.role == 1)
    {
      user.role_manage.system = true;
      user.role_manage.okrs = true;
      user.role_manage.kaizen = true;
      user.role_manage.educate = true;
      user.role_manage.store = true;
      user.role_manage.other = true;
      user.role_manage.timekeeping = true;
      user.role_manage.hrrecords = true;
      user.role_manage.storage = true;
      user.role_manage.kpis = true;
      user.role_manage.todolist = true;
    }
    else if (user.role == 3)
    {
      user.role_manage.system = false;
      user.role_manage.okrs = false;
      user.role_manage.kaizen = false;
      user.role_manage.educate = false;
      user.role_manage.store = false;
      user.role_manage.other = false;
      user.role_manage.timekeeping = false;
      user.role_manage.hrrecords = false;
      user.role_manage.storage = false; 
      user.role_manage.kpis = false;
      user.role_manage.todolist = false;
    }
  }

  private bool CheckAccess(string productId)
  {
    return ProductService.CheckAccess(Layout.Company, user, productId, out string message);
  }

  // Add User
  private async Task<bool> ChangeEmail()
  {
    bool _success = true;
    try
    {
      user.id = string.Empty;
      // Kiểm tra tài khoản
      var checkUser = await DbMainUser.GetbyEmail(user.email, globalService);
      if (checkUser != null)
      {
        user.first_name = checkUser.first_name;
        user.last_name = checkUser.last_name;
        user.avatar = checkUser.avatar;
        var companyUser = UserList.FirstOrDefault(x => x.email == checkUser.email);
        if (companyUser != null)
        {
          user = companyUser;
          await JSRuntime.InvokeVoidAsync("tagline", true, "Tài khoản đã tồn tại trong tổ chức của bạn!");
          isCreate = false;
        }
        else
        {
          user = checkUser;
          isCreate = true;
        }
      }
      else
      {
        user.first_name = string.Empty;
        user.last_name = string.Empty;
        user.avatar = $"https://avatars.dicebear.com/api/micah/{DateTime.Now.Minute}.svg?background=grey";
        isCreate = true;
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ChangeEmail()", ex.Message, Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> AccessProduct(UserModel item, CompanyModel.Product product)
  {
    bool _success = true;
    try
    {
      if (item.active)
      {
        if (item.products == null)
          item.products = new();
        var access = ProductService.CheckAccess(item.products, product.id);
        if (access)
        {
          // Có quyền rồi → Thì xóa
          item.products.Remove(product.id);
          await DbUser.Update(Layout.Company.id, item, globalService);
          await JSRuntime.InvokeVoidAsync("tagline", false, "Đã thu hồi quyền sử dụng sản phẩm!");
        }
        else if (product.used < product.total)
        {
          // Chưa có → Thì thêm quyền sử dụng
          item.products.Add(product.id);
          await DbUser.Update(Layout.Company.id, item, globalService);
          await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cấp quyền sử dụng sản phẩm!");
        }
        else
        {
          await JSRuntime.InvokeVoidAsync("tagline", false, "Đã hết số lượng người dùng sản phẩm " + product.title);
        }
        Layout.Company = await CompanyService.UpdateProductAccess(Layout.Company.id, globalService);
        Productions = Layout.Company.products.Where(x => x.active && x.id != "storage").ToList();
        await globalService.Update(Layout.Company.id);
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Người dùng này đã bị vô hiệu hóa.");
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "AccessProduct()", ex.Message, Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> ActiveItem(UserModel item)
  {
    bool _success = true;
    try
    {
      // Xóa quyền dùng sản phẩm khi hủy kích hoạt
      if (item.active)
        item.products = new();
      item.active = !item.active;
      await DbUser.Update(Layout.Company.id, item, globalService);
      Layout.Company = await CompanyService.UpdateProductAccess(Layout.Company.id, globalService);
      Productions = Layout.Company.products.Where(x => x.active && x.id != "storage").ToList();
      await globalService.Update(Layout.Company.id);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ActiveItem()", ex.Message, Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}