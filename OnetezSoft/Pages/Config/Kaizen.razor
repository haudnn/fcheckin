@page "/config/kaizen"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

@if (!string.IsNullOrEmpty(_message))
{
  <div id="notify">
    <div class="notification is-@(_success ? "success" : "danger")">
      <button class="delete" @onclick="() => _message = string.Empty"></button>
      <p>@((MarkupString)_message)</p>
    </div>
  </div>
}

@if (Layout.User.role != 1 && !Layout.User.role_manage.kaizen)
{
  <PopupNoRole />
}
else
{
  <section class="p-4 @(_loaded ? "" : "is-loading")">
    <div class="card p-5">
      <ul class="columns is-vcentered is-multiline is-variable is-2 mb-5">
        <li class="column">
          <h1 class="title is-5 has-text-info">
            CẤU HÌNH CHỦ ĐỀ KAIZEN
          </h1>
        </li>
        <li class="column is-narrow">
          <a class="button is-small" @onclick="() => EditItem(null)">
            <span class="icon">
              <span class="material-icons-outlined is-size-6">add</span>
            </span>
            <span>Thêm mới</span>
          </a>
        </li>
      </ul>
      <table class="table is-fullwidth is-vcentered mt-5">
        <thead>
          <tr>
            <th width="60px">Hình</th>
            <th>Tên chủ đề</th>
            <th width="70px" align="center">Xử lý</th>
          </tr>
        </thead>
        <tbody>
          @if (company.kaizen != null)
          {
            var parents = company.kaizen.Where(x => string.IsNullOrEmpty(x.parent)).ToList();
            foreach (var main in parents)
            {
              var childs = company.kaizen.Where(x => x.parent == main.id).ToList();
              <tr>
                <td>
                  @if (!string.IsNullOrEmpty(main.image))
                  {
                    <a class="image is-32x32" href="@main.image" target="_blank">
                      <img src="@main.image" alt="IMG">
                    </a>
                  }
                </td>
                <td>
                  <a class="has-text-weight-semibold" @onclick="() => EditItem(main)">@main.name</a>
                </td>
                <td align="center">
                  <label class="td-label">Xử lý</label>
                  <div class="td-value">
                    <a class="icon has-text-link" title="Chỉnh sửa" @onclick="() => EditItem(main)">
                      <i class="material-icons-outlined is-size-5">
                        edit
                      </i>
                    </a>
                    <a class="icon has-text-danger" title="Xóa" @onclick="() => DeleteItem(main)">
                      <i class="material-icons-outlined is-size-5">
                        delete
                      </i>
                    </a>
                  </div>
                </td>
              </tr>
              foreach (var item in childs)
              {
                <tr>
                  <td align="center">
                    @if (!string.IsNullOrEmpty(item.image))
                    {
                      <a class="image is-32x32" href="@item.image" target="_blank">
                        <img src="@item.image" alt="IMG">
                      </a>
                    }
                  </td>
                  <td>
                    <span class="mr-2">└─</span>
                    <a @onclick="() => EditItem(item)">@item.name</a>
                  </td>
                  <td align="center">
                    <label class="td-label">Xử lý</label>
                    <div class="td-value">
                      <a class="icon has-text-link" title="Chỉnh sửa" @onclick="() => EditItem(item)">
                        <i class="material-icons-outlined is-size-5">
                          edit
                        </i>
                      </a>
                      <a class="icon has-text-danger" title="Xóa" @onclick="() => DeleteItem(item)">
                        <i class="material-icons-outlined is-size-5">
                          delete
                        </i>
                      </a>
                    </div>
                  </td>
                </tr>
              }
            }
          }
        </tbody>
      </table>
    </div>
  </section>
}


@if (current != null)
{
  var parents = company.kaizen.Where(x => string.IsNullOrEmpty(x.parent)).ToList();
  <div class="modal is-active">
    <div class="modal-background"></div>
    <div class="modal-card">
      <div class="modal-card-head">
        <div class="modal-card-title">
          @(string.IsNullOrEmpty(current.id) ? "Tạo chủ đề mới" : "Chỉnh sửa chủ đề")
        </div>
        <a class="delete" @onclick="() => current = null"></a>
      </div>
      <div class="modal-card-body">
        <form @onsubmit="Update">
          <div class="field">
            <label class="label">Tên chủ đề</label>
            <div class="control">
              <input @bind="current.name" type="text" class="input" />
            </div>
          </div>
          <div class="field">
            <label class="label">Chủ đề chính</label>
            <div class="control">
              <div class="select is-fullwidth">
                <select @bind="parentId">
                  <option value>- Không chọn -</option>
                  @foreach (var sl in parents)
                  {
                    <option value="@sl.id">@sl.name</option>
                  }
                </select>
              </div>
            </div>
          </div>
          <div class="field">
            <label class="label">Hình đại diện</label>
            <div class="field has-addons">
              <div class="control">
                <a class="image is-square">
                  <img src="@current.image" />
                </a>
              </div>
              <div class="control is-expanded">
                <InputFile OnChange="Upload" accept="image/*" class="input" />
              </div>
            </div>
          </div>
          <div class="field mt-5">
            <div class="buttons is-right">
              <a class="button" @onclick="() => current = null">
                Hủy
              </a>
              <a class="button is-link" @onclick="Update">
                <span class="icon">
                  <span class="material-icons-outlined is-size-6">
                    done
                  </span>
                </span>
                <span>Cập nhật</span>
              </a>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }

  private bool _loaded = false;
  private bool _success = false;
  private string _message = string.Empty;
  private string _title = "Cấu hình chủ đề Kaizen";

  private CompanyModel company = new();
  private CompanyModel.Kaizen current = null;
  private string parentId = null;

  protected override async Task OnInitializedAsync()
  {
    company = await DbMainCompany.Get(Layout.Company.id);
    _loaded = true;
  }

  private async Task DeleteItem(CompanyModel.Kaizen item)
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa {item.name}"))
      return;

    company.kaizen.Remove(item);
    await DbMainCompany.Update(company);
  }

  private void EditItem(CompanyModel.Kaizen item)
  {
    if (item == null)
    {
      current = new();
    }
    else
    {
      current = item;
      parentId = current.parent;
    }
  }

  private async Task Update()
  {
    _success = false;
    _message = string.Empty;

    if (string.IsNullOrEmpty(current.name))
    {
      _message = "Bạn cần nhập tên chủ đề !";
      await Task.Delay(5000);
      _message = string.Empty;
    }
    else
    {
      current.parent = parentId;

      if (string.IsNullOrEmpty(current.id))
      {
        current.id = Mongo.RandomId();
        company.kaizen.Add(current);
      }

      company = await DbMainCompany.Update(company);
      current = null;
    }
  }

  private async Task Upload(InputFileChangeEventArgs e)
  {
    _success = false;
    foreach (var file in e.GetMultipleFiles())
    {
      _message = "Đang upload file lên...";

      try
      {
        if (file.Size <= Layout.MaxFileSize)
        {
          var fileContent = new StreamContent(file.OpenReadStream(Layout.MaxFileSize));
          var fileLink = await Files.SaveFileAsync(fileContent, file.Name);
          current.image = fileLink;
          _message = string.Empty;
        }
        else
        {
          _message = $"Chỉ cho phép file tối đa {string.Format("{0:0,0}", Layout.MaxFileSize / 1024000)} MB";
        }
      }
      catch (Exception ex)
      {
        _message = $"ERROR: {ex.Message}";
      }
    }
  }
}