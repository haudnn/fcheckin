@page "/config/other"
@page "/config/other/banner"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

@if (!string.IsNullOrEmpty(_message))
{
  <div id="notify">
    <div class="notification is-@(_success ? "success" : "danger")">
      <button class="delete" @onclick="() => _message = string.Empty"></button>
      <p>@((MarkupString)_message)</p>
    </div>
  </div>
}

@if (Layout.User.role != 1 && !Layout.User.role_manage.other)
{
  <PopupNoRole />
}
else
{
  <section class="columns is-gapless has_menu_left  @(_loaded ? "" : "is-loading")">
    <div class="column is-narrow">
      <div class="card p-3 menu_left">
        <a class="is-active" href="/config/other/banner">
          Banner
        </a>
        <a href="/config/other/blogs">
          Tin tức
        </a>
        <a href="/config/other/quotes">
          Châm ngôn
        </a>
      </div>
    </div>
    <div class="column">
      <div class="card p-5">
        <ul class="columns is-vcentered is-multiline is-variable is-2 mb-5">
          <li class="column">
            <h1 class="title is-5 has-text-info">
              THIẾT LẬP BANNER
            </h1>
          </li>
          <li class="column is-narrow">
            <div class="select is-fullwidth">
              <select @onchange="ChangePage">
                <option value="">Trang hiển thị</option>
                @foreach (var sl in pageList)
                {
                  <option value="@sl.Key">@sl.Value</option>
                }
              </select>
            </div>
          </li>
          <li class="column is-narrow">
            <div class="select is-fullwidth">
              <select @onchange="ChangeDepartment" class="is-family-code">
                <option value="">Phòng ban</option>
                @foreach (var item in departments)
                {
                  <option value="@item.id">@item.name</option>
                }
              </select>
            </div>
          </li>
          <li class="column is-narrow">
            <a class="button is-link" @onclick="() => EditItem(null)">
              <span class="icon">
                <span class="material-icons-outlined is-size-6">add</span>
              </span>
              <span>Thêm mới</span>
            </a>
          </li>
        </ul>
        <table class="table is-fullwidth is-vcentered is-responsive mt-5">
          <thead>
            <tr>
              <th width="120px">Hình ảnh</th>
              <th width="20%">Tiêu đề</th>
              <th>Liên kết</th>
              <th width="15%">Phòng ban</th>
              <th width="18%">Trang hiển thị</th>
              <th width="80px" align="center">Ghim</th>
              <th width="70px" align="center">Xử lý</th>
            </tr>
          </thead>
          <tbody>
            @foreach (var item in dataList)
            {
              var department = departmentAll.SingleOrDefault(x => x.id == item.department);

              <tr>
                <td align="center">
                  <a class="image" href="@item.image" target="_blank">
                    <img src="@item.image" alt="IMG" />
                  </a>
                </td>
                <td>
                  <label class="td-label">Tiêu đề</label>
                  <div class="td-value">
                    <a class="has-text-weight-semibold" @onclick="() => EditItem(item)">
                      @item.name
                    </a>
                  </div>
                </td>
                <td>
                  <label class="td-label">Liên kết</label>
                  <div class="td-value">
                    <a class="text_1_line" href="@item.link" target="_blank">
                      @item.link
                    </a>
                  </div>
                </td>
                <td>
                  <label class="td-label">Phòng ban</label>
                  <div class="td-value has-text-weight-semibold">
                    @(department != null ? department.name : "")
                  </div>
                </td>
                <td>
                  <label class="td-label">Trang hiển thị</label>
                  <div class="td-value">
                    <div class="text_3_line" onclick="toggleText(this)">
                      @foreach (var p in item.pages)
                      {
                        <p>@p.Value</p>
                      }
                    </div>
                  </div>
                </td>
                <td align="center">
                  <label class="td-label">Ghim</label>
                  <div class="td-value">
                    <a class="icon" @onclick="() => ToggleItem(item)">
                      @if (item.pin)
                      {
                        <span class="material-icons-outlined is-size-4 has-text-success">
                          toggle_on
                        </span>
                      }
                      else
                      {
                        <span class="material-icons-outlined is-size-4 has-text-black">
                          toggle_off
                        </span>
                      }
                    </a>
                  </div>
                </td>
                <td>
                  <a class="icon has-text-link" title="Chỉnh sửa" @onclick="() => EditItem(item)">
                    <i class="material-icons-outlined is-size-5">
                      edit
                    </i>
                  </a>
                  <a class="icon has-text-danger" title="Xóa" @onclick="() => DeleteItem(item)">
                    <i class="material-icons-outlined is-size-5">
                      delete
                    </i>
                  </a>
                </td>
              </tr>
            }
          </tbody>
        </table>
      </div>
    </div>
  </section>
}


@if (current != null)
{
  <div class="modal is-active">
    <div class="modal-background"></div>
    <div class="modal-card">
      <div class="modal-card-head">
        <div class="modal-card-title">
          @(string.IsNullOrEmpty(current.id) ? "Thêm banner mới" : "Chỉnh sửa banner")
        </div>
        <a class="delete" @onclick="() => current = null"></a>
      </div>
      <form @onsubmit="Update" class="modal-card-body">
        <ul class="columns is-multiline is-variable is-2">
          <li class="column is-full">
            <div class="field">
              <label class="label">Tiêu đề *</label>
              <div class="control">
                <input @bind="current.name" type="text" class="input" />
              </div>
            </div>
          </li>
          <li class="column is-full">
            <div class="field">
              <label class="label">Hình ảnh *</label>
              <div class="control">
                <InputFile OnChange="Upload" accept="image/*" class="input" />
              </div>
              @if (!string.IsNullOrEmpty(current.image))
              {
                <div class="image is_radius mt-2">
                  <img src="@current.image" />
                </div>
              }
            </div>
          </li>
          <li class="column is-full">
            <div class="field">
              <label class="label">Liên kết</label>
              <div class="control">
                <input @bind="current.link" type="text" class="input" />
              </div>
            </div>
          </li>
          <li class="column is-two-thirds">
            <div class="field">
              <label class="label">Phòng ban</label>
              <div class="control">
                <div class="select is-fullwidth">
                  <select @bind="current.department">
                    <option value="">Chọn phòng ban</option>
                    @foreach (var item in departments)
                    {
                      <option value="@item.id">@item.name</option>
                    }
                  </select>
                </div>
              </div>
            </div>
          </li>
          <li class="column is-one-third">
            <div class="field">
              <label class="label">Thuộc tính</label>
              <div class="control pt-2">
                <label class="checkbox">
                  <input @bind="current.pin" type="checkbox" />
                  Ghim banner
                </label>
              </div>
            </div>
          </li>
          <li class="column is-full">
            <div class="field">
              <label class="label">Trang hiển thị</label>
              <div class="control">
                <ul class="columns is-multiline is-mobile is-variable is-2">
                  @foreach (var p in current.pages)
                  {
                    <li class="column is-half">
                      <div class="field has-addons">
                        <div class="control is-expanded">
                          <input type="text" value="@p.Value" class="input is_bg" readonly />
                        </div>
                        <div class="control">
                          <a class="button is_bg has-text-danger" @onclick="() => current.pages.Remove(p.Key)">
                            <span class="icon">
                              <i class="material-icons is-size-6">close</i>
                            </span>
                          </a>
                        </div>
                      </div>
                    </li>
                  }
                </ul>
              </div>
            </div>
            <div class="field has-addons">
              <div class="control">
                <label class="button is-static">Chọn trang</label>
              </div>
              <div class="control is-expanded">
                <div class="select is-fullwidth">
                  <select @onchange="SelectPage">
                    <option value="">Chọn trang</option>
                    @foreach (var sl in pageList)
                    {
                      <option value="@sl.Key">@sl.Value</option>
                    }
                  </select>
                </div>
              </div>
            </div>
          </li>
        </ul>

        <div class="field mt-5">
          <div class="buttons is-right">
            <a class="button" @onclick="() => current = null">
              Hủy
            </a>
            <a class="button is-link" @onclick="Update">
              <span class="icon">
                <i class="material-icons-outlined is-size-6">done</i>
              </span>
              <span>Cập nhật</span>
            </a>
          </div>
        </div>
      </form>
    </div>
  </div>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }

  private bool _loaded = false;
  private bool _success = false;
  private string _message = string.Empty;
  private string _title = "Thiết lập banner";

  private BannerModel current = null;
  private List<BannerModel> dataList = new();
  private List<DepartmentModel> departmentAll = new();
  private List<DepartmentModel.SelectList> departments = new();
  private Dictionary<string, string> pageList = new();
  private string filterDepartment = string.Empty;
  private string filterPage = string.Empty;

  protected override async Task OnInitializedAsync()
  {
    departmentAll = DbDepartment.GetAll(Layout.Company.id);
    departments.AddRange(DbDepartment.GetSelectList(Layout.Company.id, null, 0, null));
    pageList = PageList();

    await Search();

    _loaded = true;
  }

  protected override void OnAfterRender(bool firstRender)
  {
    _message = string.Empty;
  }

  private async Task Search()
  {
    dataList = await DbBanner.GetList(Layout.Company.id);
    if (!string.IsNullOrEmpty(filterDepartment))
      dataList = dataList.Where(x => x.department == filterDepartment).ToList();
    if (!string.IsNullOrEmpty(filterPage))
      dataList = dataList.Where(x => x.pages.Keys.Contains(filterPage)).ToList();
    dataList = (from x in dataList orderby x.pin descending, x.date select x).ToList();
  }

  private async Task ChangePage(ChangeEventArgs e)
  {
    filterPage = e.Value.ToString();
    await Search();
  }

  private async Task ChangeDepartment(ChangeEventArgs e)
  {
    filterDepartment = e.Value.ToString();
    await Search();
  }

  private async Task DeleteItem(BannerModel item)
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa {item.name}"))
      return;

    dataList.Remove(item);
    await DbBanner.Delete(Layout.Company.id, item.id);
  }

  private async Task ToggleItem(BannerModel item)
  {
    item.pin = !item.pin;
    await DbBanner.Update(Layout.Company.id, item);
  }

  private void EditItem(BannerModel item)
  {
    if (item == null)
    {
      current = new() { pages = new Dictionary<string, string>() };
    }
    else
    {
      current = item;
    }
  }

  private void SelectPage(ChangeEventArgs e)
  {
    var key = e.Value.ToString();
    if (!string.IsNullOrEmpty(key))
    {
      var check = current.pages.Where(x => x.Key == key).Count();
      if (check == 0)
      {
        var item = pageList.SingleOrDefault(x => x.Key == key);
        current.pages.Add(item.Key, item.Value);
      }
    }
  }

  private async Task Upload(InputFileChangeEventArgs e)
  {
    _success = false;
    foreach (var file in e.GetMultipleFiles())
    {
      _message = "Đang upload file lên...";
      try
      {
        if (file.Size <= Layout.MaxFileSize)
        {
          var fileContent = new StreamContent(file.OpenReadStream(Layout.MaxFileSize));
          current.image = await Files.SaveFileAsync(fileContent, file.Name);
          _message = string.Empty;
        }
        else
        {
          _message = $"Chỉ cho phép file tối đa {string.Format("{0:0,0}", Layout.MaxFileSize / 1024000)} MB";
        }
      }
      catch (Exception ex)
      {
        _message = $"ERROR: {ex.Message}";
      }
    }
  }

  private async Task Update()
  {
    _success = false;
    _message = string.Empty;

    if (string.IsNullOrEmpty(current.name) || string.IsNullOrEmpty(current.image))
    {
      _message = "Bạn cần nhập nội dung và hình ảnh !";
      await Task.Delay(5000);
      _message = string.Empty;
    }
    else
    {
      if (string.IsNullOrEmpty(current.id))
      {
        current = await DbBanner.Create(Layout.Company.id, current);
        dataList.Insert(0, current);
      }
      else
      {
        current = await DbBanner.Update(Layout.Company.id, current);
      }
      current = null;
    }
  }

  private Dictionary<string, string> PageList()
  {
    var results = new Dictionary<string, string>();
    results.Add("/blogs", "Tin tức");
    results.Add("/reports", "Thống kê");
    results.Add("/teams", "Đội nhóm");
    results.Add("/todolist", "Todolist");
    results.Add("/okr/setup", "OKRs / Thiết lập");
    results.Add("/okr/tasks", "OKRs / Hành động");
    results.Add("/okr/overview", "OKRs / Tổng quan");
    results.Add("/cfr/checkin", "CFRs / Check-in");
    results.Add("/cfr/star", "CFRs / Ghi nhận - tặng sao");
    results.Add("/kaizen", "Kaizen");
    results.Add("/gift", "Đổi quà");
    results.Add("/educate", "Đào tạo");
    return results;
  }
}