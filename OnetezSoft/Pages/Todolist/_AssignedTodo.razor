@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<section class="card p-5">
  <ul class="columns is-vcentered is-variable is-2 mb-3">
    <li class="column">
      <h1 class="title is-5 has-text-info">
        VIỆC ĐƯỢC GIAO
      </h1>
    </li>
    <li class="column is-narrow">
      <div class="dropdown is-hoverable is-right">
        <div class="dropdown-trigger">
          <a class="icon-text">
            <span class="has-text-link">@DbTodolist.AssignStatus(filterStatus).name</span>
            <span class="icon">
              <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
            </span>
          </a>
        </div>
        <div class="dropdown-menu">
          <div class="dropdown-content">
            <a class="dropdown-item" @onclick="() => ChangeFilterStatus(0)">Tất cả trạng thái</a>
            @foreach (var item in DbTodolist.AssignStatus())
            {
              <a class="dropdown-item" @onclick="() => ChangeFilterStatus(item.id)">@item.name</a>
            }
          </div>
        </div>
      </div>
    </li>
    <li class="column is-one-quarter">
      <MemberSearch sources="Layout.UserList" OnUpdate="ChangeFilterUser" />
    </li>
    <li class="column is-narrow">
      <div class="field has-addons">
        <div class="control">
          <span class="button is-link">
            <span class="icon">
              <i class="material-icons-outlined is-size-6">event</i>
            </span>
          </span>
        </div>
        <div class="control" style="width: 200px;">
          <div class="input is-link">
            <DateRangePicker @bind-StartDate="filterDateS" @bind-EndDate="filterDateE"
              OnRangeSelect="ChangeFilterDate" />
          </div>
        </div>
      </div>
    </li>
  </ul>

  <table class="table is-fullwidth is-vcentered is-responsive">
    <thead>
        <tr>
          <th width="130px">Thời gian</th>
          <th>Công việc</th>
          <th width="120px">Độ ưu tiên</th>
          <th width="90px" align="center">Bắt đầu</th>
          <th width="90px" align="center">Kết thúc</th>
          <th width="15%">Người giao</th>
          <th width="120px" align="center">Trạng thái</th>
        </tr>
    </thead>
    <tbody>
      @foreach (var todo in dataList)
      {
        var level = DbTodolist.Level(todo.level);
        var assign = DbTodolist.AssignStatus(todo.assign_status);
        var member = UserService.GetMember(Layout.UserList, todo.user);

        <tr>
          <td>
            <span>@Shared.ConvertDateWeek(todo.date)</span>
          </td>
          <td>
            <div class="has-text-link has-text-weight-semibold">@todo.name</div>
          </td>
          <td>
            <label class="td-label">Ưu tiên:</label>
            <div class="td-value">
              <span class="@level.color">@level.name</span>
            </div>
          </td>
          <td align="center">
            <label class="td-label">Bắt đầu</label>
            <div class="td-value">
              <span>@todo.start</span>
            </div>
          </td>
          <td align="center">
            <label class="td-label">Kết thúc</label>
            <div class="td-value">
              <span>@todo.end</span>
            </div>
          </td>
          <td>
            <label class="td-label">Người giao:</label>
            <div class="td-value">
              <div class="user_item">
                <span class="image is-rounded is-24x24">
                  <img src="@member.avatar" alt="AVT">
                </span>
                <span class="text_1_line">@member.name</span>
              </div>
            </div>
          </td>
          <td align="center">
            <label class="td-label">Trạng thái</label>
              <div class="td-value">
                @if(todo.assign_status == 1)
                {
                  <div class="dropdown is-hoverable">
                    <div class="dropdown-trigger">
                      <div class="icon-text">
                        <span class="@assign.color">@assign.name</span>
                        <span class="icon is-small">
                          <i class="material-icons-outlined is-size-6">expand_more</i>
                        </span>
                      </div>
                    </div>
                    <div class="dropdown-menu">
                      <div class="dropdown-content py-0">
                        <a class="dropdown-item px-2 icon-text has-text-link"
                          @onclick="() => AcceptItem(todo)">
                          <span class="icon">
                            <i class="material-icons-outlined is-size-6">done</i>
                          </span>
                          <span>Chấp nhận</span>
                        </a>
                        <a class="dropdown-item px-2 icon-text has-text-danger"
                          @onclick="() => RejectItem(todo)">
                          <span class="icon">
                            <i class="material-icons-outlined is-size-6">close</i>
                          </span>
                          <span>Từ chối</span>
                        </a>
                      </div>
                    </div>
                  </div>
                }
                else
                {
                  <span class="has-text-weight-semibold @assign.color">@assign.name</span>
                }
              </div>
          </td>
        </tr>
      }
    </tbody>
  </table>
  @if(dataList.Count == 0)
  {
    <div class="py-1 has-text-grey has-text-centered">
      Không có dữ liệu phù hợp.
    </div>
  }
</section>


@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  private List<TodolistModel.Todo> dataList = new();
  private int filterStatus = 0;
  private string filterUser = string.Empty;
  private DateTimeOffset? filterDateS = DateTime.Today;
  private DateTimeOffset? filterDateE = DateTime.Today;

  protected override async Task OnInitializedAsync()
  {
    Shared.GetTimeSpan(1, out DateTime start, out DateTime end);
    filterDateS = start;
    filterDateE = end;
    await GetList();
  }

  private async Task ChangeFilterStatus(int value)
  {
    filterStatus = value;
    await GetList();
  }

  private async Task ChangeFilterDate(DateRange range)
  {
    await GetList();
  }

  private async Task ChangeFilterUser(string value)
  {
    filterUser = value;
    await GetList();
  }

  private async Task GetList()
  {
    dataList = await DbTodoItem.GetMyAssignedList(Layout.Company.id, Layout.User.id,
      filterDateS.Value.Ticks, filterDateE.Value.Ticks);
    if(filterStatus > 0)
      dataList.RemoveAll(x => x.assign_status != filterStatus);
    if(!string.IsNullOrEmpty(filterUser))
      dataList.RemoveAll(x => x.assign_user != filterUser);
  }

  private async Task RejectItem(TodolistModel.Todo item)
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn từ chối công việc: {item.name}?"))
      return;

    item.assign_status = 3;
    await DbTodoItem.Update(Layout.Company.id, item);
  }

  private async Task AcceptItem(TodolistModel.Todo item)
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn chập nhận công việc: {item.name}?"))
      return;

    item.confirm = true;
    item.assign_status = 2;
    string error = await TodolistService.AddTodoItem(Layout.Company.id, item.user, item.date, item);
    if(string.IsNullOrEmpty(error))
    {
      await JSRuntime.InvokeVoidAsync("tagline", true, "Đã thêm công việc vào Todolist của bạn.");
      SendMessage(item);
    }
    else
    {
      item.assign_status = 1;
      await JSRuntime.InvokeVoidAsync("tagline", false, error);
    }
  }

  public void SendMessage(TodolistModel.Todo item)
  {
    MessagingCenter.Send(this, "todolist_" + Layout.User.id, item.date);
  }
}