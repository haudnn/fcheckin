@page "/admin"
@page "/admin/home"
@layout LayoutAdmin
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

<section class="p-4 is-flex" style="min-height: 90vh; align-items: center; justify-content: center;">
  @if(Layout.User.id == ConfigSystem.DeveloperId)
  {
    <div>
      <div class="buttons">
        <span class="button is-dark has-text-weight-bold" style="width: 92px;">BƯỚC 1</span>
        <a class="button is-danger" @onclick="DeleteCompanyList">
          Xóa tất cả tổ chức
        </a>
        <a class="button is-danger" @onclick="DeleteUserList">
          Xóa tất cả tài khoản
        </a>
        <a class="button is-danger" @onclick="Testing">
          Testing
        </a>
      </div>

      <div class="buttons">
        <span class="button is-dark has-text-weight-bold" style="width: 92px;">BƯỚC 2</span>
        <a class="button is-link" @onclick="MoveCompanyList">
          Chuyển dữ liệu tổ chức
        </a>
        <a class="button is-link" @onclick="MoveUserList">
          Chuyển dữ liệu tài khoản
        </a>
      </div>

      <div class="buttons">
        <span class="button is-dark has-text-weight-bold" style="width: 92px;">BƯỚC 3</span>
        <a class="button is-warning" @onclick="MoveCompanyAll">
          Chuyển toàn bộ dữ liệu của tổ chức
        </a>
        <a class="button is-warning" @onclick="GetCompanyInWork">
          Xem tất cả tổ chức trong DB Workdo
        </a>
      </div>

      <div class="buttons">
        <span class="button is-dark has-text-weight-bold" style="width: 92px;">CÔNG CỤ</span>
        <a class="button is-primary" @onclick="GetCompanyList">
          Lấy danh sách tổ chức
        </a>
        <a class="button is-primary" @onclick="GetUserList">
          Lấy danh sách tài khoản
        </a>
        <a class="button is-primary" @onclick="RestoreCompnay">
          Cứu DB TP Bank
        </a>
      </div>

      @if(companys.Count > 0)
      {
        <table class="table is-bordered is-vcentered">
          <thead>
            <tr>
              <th>ID</th>
              <th width="300px">Name</th>
              <th>Status</th>
              <th>Delete</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            @foreach (var item in companys)
            {
              <tr>
                <td>@item.id</td>
                <td>@item.name</td>
                <td>@(item.status ? "Active" : "")</td>
                <td>@(item.delete ? "Delete" : "")</td>
                <td>
                  @if(!item.delete)
                  {
                    <a class="tag is-@(item.status ? "link" : "danger")" @onclick="() => MoveCompanyData(item)">Đồng bộ</a>
                  }
                </td>
              </tr>
            }
          </tbody>
        </table>
      }
    </div>
  }
  else
  {
    <div class="has-text-centered has-text-weight-bold is-uppercase">
      FASTDO CMS - Quản lý hệ thống
    </div>
  }
</section>


@code {
  [CascadingParameter]
  public LayoutAdmin Layout { get; set; }
  private string _title = "FASTDO CMS";
  private List<string> customers = new();

  private async Task DeleteUserList()
  {
    int count = 0;
    await JSRuntime.InvokeVoidAsync("console.warn", "Xóa tài khoản cũ");
    var data = await BackupData.GetList<UserModel>("fastdo", "users");
    foreach (var item in data)
    {
      if(!item.is_admin)
      {
        // Xóa tài khoản cũ nhưng không xóa admin
        BackupData.Delete<UserModel>("fastdo", "users", item.id);
        await JSRuntime.InvokeVoidAsync("console.log", item.email + " => delete");
        count++;
      }
    }
    await JSRuntime.InvokeVoidAsync("console.log",$"DELETE {count}/{data.Count} user");
  }
 
  private async Task DeleteCompanyList()
  {
    await JSRuntime.InvokeVoidAsync("console.warn", "Xóa công ty cũ");
    var data = await BackupData.GetList<CompanyModel>("fastdo", "companys");
    foreach (var item in data)
    {
      // Xóa tổ chức trong database chính
      BackupData.Delete<CompanyModel>("fastdo", "companys", item.id);

      // Xóa dữ liệu trong database công ty
      var db_source = "fastdo_" + item.id;
      // departments
      await DeleteDataModel<DepartmentModel>(db_source, "departments");
      // okrs
      await DeleteDataModel<OkrModel>(db_source, "okrs");
      // okr_config
      await DeleteDataModel<OkrConfigModel>(db_source, "okr_config");
      // okr_stars
      await DeleteDataModel<OkrStarModel>(db_source, "okr_stars");
      // okr_cfrs
      await DeleteDataModel<OkrCfrModel>(db_source, "okr_cfrs");
      // okr_checkins
      await DeleteDataModel<OkrCheckinModel>(db_source, "okr_checkins");
      // kaizen
      await DeleteDataModel<KaizenModel>(db_source, "kaizen");
      // quotes
      await DeleteDataModel<QuotesModel>(db_source, "quotes");
      // todolist
      await DeleteDataModel<TodolistModel>(db_source, "todolist");
      // achievement
      await DeleteDataModel<AchievementModel>(db_source, "achievement");
      // gift_products
      await DeleteDataModel<GiftProductModel>(db_source, "gift_products");
      // days_checkin
      await DeleteDataModel<DayCheckinModel>(db_source, "days_checkin");

      await JSRuntime.InvokeVoidAsync("console.warn", item.id + " : " + item.name + " => Delete");
    }
  }

  private async Task Testing()
  {
    await JSRuntime.InvokeVoidAsync("console.warn", "Testing");
    //await DeleteDataModel<TodolistModel.Todo>("fastdo_C7A9347733", "todoitems");
  }

  private async Task DeleteDataModel<T>(string db_source, string table_name)
  {
    int count = 0;
    var data = await BackupData.GetList<T>(db_source, table_name);
    foreach (var item in data)
    {
      try
      {
        var id = BackupData.GetValue<T>(item, "id");
        BackupData.Delete<T>(db_source, table_name, id);
        count++;
        //await JSRuntime.InvokeVoidAsync("console.log", "Delete => " + id);
      }
      catch (System.Exception)
      {
        //await JSRuntime.InvokeVoidAsync("console.warn",$"EXIST => {ex.Message}");
      }
    }
    await JSRuntime.InvokeVoidAsync("console.log",$".....{table_name} => Delete {count}/{data.Count} item");
  }

 private async Task MoveCompanyList()
 {
    customers = new();
    await JSRuntime.InvokeVoidAsync("console.warn", "Chuyển dữ liệu tổ chức");
    var data = await BackupData.GetList<CompanyModel>("workdo", "companys");
    foreach (var item in data)
    {
      if(item.status && !item.delete)
      {
        // Thêm tài khoản khách hàng
        customers.Add(item.admin_id);
        // Chuyển dữ liệu
        try
        {  
          item.products = new();
          BackupData.Create<CompanyModel>("fastdo", "companys", item);
          await JSRuntime.InvokeVoidAsync("console.log", "DONE => " + item.id + " : " + item.name);
        }
        catch (System.Exception)
        {
          await JSRuntime.InvokeVoidAsync("console.warn", "EXIST => " + item.id + " : " + item.name);
        }
      }
    }
  }

  private async Task MoveUserList()
  {
    await JSRuntime.InvokeVoidAsync("console.warn", "Chuyển dữ liệu tài khoản");
    var data = await BackupData.GetList<UserModel>("workdo", "users");
    int count = 0;
    foreach (var item in data)
    {
      if(item.id != ConfigSystem.DeveloperId && item.active && !item.delete)
      {
        // Chuyển dữ liệu
        try
        {
          if(customers.Contains(item.id))
            item.is_customer = true;
          BackupData.Create<UserModel>("fastdo", "users", item);
          await JSRuntime.InvokeVoidAsync("console.log", "....." + item.id + " : " + item.email);
          count++;
        }
        catch (System.Exception)
        {
          //await JSRuntime.InvokeVoidAsync("console.warn", "EXIST => " + item.id + " : " + item.email);
        }
      }
    }
    await JSRuntime.InvokeVoidAsync("console.log", $"DONE => {count}/{data.Count} user");
  }

  private List<CompanyModel> companys = new();
  private async Task GetCompanyInWork()
  {
    companys = await BackupData.GetList<CompanyModel>("workdo", "companys");
    companys = companys.OrderBy(x => x.delete).ToList();
  }

  private async Task MoveCompanyAll()
  {
    var data = await BackupData.GetList<CompanyModel>("fastdo", "companys");
    foreach (var item in data)
    {
      if(item.status && !item.delete)
        await MoveCompanyData(item);
    }
  }

  private async Task MoveCompanyData(CompanyModel item)
  {
    var db_source = "company_" + item.id;
    var db_target = "fastdo_" + item.id;
    await JSRuntime.InvokeVoidAsync("console.warn", $"Move data: [{item.id}] {item.name}");

    // users
    await MoveDataUser(db_source, db_target, "users");
    // departments
    await MoveDataModel<DepartmentModel>(db_source, db_target, "departments");
    // okrs
    await MoveDataModel<OkrModel>(db_source, db_target, "okrs");
    // okr_config
    await MoveDataModel<OkrConfigModel>(db_source, db_target, "okr_config");
    // okr_stars
    await MoveDataModel<OkrStarModel>(db_source, db_target, "okr_stars");
    // okr_cfrs
    await MoveDataModel<OkrCfrModel>(db_source, db_target, "okr_cfrs");
    // okr_checkins
    await MoveDataModel<OkrCheckinModel>(db_source, db_target, "okr_checkins");
    // kaizen
    await MoveDataModel<KaizenModel>(db_source, db_target, "kaizen");
    // quotes
    await MoveDataModel<QuotesModel>(db_source, db_target, "quotes");
    // todolist
    await MoveDataModel<TodolistModel>(db_source, db_target, "todolist");
    // achievement
    await MoveDataModel<AchievementModel>(db_source, db_target, "achievement");
    // gift_products
    await MoveDataModel<GiftProductModel>(db_source, db_target, "gift_products");
    // days_checkin
    await MoveDataModel<DayCheckinModel>(db_source, db_target, "days_checkin");

    await JSRuntime.InvokeVoidAsync("console.log", $"DONE: {db_source} => {db_target}");
    await JSRuntime.InvokeVoidAsync("tagline", true, $"Đã đồng bộ dữ liệu tổ chức [{item.id}] {item.name}");
  }

  private async Task MoveDataUser(string db_source, string db_target, string table_name)
  {
    int count = 0;
    var data = await BackupData.GetList<UserModel>(db_source, table_name);
    foreach (var item in data)
    {
      try
      {  
        item.products = new();
        BackupData.Create<UserModel>(db_target, table_name, item);
        count++;
      }
      catch (System.Exception)
      {
        //await JSRuntime.InvokeVoidAsync("console.warn",$"EXIST => {item.email}");
      }
    }
    await JSRuntime.InvokeVoidAsync("console.log",$".....{table_name} => done {count}/{data.Count} item");
  }

  private async Task MoveDataModel<T>(string db_source, string db_target, string table_name)
  {
    int count = 0;
    var data = await BackupData.GetList<T>(db_source, table_name);
    foreach (var item in data)
    {
      try
      {
        BackupData.Create<T>(db_target, table_name, item);
        count++;
      }
      catch (System.Exception)
      {
        //await JSRuntime.InvokeVoidAsync("console.warn",$"EXIST => {ex.Message}");
      }
    }
    await JSRuntime.InvokeVoidAsync("console.log",$".....{table_name} => done {count}/{data.Count} item");
  }


  private async Task RestoreCompnay()
  {
    var companyId = "22AEB3FA5B";
    // Tạo tổ chức TP Bank
    var company = new CompanyModel() {
      id = companyId,
      name = "TPBank Quận 3",
      status = true, 
      admin_id = Layout.User.id
    };
    await DbMainCompany.Create(company);
    await JSRuntime.InvokeVoidAsync("console.log",$"Tạo tổ chức xong: {company.id} - {company.name}");
    // Sao chép tài khoản
    await MoveDataUser("fastdo_" + companyId, "fastdo", "users");
    await JSRuntime.InvokeVoidAsync("console.log",$"Sao chép tài khoản xong");
  }

  private async Task GetUserList()
  {
    var data = await BackupData.GetList<UserModel>("fastdo", "users");
    await JSRuntime.InvokeVoidAsync("console.warn", "Danh sách tài khoản");
    await JSRuntime.InvokeVoidAsync("tagline", true, $"Có {data.Count} tài khoản database");
    var members = new List<MemberModel>();
    foreach (var item in data)
    {
      if(item.active && !item.delete)
      {
        members.Add(UserService.ConvertToMember(item));
        //await JSRuntime.InvokeVoidAsync("console.log", item.id + " : " + item.email + " => customer: " + item.is_customer);
      }
    }
    await JSRuntime.InvokeVoidAsync("console.table", members);
  }

  private async Task GetCompanyList()
  {
    var data = await BackupData.GetList<CompanyModel>("fastdo", "companys");
    await JSRuntime.InvokeVoidAsync("console.warn", "Danh sách tổ chức");
    await JSRuntime.InvokeVoidAsync("tagline", true, $"Có {data.Count} tổ chức trong database");
    foreach (var item in data)
    {
      if(item.status && !item.delete)
      {
        await CompanyService.UpdateProductAccess(item.id);
        await JSRuntime.InvokeVoidAsync("console.log", item.id + " : " + item.name + " => members: " + item.members);
      }
    }
  }
}
