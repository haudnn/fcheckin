@page "/educate/certificate/manager"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

@if (!string.IsNullOrEmpty(_message))
{
  <div id="notify">
    <div class="notification is-@(_success ? "success" : "danger")">
      <button class="delete" @onclick="() => _message = string.Empty"></button>
      <p>@((MarkupString)_message)</p>
    </div>
  </div>
}

<section class="p-4 @(_loaded ? "" : "is-loading")">
  <div class="card p-5">
    <ul class="columns is-vcentered is-variable is-2 mb-3">
      <li class="column">
        <h1 class="title is-5 has-text-info is-uppercase">
          @_title
        </h1>
      </li>
    </ul>
    <ul class="columns is-variable is-2 mb-3">
      <li class="column is-one-quarter">
        <div class="select is-fullwidth">
          <select @bind="filterCourse">
            <option value="">Tất cả khóa học</option>
            @foreach (var sl in courseList)
            {
              <option value="@sl.id">@sl.name</option>
            }
          </select>
        </div>
      </li>
      <li class="column is-one-quarter">
        <div class="select is-fullwidth">
          <select @bind="filterStatus">
            <option value="">Tất cả trạng thái</option>
            @foreach (var sl in statusList)
            {
              <option value="@sl.id">@sl.name</option>
            }
          </select>
        </div>
      </li>
      <li class="column">
        <div class="control has-icons-right has_suggest">
          <input class="input" type="text" placeholder="Nhập tên nhân viên..."
                 autocomplete="off" @bind="UserSearch" @bind:event="oninput" />
          <ul class="suggest">
            @foreach (var item in userSuggests)
            {
              <li class="rsitem" @onclick="() => UserSelected(item)">
                <div class="user_item">
                  <img class="image is-24x24 mr-2" src="@item.avatar" alt="IMG">
                  <span>@item.FullName</span>
                </div>
              </li>
            }
          </ul>
          <span class="icon is-right">
            <i class="material-icons-outlined is-size-6">search</i>
          </span>
        </div>
      </li>
      <li class="column is-narrow">
        <a class="button is-link is-outlined" @onclick="Search">
          <span class="icon">
            <i class="material-icons-outlined is-size-6">search</i>
          </span>
          <span>Tìm kiếm</span>
        </a>
      </li>
    </ul>

    <table class="table is-fullwidth is-vcentered is-responsive">
      <thead>
        <tr>
          <th>Khóa học</th>
          <th width="12%">Tiến độ học</th>
          <th width="12%">Bài thi đạt</th>
          <th width="20%">Học viên</th>
          <th width="150px">Ngày bắt đầu</th>
          <th width="150px">Trạng thái</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var item in dataList)
        {
          var user = Layout.UserList.SingleOrDefault(x => x.id == item.user);
          var status = DbEducateLearned.Status(item.status);
          var done = item.lessons.Where(x => x.done).Count();
          var examPass = item.lessons.Where(x => x.type > 1 && x.pass).Count();
          var examTotal = item.lessons.Where(x => x.type > 1).Count();

          <tr>
            <td>
              <label class="td-label">Khóa học</label>
              <div class="td-value">
                <div class="text_1_line" onclick="toggleText(this)">
                  @item.course_name
                </div>
              </div>
            </td>
            <td>
              <label class="td-label">Tiến độ học</label>
              <div class="td-value">
                @string.Format("{0:0}%", Shared.Progress(done, item.lessons.Count)) bài giảng
              </div>
            </td>
            <td>
              <label class="td-label">Bài thi đạt</label>
              <div class="td-value">
                @string.Format("{0}/{1}", examPass, examTotal) bài thi
              </div>
            </td>
            <td>
              <label class="td-label">Học viên</label>
              <div class="td-value">
                @if (user != null)
                {
                  <div class="user_item">
                    <img class="image is-24x24 mr-2" src="@user.avatar" alt="IMG" />
                    <span>@user.FullName</span>
                  </div>
                }
                else
                {
                  <span>@item.user</span>
                }
              </div>
            </td>
            <td>
              <label class="td-label">Ngày bắt đầu</label>
              <div class="td-value">
                @string.Format("{0:dd/MM/yyyy, HH:mm}", new DateTime(item.date))
              </div>
            </td>
            <td>
              <label class="td-label">Trạng thái</label>
              <div class="td-value">
                <div class="select is-fullwidth @status.color">
                  <select @onchange="@((ChangeEventArgs e) => ChangeStatus(item, Convert.ToInt32(e.Value)))">
                    @foreach (var sl in statusList)
                    {
                      @* if (item.status == sl.id)
                      {
                        <option value="@sl.id" selected>@sl.name</option>
                      }
                      else
                      {
                        <option value="@sl.id">@sl.name</option>
                      } *@
                      if (item.status == sl.id)
                      {
                        <option value="@sl.id" selected>
                          @StatusName(sl, item.lessons.Count, done, examPass, examTotal)
                        </option>
                      }
                      else
                      {
                        <option value="@sl.id">
                          @StatusName(sl, item.lessons.Count, done, examPass, examTotal)
                        </option>
                      }
                    }
                  </select>
                </div>
              </div>
            </td>
          </tr>
        }
        @if (dataList.Count == 0)
        {
          <tr>
            <td colspan="6">
              <div class="has-text-grey py-6">
                Không tìm thấy dữ liệu !
              </div>
            </td>
          </tr>
        }
      </tbody>
    </table>
  </div>
</section>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }

  private bool _loaded = false;
  private bool _success = false;
  private string _message = string.Empty;
  private string _title = "Cấp chứng chỉ";

  private List<EducateLearnedModel> dataList = new();
  private List<EducateCourseModel> courseList = new();
  private string filterCourse = string.Empty;
  private int filterStatus = 0;
  private string filterUserId = string.Empty;
  private string filterUserSearch = string.Empty;
  private List<UserModel> userSuggests = new();
  private List<StaticModel> statusList = new();

  protected override async Task OnInitializedAsync()
  {
    courseList = await DbEducateCourse.GetListByExaminer(Layout.Company.id, Layout.User.id);
    statusList.AddRange(DbEducateLearned.Status());

    await Search();

    _loaded = true;
  }

  protected override void OnAfterRender(bool firstRender)
  {
    _message = string.Empty;
  }

  private string UserSearch
  {
    get => filterUserSearch;
    set
    {
      filterUserSearch = value;
      userSuggests = new();
      if (!string.IsNullOrEmpty(value))
      {
        foreach (var item in Layout.UserList)
        {
          bool check = true;
          if (!Handled.Shared.SearchKeyword(filterUserSearch, item.FullName))
            check = false;
          if (check)
            userSuggests.Add(item);
        }
      }
    }
  }

  private void UserSelected(UserModel item)
  {
    filterUserSearch = item.FullName;
    filterUserId = item.id;
    userSuggests = new();
  }

  private async Task Search()
  {
    dataList = await DbEducateLearned.GetListByExaminer(Layout.Company.id, Layout.User.id, filterCourse, filterUserId, filterStatus);
  }

  private string StatusName(StaticModel status, int lessons, int done, int examPass, int examTotal)
  {
    if(status.id == 1 && done == lessons && examPass == examTotal)
      return "Đã học xong";
    return status.name;
  }

  private async Task ChangeStatus(EducateLearnedModel item, int status)
  {
    _success = false;
    if (status == 1)
    {
      item.status = 1;
      item.certificate_image = string.Empty;
      item.certificate_color = string.Empty;
      item = await DbEducateLearned.Update(Layout.Company.id, item);
    }
    else if (status == 3)
    {
      item.status = 3;
      item.certificate_image = string.Empty;
      item.certificate_color = string.Empty;
      item = await DbEducateLearned.Update(Layout.Company.id, item);
    }
    else if (status == 2)
    {
      var done = item.lessons.Where(x => x.done).Count();
      var examTotal = item.lessons.Where(x => x.type > 1).Count();
      var examPass = item.lessons.Where(x => x.type > 1 && x.pass).Count();

      if (done == item.lessons.Count)
      {
        if(examPass == examTotal)
        {
          var certificate = DbEducateCertificate.GetDefault(Layout.Company.id);

          item.status = 2;
          item.certificate_image = certificate != null ? certificate.image : string.Empty;
          item.certificate_color = certificate != null ? certificate.color : string.Empty;
          item.certificate_date = DateTime.Now.Ticks;
          item = await DbEducateLearned.Update(Layout.Company.id, item);

          // Tính thành tựu
          await DbEducateLearned.Achievement(Layout.Company.id, item.user);

          _message = "Đã cấp chứng chỉ cho học viên !";
          _success = true;

          // Gửi thông báo chuông
          await DbNotify.Create(Layout.Company.id, 600, item.id, item.user, Layout.User.id);
        }
        else
        {
          _message = "Học viên này không hoàn thành tất cả bài thi !";
          await Task.Delay(5000);
          _message = string.Empty;
        }
      }
      else
      {
        _message = "Học viên này chưa hoàn thành 100% bài giảng !";
        await Task.Delay(5000);
        _message = string.Empty;
      }
    }
  }
}