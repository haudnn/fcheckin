@page "/educate/course/manager/add"
@page "/educate/course/manager/edit/{Id}"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

@if (!string.IsNullOrEmpty(_message))
{
  <div id="notify">
    <div class="notification is-@(_success ? "success" : "danger")">
      <button class="delete" @onclick="() => _message = string.Empty"></button>
      <p>@((MarkupString)_message)</p>
    </div>
  </div>
}

<section class="p-4 @(_loaded ? "" : "is-loading")">
  <div class="card p-5">
    <ul class="columns is-multiline is-variable is-2">
      <li class="column is-two-thirds">
        <h1 class="title is-5 has-text-info is-uppercase oy-2">
          @_title
        </h1>
      </li>
      <li class="column is-one-third has-text-right">
        <div class="buttons is-right">
          <a class="button is-link is-outlined" href="/educate/course/manager">
            <span class="icon"><i class="material-icons-outlined">arrow_back</i></span>
            <span>Trở lại</span>
          </a>
          <a class="button is-link" @onclick="Update">
            <span class="icon">
              <i class="material-icons-outlined is-size-6">done</i>
            </span>
            <span>Cập nhật</span>
          </a>
        </div>
      </li>
      <li class="column is-two-thirds">
        <ul class="columns is-multiline is-variable is-2">
          <li class="column is-full">
            <div class="field">
              <label class="label">Tiêu đề *</label>
              <div class="control">
                <input @bind="current.name" type="text" class="input has-text-weight-bold is_bg" placeholder="Nhập tiêu đề khóa học..." />
              </div>
            </div>
          </li>
          <li class="column is-half">
            <div class="field">
              <label class="label">Giảng viên *</label>
              <div class="control has-icons-right has_suggest">
                <input class="input is_bg" type="text" placeholder="Tìm giảng viên..."
                       autocomplete="off" @bind="UserSearch" @bind:event="oninput" />
                <ul class="suggest">
                  @foreach (var item in userSuggests)
                  {
                    <li class="rsitem" @onclick="() => UserSelected(item)">
                      <div class="user_item">
                        <img class="image is-24x24 mr-2" src="@item.avatar" alt="IMG">
                        <span>@item.FullName</span>
                      </div>
                    </li>
                  }
                </ul>
                <span class="icon is-right">
                  <i class="material-icons-outlined">search</i>
                </span>
              </div>
            </div>
          </li>
          <li class="column is-half">
            <div class="field">
              <label class="label">Hình ảnh *</label>
              <div class="control">
                <InputFile OnChange="Upload" accept="image/*" class="input is_bg" />
              </div>
            </div>
          </li>
          <li class="column is-one-third">
            <div class="field">
              <label class="label">Số bài học *</label>
              <div class="control">
                <input @bind="current.lesson" type="number" class="input is_bg" min="0" />
              </div>
            </div>
          </li>
          <li class="column is-one-third">
            <div class="field">
              <label class="label">Thời lượng *</label>
              <div class="control">
                <input @bind="current.time" type="text" class="input is_bg" placeholder="VD: 5h 30ph..." />
              </div>
            </div>
          </li>
          <li class="column is-one-third">
            <div class="field">
              <label class="label">Thuộc tính</label>
              <div class="control pt-2">
                <label class="checkbox">
                  <input type="checkbox" @bind="current.show" />
                  <span>Hiển thị khóa học</span>
                </label>
              </div>
            </div>
          </li>
          <li class="column is-one-third">
            <div class="field">
              <label class="label">Danh mục</label>
              <div class="control">
                <div class="select is-fullwidth is_bg">
                  <select @onchange="ChangeCategory">
                    <option value="">Chọn danh mục</option>
                    @foreach (var sl in categoryList)
                    {
                      <option value="@sl.id">@sl.name</option>
                    }
                  </select>
                </div>
              </div>
            </div>
          </li>
          <li class="column is-two-thirds">
            <div class="field is-grouped is-grouped-multiline pt-5 mt-1">
              @foreach (var id in current.category)
              {
                var item = categoryList.SingleOrDefault(x => x.id == id);
                <div class="control">
                  <div class="field has-addons">
                    <div class="control is-expanded">
                      <span class="input">@(item != null ? item.name : id)</span>
                    </div>
                    <div class="control">
                      <a class="button has-text-danger" @onclick="() => current.category.Remove(id)">
                        <span class="icon">
                          <i class="material-icons is-size-6">close</i>
                        </span>
                      </a>
                    </div>
                  </div>
                </div>
              }
            </div>
          </li>
        </ul>
      </li>
      <li class="column is-one-third">
        <div class="card has_image">
          <div class="card-image">
            <div class="image is-5by3 has-background-grey-lighter">
              <img src="@current.image" />
            </div>
          </div>
          <div class="card-content p-4">
            <div class="is-size-6 has-text-link has-text-weight-bold text_1_line">
              @current.name
            </div>
            <div class="mt-3 font_13">
              <span class="has-text-grey">Giảng viên:</span>
              <strong class="has-text-link">
                @(teacher != null ? teacher.FullName : "")
              </strong>
            </div>
          </div>
        </div>
      </li>
      <li class="column is-full">
        <div class="field">
          <label class="label">Mô tả khóa học</label>
          <div class="control">
            <BlazoredTextEditor @ref="@editor" Placeholder="Nhập mô tả khóa học...">
              <ToolbarContent>
                <select class="ql-header">
                  <option selected=""></option>
                  <option value="1"></option>
                  <option value="2"></option>
                  <option value="3"></option>
                  <option value="4"></option>
                  <option value="5"></option>
                </select>
                <span class="ql-formats">
                  <button class="ql-bold"></button>
                  <button class="ql-italic"></button>
                  <button class="ql-underline"></button>
                  <button class="ql-strike"></button>
                </span>
                <span class="ql-formats">
                  <select class="ql-color"></select>
                  <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                  <button class="ql-list" value="ordered"></button>
                  <button class="ql-list" value="bullet"></button>
                </span>
                <span class="ql-formats">
                  <button class="ql-link"></button>
                </span>
                <span class="ql-formats">
                  <button onclick="document.getElementById('file').click()">
                    <i class="material-icons-outlined">image</i>
                  </button>
                </span>
              </ToolbarContent>
              <EditorContent>
                @((MarkupString)content)
              </EditorContent>
            </BlazoredTextEditor>
            <InputFile OnChange="UploadEditor" accept="image/*" class="is-hidden" id="file" />
          </div>
        </div>
      </li>
      <li class="column is-full">
        <div class="field is-grouped is-grouped-right">
          @if (!string.IsNullOrEmpty(current.id))
          {
            <div class="control">
              <a class="button is-danger" @onclick="Delete">
                <span class="icon">
                  <i class="material-icons-outlined is-size-6">delete</i>
                </span>
                <span>Xóa</span>
              </a>
            </div>
          }
          <div class="control">
            <a class="button is-link" @onclick="Update">
              <span class="icon">
                <i class="material-icons-outlined is-size-6">done</i>
              </span>
              <span>Cập nhật</span>
            </a>
          </div>
        </div>
      </li>
    </ul>
  </div>
</section>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }

  [Parameter]
  public string Id { get; set; }

  private bool _loaded = false;
  private bool _success = false;
  private string _message = string.Empty;
  private string _title = "Thông tin khóa học";

  private EducateCourseModel current = new() { category = new() };
  private UserModel teacher = null;
  private BlazoredTextEditor editor;
  private string content = string.Empty;
  private List<EducateCategoryModel> categoryList = new();
  private string teacherOld = string.Empty;

  protected override async Task OnInitializedAsync()
  {
    categoryList.AddRange(DbEducateCategory.GetList(Layout.Company.id, null));
    if (!string.IsNullOrEmpty(Id))
    {
      current = await DbEducateCourse.Get(Layout.Company.id, Id);
    }
    else
    {
      current = new() { category = new(), teacher = Layout.User.id };
    }

    if (current == null)
      current = new() { category = new(), teacher = Layout.User.id };
    teacher = Layout.UserList.SingleOrDefault(x => x.id == current.teacher);
    teacherOld = current.teacher;
    content = current.content;

    if (current.creator != Layout.User.id && current.teacher != Layout.User.id && Layout.User.role == 3)
      navigation.NavigateTo("/educate/course/manager/info/" + current.id, false);

    _loaded = true;
  }

  protected override void OnAfterRender(bool firstRender)
  {
    _message = string.Empty;
  }

  private List<UserModel> userSuggests = new();
  private string teacherSearch = string.Empty;
  private string UserSearch
  {
    get => teacherSearch;
    set
    {
      teacher = null;
      teacherSearch = value;
      userSuggests.Clear();
      if (!string.IsNullOrEmpty(value))
      {
        foreach (var item in Layout.UserList)
        {
          if (Handled.Shared.SearchKeyword(teacherSearch, item.FullName))
            userSuggests.Add(item);
        }
      }
    }
  }

  private void UserSelected(UserModel item)
  {
    teacher = item;
    teacherSearch = item.FullName;
    userSuggests.Clear();
  }

  private void ChangeCategory(ChangeEventArgs e)
  {
    var id = e.Value.ToString();
    if (!string.IsNullOrEmpty(id) && !current.category.Contains(id))
      current.category.Add(id);
  }

  private async Task Upload(InputFileChangeEventArgs e)
  {
    _success = false;
    foreach (var file in e.GetMultipleFiles())
    {
      _message = "Đang upload file lên...";
      try
      {
        if (file.Size <= Layout.MaxFileSize)
        {
          var fileContent = new StreamContent(file.OpenReadStream(Layout.MaxFileSize));
          current.image = await Files.SaveFileAsync(fileContent, file.Name);
          _message = string.Empty;
        }
        else
        {
          _message = $"Chỉ cho phép file tối đa {string.Format("{0:0,0}", Layout.MaxFileSize / 1024000)} MB";
        }
      }
      catch (Exception ex)
      {
        _message = $"ERROR: {ex.Message}";
      }
    }
  }

  private async Task UploadEditor(InputFileChangeEventArgs e)
  {
    _success = false;
    foreach (var file in e.GetMultipleFiles())
    {
      _message = "Đang upload file lên...";
      try
      {
        if (file.Size <= Layout.MaxFileSize)
        {
          var fileContent = new StreamContent(file.OpenReadStream(Layout.MaxFileSize));
          var image = await Files.SaveFileAsync(fileContent, file.Name);
          await editor.InsertImage(image);
          _message = string.Empty;
        }
        else
        {
          _message = $"Chỉ cho phép file tối đa {string.Format("{0:0,0}", Layout.MaxFileSize / 1024000)} MB";
        }
      }
      catch (Exception ex)
      {
        _message = $"ERROR: {ex.Message}";
      }
    }
  }

  private async Task Delete()
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc muốn xóa khóa học này ?"))
      return;

    await DbEducateCourse.Delete(Layout.Company.id, current.id);
    navigation.NavigateTo("/educate/course/manager", false);
  }

  private async Task Update()
  {
    _success = false;
    _message = string.Empty;

    if (string.IsNullOrEmpty(current.name) || string.IsNullOrEmpty(current.image))
    {
      _message = "Nhập tiêu đề và hình ảnh khóa học !";
      await Task.Delay(5000);
      _message = string.Empty;
    }
    else if (current.lesson == 0 || string.IsNullOrEmpty(current.image))
    {
      _message = "Nhập số bài học và thời lượng khóa học !";
      await Task.Delay(5000);
      _message = string.Empty;
    }
    else if (teacher == null)
    {
      _message = "Chọn giảng viên của khóa học !";
      await Task.Delay(5000);
      _message = string.Empty;
    }
    else
    {
      current.teacher = teacher.id;
      current.content = await editor.GetHTML();

      if (string.IsNullOrEmpty(current.id))
      {
        current.creator = Layout.User.id;
        await DbEducateCourse.Create(Layout.Company.id, current);
      }
      else
      {
        await DbEducateCourse.Update(Layout.Company.id, current);

        // Đổi giảng viên
        if(current.teacher != teacherOld)
        {
          await EducateService.ChangeTeacher(Layout.Company.id, current.id);
          await DbNotify.Create(Layout.Company.id, 602, current.id, current.teacher, Layout.User.id);
        }
      }
      navigation.NavigateTo("/educate/course/manager", false);
      _message = "Đã cập nhật thông tin khóa học";
      _success = true;
      StateHasChanged();
    }
  }
}