@page "/educate/course/list/learn/{LessonId}"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

@if (!string.IsNullOrEmpty(_message))
{
  <div id="notify">
    <div class="notification is-@(_success ? "success" : "danger")">
      <button class="delete" @onclick="() => _message = string.Empty"></button>
      <p>@((MarkupString)_message)</p>
    </div>
  </div>
}

<section class="p-4 @(_loaded ? "" : "is-loading")">
  @if (learned != null)
  {
    <ul class="columns is-multiline">
      <li class="column is-full">
        <div class="field is-grouped is-grouped-multiline has-text-weight-semibold has-text-link">
          <div class="control mr-1">
            <div class="icon-text">
              <a href="/educate/course/list">@(category != null ? category.name : "Khóa học")</a>
              <span class="icon">
                <i class="material-icons-outlined is-size-6">chevron_right</i>
              </span>
            </div>
          </div>
          <div class="control">
            <a href="/educate/course/list/detail/@course.id">
              @course.name
            </a>
          </div>
        </div>
        <h1 class="is-size-3 has-text-weight-bold has-text-link">
          @lesson.name
        </h1>
      </li>
      <li class="column is-two-thirds">
        @if (lesson.type == 1)
        {
          if (!string.IsNullOrEmpty(lesson.video))
          {
            <div class="card is_radius">
              <iframe class="lesson_video" src="@lesson.video" allowfullscreen></iframe>
            </div>
          }
          if (!string.IsNullOrEmpty(lesson.content))
          {
            <div class="card p-5">
              <h2 class="is-size-5 has-text-weight-bold has-text-info mb-4">
                NỘI DUNG BÀI HỌC
              </h2>
              <div class="content">
                @((MarkupString)lesson.content)
              </div>
            </div>
          }
        }
        else if (lesson.type == 2)
        {
          <div class="card p-5">
            <h2 class="is-size-5 has-text-weight-bold has-text-info mb-4">
              BÀI TỰ LUẬN
            </h2>
            <h3 class="is-size-6 has-text-weight-bold has-text-info mb-3">
              @lesson.name
            </h3>
            <div class="mb-4">
              Mức điểm đạt: @lesson.point điểm
            </div>
            <hr />
            <ul class="lesson_question">
              @for (int i = 0; i < questions.Count; i++)
              {
                var item = questions[i];
                <li class="question_item">
                  <div class="has-text-info mb-2">
                    <span class="has-text-weight-semibold">@string.Format("Câu {0}", i + 1)</span>
                    <span>(@(examLesson != null && examLesson.check ? item.point_exam + "/" : "")@item.point_max điểm)</span>
                  </div>
                  <div class="has-text-weight-semibold has-text-info mb-3 has_link">
                    @((MarkupString)Shared.GetLinks(item.content))
                  </div>
                  @if (examLesson != null && examLesson.check)
                  {
                    <div class="mb-2">
                      <span class="has-text-info has-text-weight-semibold mr-2">Trả lời:</span>
                      @if (!string.IsNullOrEmpty(item.answer))
                      {
                        <span>@((MarkupString)item.answer.Replace("\n", "<br />"))</span>
                      }
                      else
                      {
                        <i>Không có câu trả lời</i>
                      }
                    </div>
                    @if (!string.IsNullOrEmpty(item.comment))
                    {
                      <div>
                        <span class="has-text-grey">Giảng viên nhận xét:</span>
                        <span>@item.comment</span>
                      </div>
                    }
                  }
                  else
                  {
                    <textarea @bind="item.answer" class="textarea is_bg font_14" rows="3" placeholder="Nhập câu trả lời" />
                  }
                  <hr class="has-background-grey-lighter" />
                </li>
              }
            </ul>
            <div class="field is-grouped">
              @if (examLesson != null)
              {
                if (examLesson.check)
                {
                  <div class="control is-expanded">
                    <div class="icon-text has-text-weight-bold">
                      <span>Kết quả bài thi: @examLesson.point_exam/@examLesson.point_max</span>
                      <span class="icon">
                        <i class="material-icons-outlined is-size-6">east</i>
                      </span>
                      <span class="has-text-@(examLesson.point_exam >= examLesson.point_pass ? "success" : "danger")">
                        @(examLesson.point_exam >= examLesson.point_pass ? "THI ĐẠT" : "KHÔNG ĐẠT")
                      </span>
                    </div>
                    @if (!string.IsNullOrEmpty(examLesson.comment))
                    {
                      <div>
                        <span class="has-text-grey">Giảng viên nhận xét bài thi:</span>
                        <span>@examLesson.comment</span>
                      </div>
                    }
                  </div>
                  @if(examLesson.point_exam < examLesson.point_pass)
                  {
                    <div class="control">
                      <a class="button is-link is-outlined" @onclick="() => Retest(examLesson)">Thi lại</a>
                    </div>
                  }
                }
                else
                {
                  <div class="control has-text-weight-bold">
                    Bạn đã nộp bài thi, đang chờ giảng viên chấm bài !
                  </div>
                }
              }
              else
              {
                <div class="control">
                  <a class="button is-link" @onclick="SendEssay">
                    <span class="icon">
                      <i class="material-icons-outlined is-size-6">done</i>
                    </span>
                    <span>Nộp bài tự luận</span>
                  </a>
                </div>
              }
            </div>
          </div>
        }
        else if (lesson.type == 3)
        {
          <div class="card p-5">
            <h2 class="is-size-5 has-text-weight-bold has-text-info mb-4">
              BÀI TRẮC NGHIỆP
            </h2>
            <h3 class="is-size-6 has-text-weight-bold has-text-info mb-3">
              @lesson.name
            </h3>
            <div class="mb-4">
              Mức điểm đạt: @lesson.point điểm
            </div>
            <hr />
            <ul class="lesson_question">
              @for (int i = 0; i < questions.Count; i++)
              {
                var item = questions[i];
                var question = lesson.questions.SingleOrDefault(x => x.id == item.id);
                @if (question != null)
                {
                  <li class="question_item">
                    <div class="has-text-info mb-2">
                      <span class="has-text-weight-semibold">@string.Format("Câu {0}", i + 1)</span>
                      <span>@string.Format("({0} điểm)", item.point_max)</span>
                    </div>
                    <div class="has-text-weight-semibold has-text-info mb-3 has_link">
                      @((MarkupString)Shared.GetLinks(item.content))
                    </div>
                    <div class="columns is-multiline is-variable is-1">
                      @foreach (var answer in question.answers)
                      {
                        <p class="column is-half">
                          <label class="radio">
                            @if (item.answer == answer.id)
                            {
                              <input type="radio" name="@item.id" @onclick="() => item.answer = answer.id" checked>
                            }
                            else
                            {
                              <input type="radio" name="@item.id" @onclick="() => item.answer = answer.id">
                            }
                            <span class="ml-1">@answer.content</span>
                          </label>
                        </p>
                      }
                    </div>
                    <hr class="has-background-grey-lighter" />
                  </li>
                }
              }
            </ul>
            <div class="field is-grouped">
              @if (examLesson != null)
              {
                <div class="control is-expanded">
                  <div class="icon-text has-text-weight-bold">
                    <span>Kết quả bài thi: @examLesson.point_exam/@examLesson.point_max</span>
                    <span class="icon">
                      <i class="material-icons-outlined is-size-6">east</i>
                    </span>
                    <span class="has-text-@(examLesson.point_exam >= examLesson.point_pass ? "success" : "danger")">
                      @(examLesson.point_exam >= examLesson.point_pass ? "THI ĐẠT" : "KHÔNG ĐẠT")
                    </span>
                  </div>
                </div>
                @if(examLesson.point_exam < examLesson.point_pass)
                {
                  <div class="control">
                    <a class="button is-link is-outlined" @onclick="() => Retest(examLesson)">Thi lại</a>
                  </div>
                }
              }
              else
              {
                <div class="control">
                  <a class="button is-link" @onclick="SendQuiz">
                    <span class="icon">
                      <i class="material-icons-outlined is-size-6">done</i>
                    </span>
                    <span>Nộp bài trắc ngiệm</span>
                  </a>
                </div>
              }
            </div>
          </div>
        }
      </li>
      <li class="column is-one-third">
        <div class="card p-5">
          <ul class="course_lesson">
            @for (int i = 0; i < lessons.Count; i++)
            {
              var item = lessons[i];
              var type = DbEducateLesson.Type(item.type);
              var link = "/educate/course/list/learn/" + item.id;
              var learn = learned.lessons.SingleOrDefault(x => x.id == item.id);
              if (learn == null)
                continue;

              <li class="lesson_item pb-3">
                <div class="field is-grouped" style="align-items: flex-start;">
                  <div class="control">
                    <a class="icon @(learn.done ? "has-text-success" : "")" @onclick="() => CheckItem(item)">
                      <i class="material-icons-outlined is-size-6">
                        @(learn.done ? "check_box" : "check_box_outline_blank")
                      </i>
                    </a>
                  </div>
                  <div class="control is-expanded">
                    <a class="has-text-weight-bold font_14 @(learn.done ? "has-text-success" : "has-text-info")"
                      @onclick="() => navigation.NavigateTo(link, item.type != 1)">
                      @string.Format("{0}. {1}", i + 1, item.name)
                    </a>
                  </div>
                  <div class="control">
                    <a class="icon has-text-info" @onclick="() => ToogleItem(item.id)">
                      <i class="material-icons-outlined is-size-5">
                        @(showList.Contains(item.id) ? "arrow_drop_down" : "arrow_right")
                      </i>
                    </a>
                  </div>
                </div>
                @if (showList.Contains(item.id))
                {
                  <div class="is-size-7 pl-5 ml-3">
                    <div class="text_3_line">
                      @Shared.HtmlToText(item.content)
                    </div>
                    @if(learn.done && item.type != 1)
                    {
                      // Bài đã thi
                      examLesson = DbEducateExam.Get(Layout.Company.id, item.id, learned.id, Layout.User.id);
                      if (examLesson != null && examLesson.check)
                      {
                        <div class="icon-text">
                          <span>Kết quả bài thi: @examLesson.point_exam/@examLesson.point_max</span>
                          <span class="icon">
                            <i class="material-icons-outlined is-size-6">east</i>
                          </span>
                          <span class="has-text-@(examLesson.point_exam >= examLesson.point_pass ? "success" : "danger")">
                            @(examLesson.point_exam >= examLesson.point_pass ? "THI ĐẠT" : "KHÔNG ĐẠT")
                          </span>
                        </div>
                        if (!learn.pass)
                        {
                          <a class="button is-small is-link is-outlined" @onclick="() => Retest(examLesson)">Thi lại</a>
                        }
                      }
                      else if(examLesson != null && !examLesson.check)
                      {
                        <div class="has-text-danger is-italic">
                          Đang chờ giảng viên chấm bài !
                        </div>
                      }
                    }
                  </div>
                }
              </li>
            }
          </ul>
        </div>
      </li>
    </ul>
  }
  else
  {
    <div class="card p-5">
      <h1 class="title is-5 has-text-info is-uppercase">
        @_title
      </h1>
      <div class="py-6 has-text-grey">
        Dữ liệu không tồn tại hoặc đã bị xóa !
      </div>
    </div>
  }
</section>

@if(!CheckAccess())
{
  <div class="modal is-active">
    <div class="modal-background"></div>
    <div class="modal-content" style="max-width: 360px;">
      <div class="box has-text-centered pt-5">
        <span class="icon is-large has-text-danger">
          <i class="material-icons-outlined is-size-1">error_outline</i>
        </span>
        <div class="is-size-6 py-4 has-text-weight-semibold">
          @msgAccess
        </div>
      </div>
    </div>
  </div>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }

  [Parameter]
  public string LessonId { get; set; }

  private bool _loaded = false;
  private bool _success = false;
  private string _message = string.Empty;
  private string _title = "Khóa học";

  private EducateLearnedModel learned = null;
  private EducateCourseModel course = null;
  private EducateLessonModel lesson = null;
  private EducateCategoryModel category = null;
  private List<EducateLessonModel> lessons = new();
  private List<EducateExamModel.Question> questions = new();
  private List<string> showList = new();
  private EducateExamModel examLesson = null;

  protected override async Task OnParametersSetAsync()
  {
    lesson = await DbEducateLesson.Get(Layout.Company.id, LessonId);
    if (lesson != null)
    {
      course = await DbEducateCourse.Get(Layout.Company.id, lesson.course);
      if (course != null)
      {
        learned = await DbEducateLearned.Get(Layout.Company.id, course.id, Layout.User.id);
        if (learned != null)
        {
          var categoryId = course.category.Count > 0 ? course.category[0] : null;
          category = await DbEducateCategory.Get(Layout.Company.id, categoryId);
          lessons = await DbEducateLesson.GetList(Layout.Company.id, course.id);

          // Bài đã thi
          examLesson = DbEducateExam.Get(Layout.Company.id, lesson.id, learned.id, Layout.User.id);
          if (examLesson != null)
          {
            questions = examLesson.questions;
          }
          else if (lesson.questions != null)
          {
            // Danh sách câu hỏi
            questions.Clear();
            foreach (var question in lesson.questions.OrderBy(x => Guid.NewGuid()).ToList())
            {
              questions.Add(new()
              {
                id = question.id,
                content = question.content,
                point_max = question.point
              });
            }
          }
        }

        if (!showList.Contains(lesson.id))
          showList.Add(lesson.id);
      }
    }
    _loaded = true;
  }

  protected override void OnAfterRender(bool firstRender)
  {
    _message = string.Empty;
  }

  private string msgAccess = string.Empty;
  private bool CheckAccess()
  {
    return ProductService.CheckAccess(Layout.Company, Layout.User, "train", out msgAccess);
  }

  private void ToogleItem(string id)
  {
    if (showList.Contains(id))
      showList.Remove(id);
    else
      showList.Add(id);
  }

  private async Task CheckItem(EducateLessonModel item)
  {
    if (item.type == 1)
    {
      var learn = learned.lessons.SingleOrDefault(x => x.id == item.id);
      learn.date = learn.done ? DateTime.Now.Ticks : 0;
      learn.done = !learn.done;
      learn.pass = learn.done;
      learned = await DbEducateLearned.Update(Layout.Company.id, learned);
    }
    else
    {
      _message = "Đối với các bài thi bạn phải làm bài thi trước khi tick hoàn thành bài !";
      _success = false;
    }
  }

  private async Task SendEssay()
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc muốn nộp bài thi tự luận này ?"))
      return;

    var exam = new EducateExamModel();
    exam.course = course.id;
    exam.course_name = course.name;
    exam.lesson = lesson.id;
    exam.lesson_name = lesson.name;
    exam.learned = learned.id;
    exam.user = Layout.User.id;
    exam.teacher = course.teacher;
    exam.type = lesson.type;
    exam.point_exam = 0;
    exam.point_pass = lesson.point;
    exam.point_max = (from x in lesson.questions select x.point).Sum();
    exam.check = false;
    exam.questions = questions;
    examLesson = await DbEducateExam.Create(Layout.Company.id, exam);

    // Cập nhật kỳ học
    var learn = learned.lessons.SingleOrDefault(x => x.id == lesson.id);
    learn.done = true;
    learn.date = DateTime.Now.Ticks;
    learned = await DbEducateLearned.Update(Layout.Company.id, learned);

    _message = "Bạn đã nộp bài thi thành công, đang chờ giảng viên chấm bài !";
    _success = true;

    // Gửi thông báo chuông
    await DbNotify.Create(Layout.Company.id, 601, examLesson.id, examLesson.teacher, Layout.User.id);
  }

  private async Task SendQuiz()
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc muốn nộp bài thi trắc nghiệm ?"))
      return;

    // Chấp bài thi
    foreach (var item in questions)
    {
      var question = lesson.questions.SingleOrDefault(x => x.id == item.id);
      // Kiểm tra đáp án đúng ko ?
      var correct = question.answers.Where(x => x.correct && x.id == item.answer).Count() > 0;
      item.point_exam = correct ? question.point : 0;
    }

    var exam = new EducateExamModel();
    exam.course = course.id;
    exam.course_name = course.name;
    exam.lesson = lesson.id;
    exam.lesson_name = lesson.name;
    exam.learned = learned.id;
    exam.user = Layout.User.id;
    exam.teacher = course.teacher;
    exam.type = lesson.type;
    exam.point_exam = (from x in questions select x.point_exam).Sum();
    exam.point_pass = lesson.point;
    exam.point_max = (from x in lesson.questions select x.point).Sum();
    exam.check = true;
    exam.questions = questions;
    examLesson = await DbEducateExam.Create(Layout.Company.id, exam);

    // Cập nhật kỳ học
    var learn = learned.lessons.SingleOrDefault(x => x.id == lesson.id);
    learn.done = true;
    learn.pass = exam.point_exam >= exam.point_pass;
    learn.date = DateTime.Now.Ticks;
    learned = await DbEducateLearned.Update(Layout.Company.id, learned);

    _message = "Bạn đã nộp bài thi thành công, đang chờ giảng viên chấm bài !";
    _success = true;
  }

  private async Task Retest(EducateExamModel exam)
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", "Kết quả bài thi của bạn sẽ bị hủy, bạn có chắc muốn thi lại không ?"))
      return;

    // Xóa bài thi cũ
    await DbEducateExam.Delete(Layout.Company.id, exam.id);

    // Cập nhật kỳ học
    var learn = learned.lessons.SingleOrDefault(x => x.id == lesson.id);
    learn.done = false;
    learn.pass = false;
    learn.date = 0;
    learned = await DbEducateLearned.Update(Layout.Company.id, learned);

    navigation.NavigateTo(navigation.Uri, true);
  }
}