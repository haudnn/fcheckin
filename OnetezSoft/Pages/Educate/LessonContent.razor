@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

@if (!string.IsNullOrEmpty(_message))
{
  <div id="notify">
    <div class="notification is-@(_success ? "success" : "danger")">
      <button class="delete" @onclick="() => _message = string.Empty"></button>
      <p>@((MarkupString)_message)</p>
    </div>
  </div>
}

<ul class="columns is-multiline is-variable is-2">
  <li class="column is-half">
    <div class="field">
      <label class="label">Tiêu đề *</label>
      <div class="control">
        <input @bind="lesson.name" type="text" class="input has-text-weight-bold is_bg" placeholder="Nhập tiêu đề bài giảng..." />
      </div>
    </div>
  </li>
  <li class="column is-one-quarter">
    <div class="field">
      <label class="label">Khóa học</label>
      <div class="control">
        <div class="input is_bg">
          <span class="text_1_line">@(course != null ? course.name : "")</span>
        </div>
      </div>
    </div>
  </li>
  <li class="column is-one-quarter">
    <div class="field">
      <label class="label">Thời lượng: phút</label>
      <div class="control">
        <input @bind="lesson.time" type="number" class="input is_bg" min="0" />
      </div>
    </div>
  </li>
  <li class="column is-half">
    <div class="field">
      <label class="label">Link video</label>
      <div class="control">
        <input @bind="lesson.video" type="text" class="input is_bg" placeholder="Nhập link youtube của video..." />
      </div>
    </div>
  </li>
  <li class="column is-half">
    <div class="field">
      <label class="label">Tài liệu đính kèm</label>
      <div class="control">
        <input @bind="lesson.file" type="text" class="input is_bg" placeholder="Nhập link tài liệu..." />
      </div>
    </div>
  </li>
  <li class="column is-full">
    <div class="field">
      <label class="label">Nội dung bài giảng</label>
      <div class="control">
        <BlazoredTextEditor @ref="@editor" Placeholder="Nhập nội dung bài giảng...">
          <ToolbarContent>
            <select class="ql-header">
              <option selected=""></option>
              <option value="1"></option>
              <option value="2"></option>
              <option value="3"></option>
              <option value="4"></option>
              <option value="5"></option>
            </select>
            <span class="ql-formats">
              <button class="ql-bold"></button>
              <button class="ql-italic"></button>
              <button class="ql-underline"></button>
              <button class="ql-strike"></button>
            </span>
            <span class="ql-formats">
              <select class="ql-color"></select>
              <select class="ql-background"></select>
            </span>
            <span class="ql-formats">
              <button class="ql-list" value="ordered"></button>
              <button class="ql-list" value="bullet"></button>
            </span>
            <span class="ql-formats">
              <button class="ql-link"></button>
            </span>
            <span class="ql-formats">
              <button onclick="document.getElementById('file').click()">
                <i class="material-icons-outlined">image</i>
              </button>
            </span>
          </ToolbarContent>
          <EditorContent>
            @((MarkupString)content)
          </EditorContent>
        </BlazoredTextEditor>
        <InputFile OnChange="UploadEditor" accept="image/*" class="is-hidden" id="file" />
      </div>
    </div>
  </li>
  <li class="column is-full">
    <div class="field is-grouped is-grouped-right">
      <div class="control">
        <a class="button is-danger" @onclick="Delete">
          <span class="icon">
            <i class="material-icons-outlined is-size-6">delete</i>
          </span>
          <span>Xóa</span>
        </a>
      </div>
      <div class="control">
        <a class="button is-link" @onclick="Update">
          <span class="icon">
            <i class="material-icons-outlined is-size-6">done</i>
          </span>
          <span>Cập nhật</span>
        </a>
      </div>
    </div>
  </li>
</ul>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public EducateLessonModel lesson { get; set; }

  private bool _success = false;
  private string _message = string.Empty;

  private EducateCourseModel course = null;
  private BlazoredTextEditor editor;
  private string content = string.Empty;

  protected override async Task OnInitializedAsync()
  {
    course = await DbEducateCourse.Get(Layout.Company.id, lesson.course);
    content = lesson.content;
  }

  protected override void OnAfterRender(bool firstRender)
  {
    _message = string.Empty;
  }

  private async Task UploadEditor(InputFileChangeEventArgs e)
  {
    _success = false;
    foreach (var file in e.GetMultipleFiles())
    {
      _message = "Đang upload file lên...";
      try
      {
        if (file.Size <= Layout.MaxFileSize)
        {
          var fileContent = new StreamContent(file.OpenReadStream(Layout.MaxFileSize));
          var image = await Files.SaveFileAsync(fileContent, file.Name);
          await editor.InsertImage(image);
          _message = string.Empty;
        }
        else
        {
          _message = $"Chỉ cho phép file tối đa {string.Format("{0:0,0}", Layout.MaxFileSize / 1024000)} MB";
        }
      }
      catch (Exception ex)
      {
        _message = $"ERROR: {ex.Message}";
      }
    }
  }

  private async Task Delete()
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc muốn xóa khóa học này ?"))
      return;

    await DbEducateLesson.Delete(Layout.Company.id, lesson.id);
    navigation.NavigateTo("/educate/course/manager/info/" + lesson.course, false);
  }

  private async Task Update()
  {
    _success = false;
    _message = string.Empty;

    if (string.IsNullOrEmpty(lesson.name) || lesson.time == 0)
    {
      _message = "Nhập tiêu đề và thời lượng bải giảng !";
      await Task.Delay(5000);
      _message = string.Empty;
    }
    else
    {
      lesson.content = await editor.GetHTML();
      lesson.video = Shared.VideoLink(lesson.video);
      await DbEducateLesson.Update(Layout.Company.id, lesson);
      _message = "Đã cập nhật thông tin bài giảng";
      _success = true;
    }
  }
}