@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

@if (!string.IsNullOrEmpty(_message))
{
  <div id="notify">
    <div class="notification is-@(_success ? "success" : "danger")">
      <button class="delete" @onclick="() => _message = string.Empty"></button>
      <p>@((MarkupString)_message)</p>
    </div>
  </div>
}

<ul class="columns is-multiline is-variable is-2">
  <li class="column">
    <div class="field">
      <label class="label">Tiêu đề *</label>
      <div class="control">
        <input @bind="lesson.name" type="text" class="input has-text-weight-bold is_bg" placeholder="Nhập tiêu đề bài trắc nghiệm..." />
      </div>
    </div>
  </li>
  <li class="column is-one-quarter">
    <div class="field">
      <label class="label">Khóa học</label>
      <div class="control">
        <div class="input is_bg">
          <span class="text_1_line">@(course != null ? course.name : "")</span>
        </div>
      </div>
    </div>
  </li>
  <li class="column is-one-fifth">
    <div class="field">
      <label class="label">Thời gian làm bài: phút</label>
      <div class="control">
        <input @bind="lesson.time" type="number" class="input is_bg" min="0" />
      </div>
    </div>
  </li>
  <li class="column is-full">
    <ul class="columns is-multiline is-variable is-2">
      @for (int i = 0; i < lesson.questions.Count; i++)
      {
        var item = lesson.questions[i];
        <li class="column is-four-fifths">
          <div class="field">
            <label class="label">Câu hỏi @(i+1)</label>
            <div class="control">
              <textarea @bind="item.content" id="@item.id" class="textarea is_bg" rows="2" placeholder="Nhập nôi dung câu hỏi..." />
            </div>
          </div>
        </li>
        <li class="column is-one-fifth">
          <div class="field">
            <label class="label">Điểm</label>
            <div class="field is-grouped">
              <div class="control is-expanded">
                <input @bind="@item.point" class="input is_bg" type="number" min="1" />
              </div>
              <div class="control">
                <a class="button is-white" @onclick="() => DeleteItem(item)">
                  <span class="icon has-text-danger">
                    <i class="material-icons-outlined is-size-5">close</i>
                  </span>
                </a>
              </div>
            </div>
          </div>
        </li>
        <li class="column is-full pl-6">
          <div class="has-text-weight-medium has-text-info pb-2">Danh sách đáp án</div>
          <ul class="columns is-multiline is-vcentered is-variable is-2">
            @for (int a = 0; a < item.answers.Count; a++)
            {
              var answer = item.answers[a];
              <li class="column is-10">
                <div class="field is-grouped">
                  <div class="control">
                    @(a + 1)
                  </div>
                  <div class="control is-expanded">
                    <input @bind="@answer.content" id="@answer.id" class="input is_bg" type="text" placeholder="Nhập nội dung đáp án..." />
                  </div>
                </div>
              </li>
              <li class="column is-2">
                <div class="field is-grouped">
                  <div class="control is-expanded mr-0">
                    <label class="checkbox">
                      <input @bind="answer.correct" type="checkbox" />
                      <span>Câu đúng</span>
                    </label>
                  </div>
                  <div class="control mr-0">
                    <a class="button is-white has-text-grey" @onclick="() => DeleteAnswer(item, answer)">
                      <span class="icon">
                        <i class="material-icons-outlined is-size-5">close</i>
                      </span>
                    </a>
                  </div>
                  <div class="control" style="width: 35px;">
                    @if (a + 1 == item.answers.Count)
                    {
                      <a class="button is-white has-text-link" @onclick="() => AddAnswer(item)">
                        <span class="icon">
                          <i class="material-icons-outlined is-size-5">add</i>
                        </span>
                      </a>
                    }
                  </div>
                </div>
              </li>
            }
          </ul>
        </li>
      }
    </ul>
  </li>
  <li class="column is-full">
    <div class="field is-grouped is-grouped-multiline pt-3">
      <div class="control is-expanded">
        <a class="button is-white has-text-link" @onclick="() => AddItem()">
          <span class="icon">
            <span class="material-icons-outlined is-size-5">add</span>
          </span>
          <span>Thêm câu hỏi</span>
        </a>
      </div>
      <div class="control">
        <div class="field has-addons">
          <div class="control">
            <label class="button is-static">Mức điểm đạt</label>
          </div>
          <div class="control is-expanded" style="width: 60px;">
            <input @bind="lesson.point" class="input" type="number" min="1" />
          </div>
        </div>
      </div>
      <div class="control">
        <div class="field has-addons">
          <div class="control">
            <label class="button is-static">Tổng điểm</label>
          </div>
          <div class="control is-expanded" style="width: 60px;">
            <div class="input">
              @(lesson.questions.Select(x => x.point).Sum())
            </div>
          </div>
        </div>
      </div>
      <div class="control">
        <a class="button is-danger" @onclick="Delete">
          <span class="icon">
            <i class="material-icons-outlined is-size-5">delete</i>
          </span>
          <span>Xóa</span>
        </a>
      </div>
      <div class="control">
        <a class="button is-link" @onclick="Update">
          <span class="icon">
            <i class="material-icons-outlined is-size-6">done</i>
          </span>
          <span>Cập nhật</span>
        </a>
      </div>
    </div>
  </li>
</ul>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public EducateLessonModel lesson { get; set; }

  private bool _success = false;
  private string _message = string.Empty;

  private EducateCourseModel course = null;

  protected override async Task OnInitializedAsync()
  {
    course = await DbEducateCourse.Get(Layout.Company.id, lesson.course);
  }

  protected override void OnAfterRender(bool firstRender)
  {
    _message = string.Empty;
  }

  private async Task AddItem()
  {
    var id = Mongo.RandomId();
    var item = new EducateLessonModel.Question()
    {
      id = id,
      point = 1,
      answers = new()
      {
        new() { id = Mongo.RandomId() }
      }
    };
    lesson.questions.Add(item);
    await JSRuntime.InvokeVoidAsync("setFocus", id);
  }

  private async Task DeleteItem(EducateLessonModel.Question item)
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa câu hỏi: {item.content}?"))
      return;

    lesson.questions.Remove(item);
  }

  private async Task AddAnswer(EducateLessonModel.Question item)
  {
    var id = Mongo.RandomId();
    item.answers.Add(new() { id = id });
    await JSRuntime.InvokeVoidAsync("setFocus", id);
  }

  private async Task DeleteAnswer(EducateLessonModel.Question item, EducateLessonModel.Question.Answer answer)
  {

    if (item.answers.Count > 1)
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa đáp án: {answer.content}?"))
        return;
      item.answers.Remove(answer);
    }
    else
    {
      _success = false;
      _message = "Bạn không thể xóa hết đáp án của câu hỏi !";
      await Task.Delay(5000);
      _message = string.Empty;
    }
  }

  private async Task Delete()
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc muốn xóa khóa học này ?"))
      return;

    await DbEducateLesson.Delete(Layout.Company.id, lesson.id);
    navigation.NavigateTo("/educate/course/manager/info/" + lesson.course, false);
  }

  private bool CheckItem()
  {
    if(lesson.questions.Count == 0)
    {
      _message = "Bạn chưa nhập câu hỏi cho bài trắc nghiệm !";
      return false;   
    }
    foreach (var item in lesson.questions)
    {
      if (string.IsNullOrEmpty(item.content))
      {
        _message = "Có câu hỏi chưa nhập nội dung, vui lòng nhập nội dung cho câu hỏi";
        return false;
      }
      else if (item.answers.Count == 0)
      {
        _message = "Có câu hỏi chưa có đáp án, vui lòng nhập đáp án cho câu hỏi !";
        return false;
      }
      else if (item.answers.Where(x => string.IsNullOrEmpty(x.content)).Count() > 0)
      {
        _message = "Có đáp án chưa có nội dung, vui lòng nhập nội dung cho đáp án !";
        return false;
      }
      else if (item.answers.Where(x => x.correct).Count() == 0)
      {
        _message = "Có câu hỏi chưa có đáp án đúng, vui lòng chọn 1 đáp án đúng cho câu hỏi !";
        return false;
      }
    }
    return true;
  }

  private async Task Update()
  {
    _success = false;
    _message = string.Empty;

    if (string.IsNullOrEmpty(lesson.name) || lesson.time == 0)
    {
      _message = "Nhập tiêu đề và thời lượng bài trắc nghiệm !";
      await Task.Delay(5000);
      _message = string.Empty;
    }
    else if (lesson.point <= 0)
    {
      _message = "Giá trị mức điểm đạt phải lớn hơn hoặc bằng 1 !";
      await Task.Delay(10000);
      _message = string.Empty;
    }
    else if (lesson.point > lesson.questions.Select(x => x.point).Sum())
    {
      _message = "Mức điểm đạt được của bài thi phải nhỏ hơn tổng điểm bài thi !";
      await Task.Delay(10000);
      _message = string.Empty;
    }
    else if (CheckItem() == false)
    {
      await Task.Delay(10000);
      _message = string.Empty;
    }
    else
    {
      lesson.content = $"Bài thi trắc nghiệm này có {lesson.questions.Count} câu hỏi.";
      await DbEducateLesson.Update(Layout.Company.id, lesson);
      _message = "Đã cập nhật thông tin bài tự luận !";
      _success = true;
    }
  }
}