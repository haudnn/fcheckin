@page "/user/info"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

<section class="columns is-centered p-4">
  <div class="column is-small">
    <div class="card p-5">
      <h1 class="title is-5 has-text-info is-uppercase">
        Thông tin tài khoản
      </h1>
      @if (user != null)
      {
        <form @onsubmit="Update">
          <div class="field">
            <label class="label">Địa chỉ email</label>
            <div class="control">
              <input value="@user.email" type="email" class="input" readonly />
            </div>
          </div>
          <div class="field">
            <label class="label">Nhập mật khẩu cũ</label>
            <div class="control">
              <input @bind="passwordOld" type="text" class="input" placeholder="Nhập mật khẩu cũ nếu cần thay đổi" />
            </div>
          </div>
          <div class="field">
            <label class="label">Nhập mật khẩu mới</label>
            <div class="control">
              <input @bind="passwordNew" type="text" class="input" placeholder="Nhập mật khẩu mới nếu cần thay đổi" />
            </div>
          </div>
          <div class="field">
            <label class="label">Họ và tên</label>
            <div class="field is-grouped">
              <div class="control is-expanded">
                <input @bind="user.last_name" type="text" class="input" />
              </div>
              <div class="control is-expanded">
                <input @bind="user.first_name" type="text" class="input" />
              </div>
            </div>
          </div>
          <div class="field">
            <label class="label">Hình đại diện</label>
            <div class="field has-addons">
              <div class="control">
                <a class="image is-square">
                  <img src="@user.avatar" />
                </a>
              </div>
              <div class="control is-expanded @(uploading ? "is-loading" : "")">
                <InputFile OnChange="Upload" accept="image/*" class="input" />
              </div>
            </div>
          </div>
          <div class="field mt-4">
            <label class="label">Phòng ban mặc định</label>
            <div class="control">
              <div class="select is-fullwidth">
                <select @bind="user.department_default" class="is-family-code">
                  <option value="">Không chọn</option>
                  @foreach (var sl in departments)
                  {
                    <option value="@sl.id">@sl.name</option>
                  }
                </select>
              </div>
            </div>
          </div>
          <div class="field mt-4">
            <label class="label">Trang mặc định khi vào phần mềm</label>
            <div class="control">
              <div class="select is-fullwidth">
                <select @bind="user.page_default">
                  <option value="">Không chọn</option>
                  @foreach (var sl in pageList)
                  {
                    <option value="@sl.Key">@sl.Value</option>
                  }
                </select>
              </div>
            </div>
          </div>
          <div class="field mt-5">
            <div class="buttons is-right">
              <a class="button" onclick="goBack()">
                <span>Quay lại</span>
              </a>
              <a class="button is-link" @onclick="Update">
                <span class="icon">
                  <i class="material-icons-outlined is-size-6">done</i>
                </span>
                <span>Cập nhật</span>
              </a>
            </div>
          </div>
        </form>
      }
      else
      {
        <div class="py-6">Dữ liệu không tồn tại hoặc đã bị xóa !</div>
      }
    </div>
  </div>
</section>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }

  private string _title = "Thông tin tài khoản";

  private UserModel user = new() { companys = new() };
  private List<DepartmentModel.SelectList> departments = new();
  private Dictionary<string, string> pageList = new();
  private string passwordOld = string.Empty;
  private string passwordNew = string.Empty;

  protected override async Task OnInitializedAsync()
  {
    pageList = PageList();

    await OnLoad();
  }

  private async Task OnLoad()
  {
    user = await DbUser.Get(Layout.Company.id, Layout.User.id);
    if (user != null)
    {
      departments = DbDepartment.GetSelectListOfUser(Layout.Company.id, user.departments_id, null);
    }
  }

  private bool uploading = false;
  private async Task Upload(InputFileChangeEventArgs e)
  {
    uploading = true;
    foreach (var file in e.GetMultipleFiles())
    {
      try
      {
        if (file.Size <= Layout.MaxFileSize)
        {
          var fileContent = new StreamContent(file.OpenReadStream(Layout.MaxFileSize));
          user.avatar = await Files.SaveFileAsync(fileContent, file.Name);
        }
        else
          await JSRuntime.InvokeVoidAsync("tagline", false, $"Chỉ cho phép file tối đa {string.Format("{0:0,0}", Layout.MaxFileSize / 1024000)} MB");
      }
      catch (Exception ex)
      {
        await JSRuntime.InvokeVoidAsync("tagline", false, $"Không thể tải ảnh lên: {ex.Message}");
      }
    }
    uploading = false;
  }


  private async Task Update()
  {
    if (string.IsNullOrEmpty(user.id))
    {
      await JSRuntime.InvokeVoidAsync("tagline", false, "Dữ liệu không tồn tại hoặc đã bị xóa !");
    }
    else
    {
      // Cật nhật database công ty
      await DbUser.Update(Layout.Company.id, user);

      if (!string.IsNullOrEmpty(passwordNew))
      {
        if (user.password == Handled.Shared.CreateMD5(passwordOld))
        {
          // Cập nhật cho tất cả database
          user.password = Handled.Shared.CreateMD5(passwordNew);
          await DbMainUser.Update(user);
          await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cập nhật thông tin thành công!");
        }
        else
          await JSRuntime.InvokeVoidAsync("tagline", false, "Mật khẩu cũ không chính xác!");
      }
      else
      {
        // Cập nhật cho tất cả database
        await DbMainUser.Update(user);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cập nhật thông tin thành công!");
      }
    }
  }


  private Dictionary<string, string> PageList()
  {
    var results = new Dictionary<string, string>();
    results.Add("/blogs", "Tin tức");
    results.Add("/reports", "Thống kê");
    results.Add("/teams", "Đội nhóm");
    if (CheckAccess("todolist"))
      results.Add("/todolist", "Todolist");
    if (CheckAccess("work"))
      results.Add("/work", "Kế hoạch");
    if (CheckAccess("okrs"))
      results.Add("/okr/overview", "OKRs");
    if (CheckAccess("okrs"))
      results.Add("/cfr", "Ghi nhận");
    if (CheckAccess("kaizen"))
      results.Add("/kaizen", "Kaizen");
    if (CheckAccess("train"))
      results.Add("/educate", "Đào tạo");
    if (CheckAccess("timekeeping"))
      results.Add("/hrm/timekeeping", "Chấm công");
    return results;
  }
  
  private bool CheckAccess(string productId)
  {
    return ProductService.CheckAccess(Layout.Company, Layout.User, productId, out string message);
  }
}