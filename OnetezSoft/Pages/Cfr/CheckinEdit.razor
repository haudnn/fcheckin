@page "/cfr/checkin/{OkrId}/add"
@page "/cfr/checkin/{OkrId}/{CheckinId}"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

@if (!string.IsNullOrEmpty(_message))
{
  <div id="notify">
    <div class="notification is-@(_success ? "success" : "danger")">
      <button class="delete" @onclick="() => _message = string.Empty"></button>
      <p>@((MarkupString)_message)</p>
    </div>
  </div>
}

@if (okr != null && okr.user_create == Layout.User.id)
{
  <section class="columns is-gapless has_menu_left @(_loaded ? "" : "is-loading")">
    <div class="column is-narrow">
      <div class="card p-3 menu_left">
        <a class="button is-transparent has-text-link mb-5" onclick="goBack()">
          <span class="icon">
            <i class="material-icons-outlined">
              arrow_back
            </i>
          </span>
          <span>Trở về</span>
        </a>
        <a class="is-active" href="/cfr/checkin/@okr.id/info">
          Check-in<br />1:1
        </a>
        <a href="/cfr/checkin/@okr.id/feedback">
          Phản hồi
        </a>
        <a href="/cfr/checkin/@okr.id/overview">
          Tổng quan
        </a>
      </div>
    </div>
    <div class="column">
      <div class="card p-5">
        <ul class="columns is-vcentered is-variable is-2 mb-5">
          <li class="column">
            <h1 class="title is-5 has-text-info">
              CHECK-IN 1:1
            </h1>
          </li>
          @if (!current.checkin && current.draft && !string.IsNullOrEmpty(current.id))
          {
            <li class="column is-narrow">
              <a class="button is-danger" @onclick="Delete">
                <span class="icon"><i class="material-icons-outlined is-size-6">delete</i></span>
                <span>Xóa bản nháp</span>
              </a>
            </li>
          }
        </ul>
        <table class="table is-fullwidth is-vcentered is-noborder is-responsive">
          <thead>
            <tr>
              <th>Mục tiêu</th>
              <th width="200px"></th>
              <th width="200px" align="center">Tiến độ</th>
              <th width="100px" align="center">Thay đổi</th>
              <th width="100px" align="center">Tự tin</th>
            </tr>
          </thead>
          <tbody>
            @if (current != null)
            {
              var progress = DbOkrCheckin.GetProgress(current.key_results, okr.key_results);
              var okrColor = Shared.ProgressColor(progress);

              <tr>
                <td colspan="2">
                  <span class="has-text-weight-semibold has-text-link">
                    @okr.name
                  </span>
                </td>
                <td>
                  <label class="td-label">Tiến độ</label>
                  <div class="td-value">
                    <div class="progress_has_value">
                      <progress class="progress is-small @okrColor" value="@progress" max="100"></progress>
                      <span>@Shared.ConvertNumber(progress)%</span>
                    </div>
                  </div>
                </td>
                <td align="center">
                  <label class="td-label">Thay đổi</label>
                  <div class="td-value has-text-weight-semibold">
                    @Shared.ConvertNumber(progress - current.progress_prev)%
                  </div>
                </td>
                <td align="center">
                  <label class="td-label">Tự tin</label>
                  <div class="td-value">
                    <div class="select is-fullwidth">
                      <select @bind="current.confident">
                        @foreach (var sl in DbOkr.Confident())
                        {
                          <option value="@sl.id">@sl.name</option>
                        }
                      </select>
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td colspan="5">
                  <hr class="m-0" />
                </td>
              </tr>
              <tr>
                <td>Kết quả then chốt</td>
                <td></td>
                <td align="center">Đạt được</td>
                <td></td>
                <td align="center">Tự tin</td>
              </tr>
              @foreach (var checkin in current.key_results)
              {
                var kr = okr.key_results.SingleOrDefault(x => x.id == checkin.id);
                if (kr != null)
                {
                  checkin.change = checkin.result - kr.result;

                  <tr>
                    <td>
                      <span class="has-text-weight-semibold has-text-link">
                        @kr.name
                      </span>
                    </td>
                    <td class="pl-2">
                      <a class="icon-text has-text-link" @onclick="() => ShowTask(okr, kr)">
                        <span class="icon is-small">
                          <i class="material-icons-outlined">task</i>
                        </span>
                        <span>Hành động</span>
                      </a>
                      @if (!string.IsNullOrEmpty(kr.link))
                      {
                        <a class="icon-text ml-2 has-text-link" href="@kr.link" target="_blank">
                          <span class="icon is-small">
                            <i class="material-icons-outlined">attach_file</i>
                          </span>
                          <span>Kết quả</span>
                        </a>
                      }
                    </td>
                    <td colspan="2">
                      <label class="td-label">Đạt được</label>
                      <div class="td-value">
                        <div class="field is-grouped">
                          <div class="control" style="width: 90px">
                            <input @bind="checkin.result" type="text" class="input has-text-right" />
                          </div>
                          <div class="control is-expanded">
                            @Shared.ConvertNumber(kr.target) @kr.unit
                          </div>
                        </div>
                      </div>
                    </td>
                    <td align="center">
                      <label class="td-label">Tự tin</label>
                      <div class="td-value">
                        <div class="select is-fullwidth">
                          <select @bind="checkin.confident">
                            @foreach (var sl in DbOkr.Confident())
                            {
                              <option value="@sl.id">@sl.name</option>
                            }
                          </select>
                        </div>
                      </div>
                    </td>
                  </tr>
                  <tr>
                    <td colspan="5" class="pl-6 pb-4">
                      <ul class="columns is-multiline is-variable is-2">
                        @foreach (var qs in DbOkrCheckin.Question())
                        {
                          var checkVal = !string.IsNullOrEmpty(_message) && string.IsNullOrEmpty(checkin.questions[qs.id]);
                          <li class="column is-full">
                            <div class="has-text-grey">@qs.name</div>
                            <div class="control pt-2">
                              <textarea @bind="checkin.questions[qs.id]" class="textarea is_bg @(checkVal ? "is-danger" : "")" rows="3" placeholder="Nhập đầy đủ thông tin bắt buộc..." />
                            </div>
                          </li>
                        }
                        @if (!current.draft)
                        {
                          <li class="column is-full">
                            <div class="has-text-grey">Phản hồi KR</div>
                            <div class="control pt-2">
                              <input @bind="checkin.feedback" type="text" class="input is_bg" placeholder="Nhập phản hồi..." />
                            </div>
                          </li>
                        }
                      </ul>
                    </td>
                  </tr>
                }
              }
            }
          </tbody>
        </table>
        <hr />
        <div class="field is-grouped is-grouped-multiline mt-5">
          @if (!current.checkin && current.draft)
          {
            if (string.IsNullOrEmpty(okr.user_checkin))
            {
              <div class="control" style="width: 650px;">
                <ul class="columns is-multiline is-vcentered is-mobile is-variable is-1">
                  <li class="column is-narrow">
                    Chọn quản lý check-in
                  </li>
                  <li class="column is-narrow">
                    <div class="select is-fullwidth">
                      <select @onchange="ChangeDepartment" class="is-family-code">
                        <option value="">Chọn phòng ban</option>
                        @foreach (var item in departments)
                        {
                          <option value="@item.id">@item.name</option>
                        }
                      </select>
                    </div>
                  </li>
                  <li class="column is-narrow">
                    <div class="control has-icons-right has_suggest" style="width: 220px;">
                      <input class="input" type="text" placeholder="Nhập tên nhân viên..."
                       autocomplete="off" @bind="UserSearch" @bind:event="oninput" />
                      <ul class="suggest">
                        @foreach (var item in userSuggests)
                        {
                          <li class="rsitem" @onclick="() => UserSelected(item)">
                            <div class="user_item">
                              <img class="image is-24x24 mr-2" src="@item.avatar" alt="IMG">
                              <span>@item.FullName</span>
                            </div>
                          </li>
                        }
                      </ul>
                      <span class="icon is-right">
                        <i class="material-icons-outlined is-size-6">search</i>
                      </span>
                    </div>
                  </li>
                  @if (managerList.Count > 0)
                  {
                    <li class="column is-full">
                      <div class="buttons">
                        @foreach (var manager in managerList)
                        {
                          <a class="button is-info is-rounded" @onclick="() => managerList.Remove(manager)">
                            <span>@manager.FullName</span>
                            <span class="icon">
                              <i class="material-icons-outlined is-size-6">close</i>
                            </span>
                          </a>
                        }
                      </div>
                    </li>
                  }
                </ul>
              </div>
            }
            <div class="control is-expanded has-text-right">
              <a class="button is-white has-text-danger" onclick="goBack()">
                <span>Hủy nhập</span>
              </a>
              <a class="button is-link" @onclick="Update">
                <span class="icon">
                  <i class="material-icons-outlined is-size-6">done</i>
                </span>
                <span>Hoàn tất</span>
              </a>
            </div>
          }
          else if (!current.checkin)
          {
            <div class="control">
              Chọn lần check-in tiếp theo
            </div>
            <div class="control has-icons-left" style="width: 140px;">
              <div class="input">
                <DateRangePicker SingleDatePicker="true" @bind-StartDate="nextCheckin" MinDate="DateTime.Now.AddDays(1)" Drops="DropsType.Up" />
              </div>
              <span class="icon is-left has-text-link">
                <i class="material-icons-outlined is-size-6">calendar_today</i>
              </span>
            </div>
            <div class="control pl-2">
              hoặc chọn
            </div>
            <div class="control is-expanded pl-3">
              <label class="checkbox">
                <input @bind="okr.done" type="checkbox" />
                <span class="has-text-weight-semibold">Hoàn thành OKRs</span>
              </label>
            </div>
            <div class="control">
              <a class="button is-white has-text-danger" onclick="goBack()">
                <span>Trở về</span>
              </a>
              <a class="button is-link" @onclick="AlertCheckin">
                <span class="icon">
                  <i class="material-icons-outlined is-size-6">done</i>
                </span>
                <span>Hoàn tất Check-in</span>
              </a>
            </div>
          }
        </div>
      </div>
    </div>
  </section>
}

@if (showAlertCheckin)
{
  <div class="modal is-active">
    <div class="modal-background"></div>
    <div class="modal-card">
      <div class="modal-card-head">
        <div class="modal-card-title">Thông báo xác nhận</div>
      </div>
      <section class="modal-card-body">
        <div class="has-text-weight-semibold">
          Bạn lựa chọn OKRs này đã hoàn thành. Tiến trình OKRs sẽ được lưu trữ và không thể cập nhật nữa.
          <br />
          Bạn có chắc chắn muốn tiếp tục?
        </div>
      </section>
      <div class="modal-card-foot">
        <button class="button is-success" @onclick="ConfirmCheckin">Xác nhận</button>
        <button class="button" @onclick="() => showAlertCheckin = false">Hủy</button>
      </div>
    </div>
  </div>
}

<TaskPopup Okr="taskOkr" Kr="taskKr" />

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }

  [Parameter]
  public string OkrId { get; set; }
  [Parameter]
  public string CheckinId { get; set; }

  private bool _loaded = false;
  private bool _success = false;
  private string _message = string.Empty;
  private string _title = "CFRs - Check-in 1:1";

  private OkrCheckinModel current = new();
  private OkrModel okr = null;
  DateTimeOffset? nextCheckin { get; set; }

  private OkrModel taskOkr = null;
  private OkrModel.KeyResult taskKr = null;

  private List<DepartmentModel.SelectList> departments = new();
  private List<UserModel> userSuggests = new();
  private List<UserModel> managerList = new();
  private string filterDepartment = string.Empty;
  private string filterUserName = string.Empty;
  private bool showAlertCheckin = false;

  protected override async Task OnInitializedAsync()
  {
    departments = DbDepartment.GetSelectListOfUser(Layout.Company.id, Layout.User.departments_id, null);

    okr = await DbOkr.Get(Layout.Company.id, OkrId);
    if (okr != null)
    {
      if (!string.IsNullOrEmpty(CheckinId))
        current = await DbOkrCheckin.Get(Layout.Company.id, CheckinId);
      else
      {
        current = new()
          {
            cycle = okr.cycle,
            user_create = okr.user_create,
            okr = okr.id,
            progress_prev = DbOkr.GetProgress(okr.key_results),
            draft = true,
            key_results = new()
          };
        foreach (var kr in okr.key_results)
        {
          current.key_results.Add(new()
            {
              id = kr.id,
              result = kr.result,
              questions = new() { "", "", "", "" }
            });
        }
      }
    }

    if (okr == null || current == null)
      _message = "Dữ liệu không tồn tại hoặc đã bị xóa !";

    _loaded = true;
  }

  protected override void OnAfterRender(bool firstRender)
  {
    taskOkr = null;
    taskKr = null;
  }

  private void ShowTask(OkrModel okr, OkrModel.KeyResult kr)
  {
    taskOkr = okr;
    taskKr = kr;
  }

  private void ChangeDepartment(ChangeEventArgs e)
  {
    filterDepartment = e.Value.ToString();
    filterUserName = string.Empty;
    userSuggests = new();
    foreach (var item in Layout.UserList)
    {
      if (!string.IsNullOrEmpty(filterDepartment) && item.departments_id != null && item.departments_id.Contains(filterDepartment))
        userSuggests.Add(item);
    }
  }

  private string UserSearch
  {
    get => filterUserName;
    set
    {
      filterUserName = value;
      userSuggests = new();
      if (!string.IsNullOrEmpty(value))
      {
        foreach (var item in Layout.UserList)
        {
          bool check = true;
          if (!string.IsNullOrEmpty(filterDepartment))
            if (item.departments_id == null || !item.departments_id.Contains(filterDepartment))
              check = false;
          if (!Handled.Shared.SearchKeyword(filterUserName, item.first_name + item.last_name))
            check = false;

          if (check)
            userSuggests.Add(item);
        }
      }
    }
  }

  private void UserSelected(UserModel item)
  {
    filterUserName = string.Empty;
    if (item.id != Layout.User.id)
    {
      userSuggests = new();
      managerList.Add(item);
    }
  }

  private async Task Delete()
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc muốn xóa bản check-in nháp này để thực hiện lại?"))
      return;

    await DbOkrCheckin.Delete(Layout.Company.id, current.id);
    navigation.NavigateTo($"/cfr/checkin/{okr.id}/info");
  }

  private async Task Update()
  {
    _success = false;
    _message = string.Empty;

    if (current.confident == 0)
    {
      _message = "Chưa nhập mức độ tự tin của Mục tiêu !";
      await Task.Delay(5000);
      _message = string.Empty;
    }
    else if (current.key_results.Where(x => x.confident == 0).Count() > 0)
    {
      _message = "Chưa nhập mức độ tự tin của Kết quả then chốt !";
      await Task.Delay(5000);
      _message = string.Empty;
    }
    else if(ValidationQuestion() == false)
    {
      _message = "Bạn cần nhập đầy đủ tất cả thông tin bắt buộc !";
      await Task.Delay(10000);
      _message = string.Empty;
    }
    else if (string.IsNullOrEmpty(okr.user_checkin) && managerList.Count == 0)
    {
      _message = "Bạn chưa chọn quản lý sẽ check-in với bạn !";
      await Task.Delay(10000);
      _message = string.Empty;
    }
    else
    {
      if (string.IsNullOrEmpty(current.id))
      {
        // Create Checkin on DB
        current = await DbOkrCheckin.Create(Layout.Company.id, current);

        // Gửi thông báo chuông cho quản lý
        if (!string.IsNullOrEmpty(okr.user_checkin))
          await DbNotify.Create(Layout.Company.id, 503, current.id, okr.user_checkin, Layout.User.id);
        else
        {
          foreach (var user in managerList)
            await DbNotify.Create(Layout.Company.id, 503, current.id, user.id, Layout.User.id);
        }
      }
      else
      {
        // Update Checkin on DB
        current = await DbOkrCheckin.Update(Layout.Company.id, current);
      }

      okr.date_checkin = current.date_create;
      okr.status_checkin = 1;
      await DbOkr.Update(Layout.Company.id, okr);

      navigation.NavigateTo($"/cfr/checkin/{okr.id}/info");
    }
  }

  private async Task AlertCheckin()
  {
    _success = false;
    _message = string.Empty;

    #region Loại bỏ các KR đã xoá

    var key_results = new List<OkrCheckinModel.KeyResult>();
    foreach (var item in okr.key_results)
    {
      var krCheckin = current.key_results.SingleOrDefault(x => x.id == item.id);
      if (krCheckin != null)
        key_results.Add(krCheckin);
    }
    current.key_results = key_results;

    #endregion

    if (current.confident == 0)
    {
      _message = "Chưa nhập mức độ tự tin của Mục tiêu !";
      await Task.Delay(5000);
      _message = string.Empty;
    }
    else if (current.key_results.Where(x => x.confident == 0).Count() > 0)
    {
      _message = "Chưa nhập mức độ tự tin của Kết quả then chốt !";
      await Task.Delay(5000);
      _message = string.Empty;
    }
    else if (current.key_results.Where(x => string.IsNullOrEmpty(x.feedback)).Count() > 0)
    {
      _message = "Bạn chưa nhập phản hồi cho kết quả then chốt !";
      await Task.Delay(5000);
      _message = string.Empty;
    }
    else if (nextCheckin == null && !okr.done)
    {
      _message = "Bạn chưa chọn lần check-in tiếp theo hoặc chọn Hoàn thành OKRs!";
      await Task.Delay(5000);
      _message = string.Empty;
    }
    else
    {
      if (okr.done)
      {
        // Yêu cầu xác nhận hoàn thành
        showAlertCheckin = true;
      }
      else
      {
        // Không yêu cầu xác nhận
        await ConfirmCheckin();
      }
    }
  }

  private async Task ConfirmCheckin()
  {
    // Update Checkin
    current.checkin = true;
    current.date_checkin = DateTime.Now.Ticks;
    current = await DbOkrCheckin.Update(Layout.Company.id, current);

    foreach (var kr in okr.key_results)
    {
      var checkin = current.key_results.SingleOrDefault(x => x.id == kr.id);
      if (checkin != null)
      {
        kr.result = checkin.result;
        kr.change = checkin.change;
        kr.confident = checkin.confident;
      }
    }

    // Update OKRs
    okr.confident = current.confident;
    okr.progress_prev = current.progress_prev;
    okr.status_checkin = 3;
    if (!okr.done)
      okr.next_checkin = nextCheckin.Value.DateTime.Ticks;
    await DbOkr.Update(Layout.Company.id, okr);

    // Tạo lịch checkin
    var dayCheckin = await DbDayCheckin.GetbyOkr(Layout.Company.id, okr.id);
    if (dayCheckin == null && !okr.done)
    {
      dayCheckin = new DayCheckinModel();
      dayCheckin.cycle = Layout.CycleId;
      dayCheckin.okr = okr.id;
      dayCheckin.okr_name = okr.name;
      dayCheckin.user_create = okr.user_create;
      dayCheckin.user_checkin = okr.user_checkin;
      dayCheckin.date_checkin = okr.next_checkin;
      dayCheckin.status = 0;
      await DbDayCheckin.Create(Layout.Company.id, dayCheckin);
    }

    // Gửi thông báo chuông
    await DbNotify.Create(Layout.Company.id, 505, current.id, okr.user_checkin, Layout.User.id);

    navigation.NavigateTo($"/cfr/checkin/{okr.id}/info", false);
  }

  private async Task Checkin()
  {
    _success = false;
    _message = string.Empty;

    #region Loại bỏ các KR đã xoá

    var key_results = new List<OkrCheckinModel.KeyResult>();
    foreach (var item in okr.key_results)
    {
      var krCheckin = current.key_results.SingleOrDefault(x => x.id == item.id);
      if (krCheckin != null)
        key_results.Add(krCheckin);
    }
    current.key_results = key_results;

    #endregion

    if (current.confident == 0)
    {
      _message = "Chưa nhập mức độ tự tin của Mục tiêu !";
      await Task.Delay(5000);
      _message = string.Empty;
    }
    else if (current.key_results.Where(x => x.confident == 0).Count() > 0)
    {
      _message = "Chưa nhập mức độ tự tin của Kết quả then chốt !";
      await Task.Delay(5000);
      _message = string.Empty;
    }
    else if (current.key_results.Where(x => string.IsNullOrEmpty(x.feedback)).Count() > 0)
    {
      _message = "Bạn chưa nhập phản hồi cho kết quả then chốt !";
      await Task.Delay(5000);
      _message = string.Empty;
    }
    else if (nextCheckin == null && !okr.done)
    {
      _message = "Bạn chưa chọn lần check-in tiếp theo hoặc chọn Hoàn thành OKRs!";
      await Task.Delay(5000);
      _message = string.Empty;
    }
    else
    {
      // Update Checkin
      current.checkin = true;
      current.date_checkin = DateTime.Now.Ticks;
      current = await DbOkrCheckin.Update(Layout.Company.id, current);

      foreach (var kr in okr.key_results)
      {
        var checkin = current.key_results.SingleOrDefault(x => x.id == kr.id);
        if (checkin != null)
        {
          kr.result = checkin.result;
          kr.change = checkin.change;
          kr.confident = checkin.confident;
        }
      }

      // Update OKRs
      okr.confident = current.confident;
      okr.progress_prev = current.progress_prev;
      okr.status_checkin = 3;
      if (!okr.done)
        okr.next_checkin = nextCheckin.Value.DateTime.Ticks;
      await DbOkr.Update(Layout.Company.id, okr);

      // Tạo lịch checkin
      var dayCheckin = await DbDayCheckin.GetbyOkr(Layout.Company.id, okr.id);
      if (dayCheckin == null && !okr.done)
      {
        dayCheckin = new DayCheckinModel();
        dayCheckin.cycle = Layout.CycleId;
        dayCheckin.okr = okr.id;
        dayCheckin.okr_name = okr.name;
        dayCheckin.user_create = okr.user_create;
        dayCheckin.user_checkin = okr.user_checkin;
        dayCheckin.date_checkin = okr.next_checkin;
        dayCheckin.status = 0;
        await DbDayCheckin.Create(Layout.Company.id, dayCheckin);
      }

      // Gửi thông báo chuông
      await DbNotify.Create(Layout.Company.id, 505, current.id, okr.user_checkin, Layout.User.id);

      navigation.NavigateTo($"/cfr/checkin/{okr.id}/info", false);
    }
  }

  private bool ValidationQuestion()
  {
    foreach (var keyResult in current.key_results)
    {
      if (keyResult.questions.Where(x => string.IsNullOrEmpty(x)).Count() > 0
        || keyResult.questions.Where(x => string.IsNullOrEmpty(x.Trim())).Count() > 0)
        return false;
    }
    return true;
  }
}