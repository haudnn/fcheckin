@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>Thống kê Kế hoạch</PageTitle>

<div class="card p-5 p-4-mobile">
  <ul class="columns is-vcentered is-variable is-2 mb-3 is-mobile is-multiline">
    <li class="column is-full-mobile">
      <h1 class="title is-5 has-text-info">
        THỐNG KÊ THÀNH VIÊN
      </h1>
    </li>
    <li class="column is-narrow">
      <div class="dropdown is-hoverable">
        <div class="dropdown-trigger">
          <a class="icon-text">
            <span class="has-text-link">
              @(filterStatus != 0 ? WorkService.StatusPlan(filterStatus).name : "Trạng thái")      
            </span>
            <span class="icon">
              <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
            </span>
          </a>
        </div>
        <div class="dropdown-menu">
          <div class="dropdown-content">
            <a class="dropdown-item" @onclick="() => FilterStatus(0)">Tất cả</a>
            @foreach (var item in WorkService.StatusPlan())
            {
              <a class="dropdown-item" @onclick="() => FilterStatus(item.id)">@item.name</a>
            }
          </div>
        </div>
      </div>
    </li>
    <li class="column is-narrow">
      <div class="dropdown is-right @(toggleDepartment ? "is-active" : "")">
        <div class="dropdown-trigger">
          <a class="icon-text" @onclick="() => toggleDepartment = !toggleDepartment">
            <span class="has-text-link">
              @department.name
            </span>
            <span class="icon">
              <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
            </span>
          </a>
        </div>
        <div class="dropdown-menu">
          <div class="dropdown-content">
            <a class="dropdown-item is-family-code" @onclick="() => FilterDepartment(null)">
              Tất cả phòng ban
            </a>
            @foreach (var sl in departments)
            {
              <a class="dropdown-item is-family-code" @onclick="() => FilterDepartment(sl)">
                @((MarkupString)sl.name.Replace("'", "&nbsp;"))
              </a>
            }
          </div>
        </div>
      </div>
    </li>
    <li class="column is-one-quarter-tablet is-full-mobile">
      <div class="control has-icons-right has_suggest">
          <input class="input is-rounded is-small" type="text" placeholder="Nhập tên nhân viên..."
                  autocomplete="off" @bind="UserSearch" @bind:event="oninput" />
          <ul class="suggest">
            @foreach (var item in userSuggests)
            {
              <li class="rsitem" @onclick="() => UserSelected(item)">
                <div class="user_item">
                  <img class="image is-24x24 mr-2" src="@item.avatar" alt="IMG">
                  <span>@item.FullName</span>
                </div>
              </li>
            }
          </ul>
          <span class="icon is-right">
            <i class="material-icons-outlined">search</i>
          </span>
        </div>
    </li>
  </ul>

  @if(Layout.IsMobile)
  {
    foreach (var item in members)
    {
      var report = reportList.SingleOrDefault(x => x.id == item.id);
      var done = Shared.Progress(report.done, report.total);
      var late = Shared.Progress(report.late, report.total);
      <ul class="columns is-multiline is-variable is-1 is-mobile my-2 is-size-7">
        <li class="column is-full">
          <div class="user_item">
            <img class="image is-36x36 mr-2" src="@item.avatar" alt="IMG">
            <div>
              <p class="has-text-weight-semibold has-text-info font_16">
                @item.FullName
              </p>
              <p class="text_1_line has-text-grey is-size-7">
                @item.departments_name
              </p>
            </div>
          </div>
        </li>
        <li class="column is-two-thirds">
          <div class="icon-text">
            <span class="icon is-small mr-2 has-text-link">
              <i class="material-icons-outlined is-size-6">view_timeline</i>
            </span>
            <span class="has-text-grey">Kế hoạch tham gia:</span>
          </div>
        </li>
        <li class="column is-one-third">
          @report.other
        </li>
        <li class="column is-two-thirds">
          <div class="icon-text">
            <span class="icon is-small mr-2 has-text-success">
              <i class="material-icons-outlined is-size-6">done_all</i>
            </span>
            <span class="has-text-grey">Công việc hoàn thành:</span>
          </div>
        </li>
        <li class="column is-one-third">
          <span>@string.Format("{0}/{1}", report.done, report.total)</span>
          <span class="px-1">•</span>
          <span>@Shared.ConvertNumber(done)%</span>
        </li>
        <li class="column is-two-thirds">
          <div class="icon-text">
            <span class="icon is-small mr-2 has-text-danger">
              <i class="material-icons-outlined is-size-6">error_outline</i>
            </span>
            <span class="has-text-grey">Công việc trễ hạn:</span>
          </div>
        </li>
        <li class="column is-one-third">
          <span>@string.Format("{0}/{1}", report.late, report.total)</span>
          <span class="px-1">•</span>
          <span>@Shared.ConvertNumber(late)%</span>
        </li>
      </ul>
    }
  }
  else
  {  
    <table class="table is-fullwidth is-vcentered is-noborder is-responsive mt-3">
      <thead>
        <tr class="is-size-7">
          <th>Thành viên</th>
          <th align="center" width="140px">Kế hoạch tham gia</th>
          <th align="center" width="150px">Công việc hoàn thành</th>
          <th align="center" width="150px">Công việc trễ hạn</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var item in members)
        {
          var report = reportList.SingleOrDefault(x => x.id == item.id);
          var done = Shared.Progress(report.done, report.total);
          var late = Shared.Progress(report.late, report.total);
          <tr>
            <td>
              <div class="user_item">
                <img class="image is-36x36 mr-2" src="@item.avatar" alt="IMG">
                <div>
                  <p class="has-text-weight-semibold has-text-info font_14">
                    @item.FullName
                  </p>
                  <p class="text_1_line has-text-grey is-size-7">
                    @item.departments_name
                  </p>
                </div>
              </div>
            </td>
            <td align="center">
              @report.other
            </td>
            <td align="center">
              <span>@string.Format("{0}/{1}", report.done, report.total)</span>
              <span class="px-1">•</span>
              <span>@Shared.ConvertNumber(done)%</span>
            </td>
            <td align="center">
              <span>@string.Format("{0}/{1}", report.late, report.total)</span>
              <span class="px-1">•</span>
              <span>@Shared.ConvertNumber(late)%</span>
            </td>
          </tr>
        }
      </tbody>
    </table>
  }
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public List<DepartmentModel> departmentAll { get; set; }
  [Parameter]
  public List<DepartmentModel.SelectList> departments { get; set; }

  private List<UserModel> members = new();
  private List<WorkPlanModel.Report> reportList = new();
  private DepartmentModel department = new() { name = "Tất cả phòng ban", members_id = new() };
  private List<UserModel> userSuggests = new();
  private List<string> staffList = new();
  private bool toggleDepartment = false;
  private string filterKey = string.Empty;
  private int filterStatus = 0;

  protected override async Task OnInitializedAsync()
  {
    // Phòng ban mặc định
    if (!string.IsNullOrEmpty(Layout.User.department_default))
      department = departmentAll.FirstOrDefault(x => x.id == Layout.User.department_default);

    if(department == null)
      department = new() { name = "Tất cả phòng ban", members_id = new() };
    
    staffList = department.members_id;
    
    await GetDataList();
  }
  
  private async Task FilterDepartment(DepartmentModel.SelectList item)
  {
    userSuggests = new();
    toggleDepartment = false;
    filterKey = string.Empty;
    if (item != null)
    {
      department = departmentAll.FirstOrDefault(x => x.id == item.id);
      staffList = department.members_id;
    }
    else
      department = new() { name = "Tất cả phòng ban" };
    await GetDataList();
  }

  private async Task FilterStatus(int value)
  {
    filterStatus = value;
    await GetDataList();
  }
  
  private string UserSearch
  {
    get => filterKey;
    set
    {
      filterKey = value;
      userSuggests = new();
      toggleDepartment = false;
      if (!string.IsNullOrEmpty(value))
      {
        foreach (var item in Layout.UserList)
        {
          bool check = true;
          if (!string.IsNullOrEmpty(department.id))
            if (item.departments_id == null || !item.departments_id.Contains(department.id))
              check = false;
          if (!Handled.Shared.SearchKeyword(filterKey, item.FullName))
            check = false;

          if (check)
            userSuggests.Add(item);
        }
      }
    }
  }

  private async Task UserSelected(UserModel item)
  {
    userSuggests = new();
    filterKey = item.FullName;
    staffList = new() { item.id };
    await GetDataList();
  }

  private async Task GetDataList()
  {
    // Lấy tất cả kế hoạch đang có
    var data = await DbWorkPlan.GetAll(Layout.Company.id);

    // Tìm kiếm theo trạng thái kế hoạch
    if(filterStatus != 0)
      data = data.Where(x => x.status == filterStatus).ToList();

    // Lấy danh sách kế hoạch có thành viên tham gia
    List<WorkPlanModel> planList = new();
    foreach (var plan in data)
    {
      if(staffList.Count == 0)
        planList.Add(plan);
      else
      {
        var check = plan.members.Where(x => staffList.Contains(x.id)).Count();
        if(check > 0)
          planList.Add(plan);
      }
    }

    // Lấy công việc trong tất cả kế hoạch
    List<WorkPlanModel.Task> taskList = new();
    foreach (var plan in planList)
    {
      var tasks = await DbWorkTask.GetListInPlan(Layout.Company.id, plan.id);
      taskList.AddRange(tasks);
    }

    // Lấy danh sách thành viên trong phòng ban
    if(department == null || staffList.Count == 0)
      members = Layout.UserList;
    else
      members = Layout.UserList.Where(x => staffList.Contains(x.id)).ToList();
    
    // Lấy thống kê thành viên
    reportList = new();
    foreach (var member in members)
    {
      var tasks = taskList.Where(x => x.members.Where(m => m.id == member.id).Count() > 0).ToList();
      var report = WorkService.ReportTasks(tasks);
      report.id = member.id;
      // Số lượng kế hoạch tham gia
      report.other = GetPlanCount(planList, member.id);
      reportList.Add(report);
    }
  }

  private int GetPlanCount(List<WorkPlanModel> planList, string userId)
  {
    int count = 0;
    foreach (var plan in planList)
    {
      var check = plan.members.Where(x => x.id == userId).Count();
      if(check > 0)
        count ++;
    }
    return count;
  }
}