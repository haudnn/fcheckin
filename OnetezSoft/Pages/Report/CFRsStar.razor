@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<div class="card p-5">
  <ul class="columns is-multiline is-vcentered is-variable is-2 mb-3">
    <li class="column is-full">
      <h1 class="title is-5 has-text-info">
        LỊCH SỬ @(type == 2 ? "GHI NHẬN" : "TẶNG SAO")
      </h1>
    </li>
    <li class="column">
      <div class="field has-addons">
        <div class="control">
          <span class="button is-link">
            <i class="material-icons-outlined">calendar_today</i>
          </span>
        </div>
        <div class="control" style="width: 200px;">
          <div class="input">
            <DateRangePicker @bind-StartDate="filterStart" @bind-EndDate="filterEnd" OnRangeSelect="ChangePicker" />
          </div>
        </div>
        <div class="control">
          <div class="select is-fullwidth">
            <select @onchange="ChangeDate">
              <option value="1">Tuần này</option>
              <option value="11">Tuần trước</option>
              <option value="2">Tháng này</option>
              <option value="22">Tháng trước</option>
              <option value="3">Quý này</option>
            </select>
          </div>
        </div>
      </div>
    </li>
    <li class="column is-narrow">
      <DepartmentDropdown department="@filterDepartment" OnUpdate="ChangeFilterDepartment" />
    </li>
    <li class="column is-one-quarter">
      <MemberSearch department="@filterDepartment" sources="Layout.UserList" OnUpdate="ChangeFilterUser" />
    </li>
    <li class="column is-narrow">
      <div class="dropdown is-hoverable is-right">
        <div class="dropdown-trigger">
          <a class="icon-text has-text-link has-text-right">
            @if (isCreate == null)
            {
              <span class="text_1_line" style="width: 80px;">Tất cả</span>
            }
            else if (isCreate == true)
            {
              <span class="text_1_line" style="width: 80px;">Người @(type == 2 ? "ghi nhận" : "tặng sao")</span>
            }
            else
            {
              <span class="text_1_line" style="width: 80px;">Người được @(type == 2 ? "ghi nhận" : "tặng sao")</span>
            }
            <span class="icon">
              <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
            </span>
          </a>
        </div>
        <div class="dropdown-menu">
          <div class="dropdown-content">
            <a class="dropdown-item" @onclick="() => ChangeCreate(null)">
              Tất cả
            </a>
            <a class="dropdown-item" @onclick="() => ChangeCreate(true)">
              Người @(type == 2 ? "ghi nhận" : "tặng sao")
            </a>
            <a class="dropdown-item" @onclick="() => ChangeCreate(false)">
              Người được @(type == 2 ? "ghi nhận" : "tặng sao")
            </a>
          </div>
        </div>
      </div>
    </li>
  </ul>

  <div class="scrolly pr-2" style="max-height: 400px;">
    <table class="table is-fullwidth is-noborder is-striped is-responsive">
      <tbody>
        @foreach (var item in cfrList)
        {
          var create = Layout.UserList.SingleOrDefault(x => x.id == item.user_create);
          var receive = Layout.UserList.SingleOrDefault(x => x.id == item.user_receive);

          <tr>
            <td class="py-4" width="25%">
              @if (create != null)
              {
                <div class="user_item mb-2">
                  <img class="image is-36x36 mr-2" src="@create.avatar" alt="IMG">
                  <span>@create.FullName</span>
                </div>
              }
              @if (receive != null)
              {
                <div class="user_item pl-6" style="background: url(/images/arrow_sub.png) 20px 0px no-repeat;">
                  <img class="image is-36x36 mr-2" src="@receive.avatar" alt="IMG">
                  <span>@receive.FullName</span>
                </div>
              }
            </td>
            <td class="py-4" width="75%">
              @if (!string.IsNullOrEmpty(item.evaluate_name))
              {
                <h3 class="title is-6 has-text-info mb-2">
                  @item.evaluate_name
                </h3>
              }
              <div class="text_3_line mb-2" onclick="toggleText(this)">
                @((MarkupString)Shared.GetLinks(item.content))
              </div>
              <div class="field is-grouped">
                <div class="control">
                  <span class="icon-text">
                    <span class="has-text-weight-semibold">@item.star</span>
                    <span class="icon">
                      <i class="material-icons-outlined has-text-warning">star</i>
                    </span>
                  </span>
                </div>
                @if (type == 2)
                {
                  <div class="control">•</div>
                  <div class="control has-text-weight-semibold text_1_line">
                    @if (string.IsNullOrEmpty(item.okr_name))
                    {
                      <span>Tất cả OKRs</span>
                    }
                    else
                    {
                      <span>@item.okr_name</span>
                    }
                  </div>
                }
                <div class="control">•</div>
                <div class="control">
                  @string.Format("{0:dd/MM/yyyy}", new DateTime(item.date_create))
                </div>
              </div>
            </td>
          </tr>
        }
        @if (cfrList.Count == 0)
        {
          <tr class="has-background-white">
            <td colspan="5">
              <div class="has-text-grey py-6">
                Không có dữ liệu !
              </div>
            </td>
          </tr>
        }
      </tbody>
    </table>
  </div>
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public List<DepartmentModel> departmentAll { get; set; }
  [Parameter]
  public List<DepartmentModel.SelectList> departments { get; set; }
  [Parameter]
  public int type { get; set; }

  private List<OkrCfrModel> cfrList = new();
  private string filterUserId = string.Empty;
  private DateTimeOffset? filterStart { get; set; }
  private DateTimeOffset? filterEnd { get; set; }
  private string filterDepartment = null;
  private bool? isCreate = null;

  protected override async Task OnInitializedAsync()
  {
    Shared.GetTimeSpan(1, out DateTime start, out DateTime end);
    filterStart = start;
    filterEnd = end;

    filterDepartment = Layout.User.department_default;
    
    await ChangeFilterDepartment(filterDepartment);
  }

  public async Task ChangePicker(DateRange range)
  {
    filterStart = range.Start;
    filterEnd = range.End;
    await GetData();
  }

  private async Task ChangeDate(ChangeEventArgs e)
  {
    var type = Convert.ToInt32(e.Value);
    Shared.GetTimeSpan(type, out DateTime start, out DateTime end);
    filterStart = start;
    filterEnd = end;
    await GetData();
  }

  private async Task ChangeFilterDepartment(string value)
  {
    filterDepartment = value;
    filterUserId = string.Empty;
    await GetData();
  }

  private async Task ChangeFilterUser(string value)
  {
    if(!string.IsNullOrEmpty(value))
      filterUserId = value;
    await GetData();
  }

  private async Task ChangeCreate(bool? item)
  {
    isCreate = item;
    await GetData();
  }

  private async Task GetData()
  {
    var data = await DbOkrCfr.GetList(Layout.Company.id, type, filterStart.Value.DateTime, filterEnd.Value.DateTime);
    if (!string.IsNullOrEmpty(filterUserId))
    {
      if(isCreate == null)
      {
        cfrList = (from x in data
                   where x.user_create == filterUserId || x.user_receive == filterUserId
                   orderby x.date_create descending
                   select x).ToList();
      }
      else if (isCreate == true)
      {
        cfrList = (from x in data
                   where x.user_create == filterUserId
                   orderby x.date_create descending
                   select x).ToList();
      }
      else
      {
        cfrList = (from x in data
                   where x.user_receive == filterUserId
                   orderby x.date_create descending
                   select x).ToList();
      }
    }
    else if (!string.IsNullOrEmpty(filterDepartment))
    {
      var department = departmentAll.SingleOrDefault(x => x.id == filterDepartment);
      if (department != null)
      {
        if (isCreate == null)
        {
          cfrList = (from x in data
                     where department.members_id.Contains(x.user_create) 
                      || department.members_id.Contains(x.user_receive)
                     orderby x.date_create descending
                     select x).ToList();
        }
        else if (isCreate == true)
        {
          cfrList = (from x in data
                     where department.members_id.Contains(x.user_create)
                     orderby x.date_create descending
                     select x).ToList();
        }
        else
        {
          cfrList = (from x in data
                     where department.members_id.Contains(x.user_receive)
                     orderby x.date_create descending
                     select x).ToList();
        }
      }
    }
    else
    {
      cfrList = data;
    }
  }
}