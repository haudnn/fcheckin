@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

@if (Layout.IsMobile)
{
  <div class="field is-grouped mb-2">
  <div class="control is-expanded is-size-6 has-text-weight-medium">
    CÔNG VIỆC PHỤ
  </div>
  @if (editRole)
  {
    <div class="control">
      <a class="icon is-medium has-text-link" @onclick="AddItem">
        <i class="material-icons-round is-size-3">add_box</i>
      </a>
    </div>
  }
  </div>
}

<div class="scrolly py-1" style="height: calc(100vh - 162px);">
  @if (!Layout.IsMobile)
  {
    <ul class="columns is-vcentered is-gapless is-size-7 mb-2 has-text-grey">
      <li class="column">Công việc phụ</li>
      <li class="column is-narrow" style="width: 130px;">Thời gian</li>
      <li class="column is-narrow" style="width: 110px;">Thành viên</li>
      <li class="column is-narrow" style="width: 80px;">Trạng thái</li>
      <li class="column is-narrow" style="width: 30px;"></li>
    </ul>
  }
  @foreach (var task in tasks)
  {
    var toggle = toggleList.Contains(task.id);
    var isEdit = editList.Contains(task.id);
    var status = WorkService.Status(task.status);

    <ul class="sub_task columns is-vcentered is-multiline is-variable is-size-7 mb-0 is-mobile @(Layout.IsMobile ? "is-1" : "is-0")">
      @if (Layout.IsMobile)
      {
        if (task.date_start == 0)
          task.date_start = DateTime.Today.Ticks;
        if (task.date_end == 0)
          task.date_end = DateTime.Today.AddDays(7).Ticks;
        DateTime dateS = new DateTime(task.date_start);
        DateTime dateE = new DateTime(task.date_end);

        @if (isEdit)
        {
          <li class="column is-full">
            <input @bind="task.name" type="text" placeholder="Nhập tiêu đề công việc"
              class="input is-small has-text-weight-medium is_bg">
          </li>
        }
        else
        {
          <li class="column is-11">
            <span class="item_name has-text-weight-medium has-text-@(task.status == 4 ? "success is-line-through " : "info")">
              @task.name
            </span>
          </li>
          <li class="column is-1">
            @if (editRole)
            {
              <div class="dropdown is-hoverable is-right">
                <div class="dropdown-trigger">
                  <span class="icon is-small">
                    <i class="material-icons-outlined is-size-6">more_horiz</i>
                  </span>
                </div>
                <div class="dropdown-menu">
                  <div class="dropdown-content">
                    <a class="dropdown-item has-text-link" @onclick="() => ToggleEdit(task)">Chỉnh sửa</a>
                    <a class="dropdown-item has-text-danger" @onclick="() => DeleteItem(task)">Xóa</a>
                  </div>
                </div>
              </div>
            }
          </li>
        }
        <li class="column is-one-third pl-3">
          <div class="has-text-grey">Thời hạn:</div>
        </li>
        <li class="column is-two-thirds">
          <div class="input-date icon-text">
            <span class="icon is-small" onclick="setFocus('dateS_sub_@task.id')">
              <i class="material-icons-outlined is-size-6">calendar_today</i>
            </span>
            <span onclick="setFocus('dateS_sub_@task.id')">@dateS.ToString("dd/MM")</span>
            <input @bind="dateS" id="dateS_sub_@task.id" type="datetime-local" @oninput="(e) => ChangeDateStart(task, e)">
          </div>
          <div class="input-date icon-text">
            <span class="icon is-small" onclick="setFocus('dateE_sub_@task.id')">
              <i class="material-icons-outlined font_14">east</i>
            </span>
            <span onclick="setFocus('dateE_sub_@task.id')">@dateE.ToString("dd/MM")</span>
            <input @bind="dateE" id="dateE_sub_@task.id" type="datetime-local" @oninput="(e) => ChangeDateEnd(task, e)">
          </div>
        </li>
        <li class="column is-one-third pl-3">
          <div class="has-text-grey">Thành viên:</div>
        </li>
        <li class="column is-two-thirds">
          <_MemberList members="task.members" sources="members" isEdit="editRole" isTask="true" 
            isSubTask="true" isRight="true" OnUpdate="() => UpdateMembers(task)" />
        </li>
        <li class="column is-one-third pl-3">
          <div class="has-text-grey">Trạng thái:</div>
        </li>
        <li class="column is-two-thirds">
          <div class="dropdown is-hoverable">
            <div class="dropdown-trigger">
              <a class="icon-text">
                <span class="tag @status.color">@status.name</span>
                <span class="icon is-small">
                  <i class="material-icons-outlined is-size-6">arrow_drop_down</i>
                </span>
              </a>
            </div>
            @if (editRole)
            {
              <div class="dropdown-menu">
                <div class="dropdown-content">
                  @foreach (var item in WorkService.StatusSub())
                  {
                    <a class="dropdown-item" @onclick="() => ChangeStatus(task, item.id)">@item.name</a>
                  }
                </div>
              </div>
            }
          </div>
        </li>
        <li class="column is-full pl-3">
          @if (isEdit)
          {
            <textarea @bind="task.detail" class="textarea is-small is_bg" placeholder="Nhập mô tả công việc phụ" rows="3" />
            <div class="has-text-right pt-2">
              <a class="button is-small is-white has-text-link" @onclick="() => UpdateItem(task)">
                <span class="icon">
                  <i class="material-icons-round is-size-6">done</i>
                </span>
                <span>Cập nhật</span>
              </a>
              <a class="button is-small is-white has-text-danger" @onclick="() => ToggleEdit(task)">
                <span class="icon">
                  <i class="material-icons-round is-size-6">close</i>
                </span>
                <span>Hủy</span>
              </a>
            </div>
          }
          else
          {
            <div class="content has-text-grey">
              @((MarkupString)Shared.TextToHtml(task.detail))
            </div>
          }
        </li>
      }
      else
      {
        DateTimeOffset? dateS = task.date_start > 0 ? new DateTime(task.date_start) : null;
        DateTimeOffset? dateE = task.date_end > 0 ? new DateTime(task.date_end) : null;

        <li class="column" style="width: calc(100% - 350px);">
          <div class="icon-text mr-2">
            <a class="icon is-small" @onclick="() => ToggleItem(task.id)">
              <i class="material-icons-outlined is-size-6">@(toggle ? "arrow_drop_down" : "arrow_right")</i>
            </a>
            @if (isEdit)
            {
              <input @bind="task.name" class="input is-small is_bg" type="text" placeholder="Nhập tiêu đề công việc">
            }
            else
            {
              <span class="item_name has-text-@(task.status == 4 ? "success is-line-through " : "info")" title="@task.name">
                @task.name
              </span>
            }
          </div>
        </li>
        <li class="column is-narrow" style="width: 130px;">
          <DateRangePicker @bind-StartDate="dateS" @bind-EndDate="dateE"
            OnRangeSelect="(x) => UpdateDate(task, x)" Opens="SideType.Left">
            <PickerTemplate>
              <a id="@context.Id" @onclick="context.Toggle" class="icon-text">
                <span class="icon is-small mr-1">
                  <i class="material-icons-outlined is-size-6">calendar_today</i>
                </span>
                @if (context.TStartDate != null && context.TEndDate != null)
                {
                  <span>@context.TStartDate.Value.ToString("dd/MM")</span>
                  <span class="px-1">-</span>
                  <span>@context.TEndDate.Value.ToString("dd/MM")</span>
                }
                else
                {
                  <span>Chọn ngày</span>
                }
              </a>
            </PickerTemplate>
          </DateRangePicker>
        </li>
        <li class="column is-narrow" style="width: 110px;">
          <_MemberList members="task.members" sources="members" isEdit="editRole" isTask="true"
            isSubTask="true" isRight="true" OnUpdate="() => UpdateMembers(task)" />
        </li>
        <li class="column is-narrow" style="width: 80px;">
          <div class="dropdown is-hoverable">
            <div class="dropdown-trigger">
              <a class="icon-text">
                <span class="tag @status.color" style="width: 52px;">@status.name</span>
                <span class="icon is-small">
                  <i class="material-icons-outlined is-size-6">arrow_drop_down</i>
                </span>
              </a>
            </div>
            @if (editRole)
            {
              <div class="dropdown-menu">
                <div class="dropdown-content">
                  @foreach (var item in WorkService.StatusSub())
                  {
                    <a class="dropdown-item" @onclick="() => ChangeStatus(task, item.id)">@item.name</a>
                  }
                </div>
              </div>
            }
          </div>
        </li>
        <li class="column is-narrow" style="width: 30px;">
          @if (editRole && !isEdit)
          {
            <div class="dropdown is-hoverable is-right">
              <div class="dropdown-trigger">
                <span class="icon">
                  <i class="material-icons-outlined is-size-6">more_horiz</i>
                </span>
              </div>
              <div class="dropdown-menu">
                <div class="dropdown-content">
                  <a class="dropdown-item has-text-link" @onclick="() => ToggleEdit(task)">Chỉnh sửa</a>
                  <a class="dropdown-item has-text-danger" @onclick="() => DeleteItem(task)">Xóa</a>
                </div>
              </div>
            </div>
          }
        </li>
        @if (toggle)
        {
          <li class="column is-full">
            @if (isEdit)
            {
              <div class="pl-4 py-2">
                <textarea @bind="task.detail" class="textarea is-small is_bg" placeholder="Nhập mô tả công việc phụ" rows="2" />
                <div class="buttons is-right mt-2">
                  <a class="button is-small is-white has-text-link" @onclick="() => UpdateItem(task)">
                    <span class="icon">
                      <i class="material-icons-round is-size-6">done</i>
                    </span>
                    <span>Cập nhật</span>
                  </a>
                  <a class="button is-small is-white has-text-danger" @onclick="() => ToggleEdit(task)">
                    <span class="icon">
                      <i class="material-icons-round is-size-6">close</i>
                    </span>
                    <span>Hủy</span>
                  </a>
                </div>
              </div>
            }
            else
            {
              <div class="has-text-grey pl-4 py-2">
                @((MarkupString)Shared.TextToHtml(task.detail))
              </div>
            }
          </li>
        }
      }
    </ul>
  }
  @if (editRole && !Layout.IsMobile)
  {
    <div class="py-2">
      <a class="icon-text has-text-link" @onclick="AddItem">
        <span class="icon">
          <i class="material-icons-outlined is-size-6">add</i>
        </span>
        <span>Thêm công việc phụ</span>
      </a>
    </div>
  }
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public WorkPlanModel.Task parent { get; set; }
  [Parameter]
  public List<WorkPlanModel.Task> tasks { get; set; }
  [Parameter]
  public List<UserModel> members { get; set; }
  [Parameter]
  public bool editRole { get; set; }
  private List<string> toggleList = new();
  private List<string> editList = new();

  private void ToggleItem(string id)
  {
    if (toggleList.Contains(id))
      toggleList.Remove(id);
    else
      toggleList.Add(id);
  }

  private void AddItem()
  {
    var item = new WorkPlanModel.Task()
    {
      id = Mongo.RandomId(),
      status = 1,
      plan_id = parent.plan_id,
      members = new(),
    };
    if (Layout.IsMobile)
      tasks.Insert(0, item);
    else
      tasks.Add(item);
    toggleList.Add(item.id);
    editList.Add(item.id);
  }

  private async Task ToggleEdit(WorkPlanModel.Task item)
  {
    // Cập nhật lại dữ liệu mới nhất
    var data = await DbWorkTask.Get(Layout.Company.id, item.id);
    if (data != null)
    {
      item.name = data.name;
      item.date_start = data.date_start;
      item.date_end = data.date_end;
      item.members = data.members;
      item.status = data.status;
    }

    if (editList.Contains(item.id))
    {
      editList.Remove(item.id);
      if (item.parent_id == null)
        tasks.Remove(item);
    }
    else
    {
      editList.Add(item.id);
      if (!toggleList.Contains(item.id))
        toggleList.Add(item.id);
    }
  }

  private async Task UpdateItem(WorkPlanModel.Task item)
  {
    if (string.IsNullOrEmpty(item.name))
      await JSRuntime.InvokeVoidAsync("tagline", false, "Nhập tiêu đề của công việc");
    else if (item.date_start == 0 || item.date_end == 0)
      await JSRuntime.InvokeVoidAsync("tagline", false, "Nhập thời gian thực hiện của công việc.");
    else if (item.date_start >= item.date_end)
      await JSRuntime.InvokeVoidAsync("tagline", false, "Ngày bắt đầu đang lớn hơn ngày kết thúc!");
    else if (item.members.Count == 0)
      await JSRuntime.InvokeVoidAsync("tagline", false, "Chọn người tham gia của công việc.");
    else
    {
      if (item.parent_id == null)
      {
        // Tạo mới
        item.parent_id = parent.id;
        await DbWorkTask.Create(Layout.Company.id, item);
        await WorkService.CreateLog(Layout.Company.id, "Thêm công việc phụ", item.name, parent.plan_id, parent.id, Layout.User);
        await WorkService.LogTaskMembers(Layout.Company.id, null, item, Layout.User, Layout.UserList);
        // Cập nhật số lượng công việc phụ
        await WorkService.UpdateSubTaskCount(Layout.Company.id, parent.id, tasks.Count);
      }
      else
      {
        // Cập nhật
        await DbWorkTask.Update(Layout.Company.id, item);
        await WorkService.CreateLog(Layout.Company.id, "Cập nhật tiêu đề công việc phụ", item.name, parent.plan_id, parent.id, Layout.User);
      }
      editList.Remove(item.id);
    }
  }

  private async Task DeleteItem(WorkPlanModel.Task item)
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn đang thực hiện xóa \"{item.name}\".\nBạn có chắc chắn muốn thực hiện?"))
      return;
    await DbWorkTask.Delete(Layout.Company.id, item.id);
    await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa công việc thành công!");
    await WorkService.CreateLog(Layout.Company.id, "Xóa công việc phụ", item.name, parent.plan_id, parent.id, Layout.User);
    tasks.Remove(item);
    // Cập nhật số lượng công việc phụ
    await WorkService.UpdateSubTaskCount(Layout.Company.id, parent.id, tasks.Count);
  }

  private async Task ChangeDateStart(WorkPlanModel.Task item, ChangeEventArgs e)
  {
    if (e.Value != null)
    {
      item.date_start = Convert.ToDateTime(e.Value).Ticks;
      if (item.date_start < item.date_end)
        await DbWorkTask.Update(Layout.Company.id, item);
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Ngày bắt đầu đang lớn hơn ngày kết thúc!");
    }
  }

  private async Task ChangeDateEnd(WorkPlanModel.Task item, ChangeEventArgs e)
  {
    if (e.Value != null)
    {
      item.date_end = Convert.ToDateTime(e.Value).Ticks;
      if (item.date_start < item.date_end)
        await DbWorkTask.Update(Layout.Company.id, item);
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Ngày kết thúc đang nhỏ hơn ngày bắt đầu!");
    }
  }

  private async Task UpdateDate(WorkPlanModel.Task item, DateRange range)
  {
    item.date_start = range.Start.Ticks;
    item.date_end = range.End.Ticks;
    await DbWorkTask.Update(Layout.Company.id, item);
  }

  private async Task ChangeStatus(WorkPlanModel.Task item, int id)
  {
    item.status = id;
    item.date_done = item.status == 4 ? DateTime.Now.Ticks : 0;
    await DbWorkTask.Update(Layout.Company.id, item);
  }

  private async Task UpdateMembers(WorkPlanModel.Task item)
  {
    var old = await DbWorkTask.Get(Layout.Company.id, item.id);
    if (old != null)
    {
      await DbWorkTask.Update(Layout.Company.id, item);
      await WorkService.LogTaskMembers(Layout.Company.id, old, item, Layout.User, Layout.UserList);
    }
  }
}