@page "/work/{PlanId}/task"
@page "/work/{PlanId}/task/{TypeView}"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>Danh sách công việc</PageTitle>

<section class="columns is-gapless has_menu_left">
  <div class="column is-narrow">
    <_PlanSidebar />
  </div>
  <div class="column" style="padding-bottom: 0px !important;">
    @if(model != null && string.IsNullOrEmpty(model.id))
    {
      <div class="card p-3 p-4-mobile">
        <ul class="columns is-variable is-2">
          <li class="column is-narrow">
            <a class="button p-5 has-text-dark is-size-5 is-white" href="/work/@PlanId/detail">
              TỔNG QUAN
            </a>
          </li>
          <li class="column is-narrow">
            <a class="button p-5 has-text-link is-size-5 has-text-weight-semibold is_bg" href="/work/@PlanId/task">
              CÔNG VIỆC
            </a>
          </li>
          <li class="column is-narrow">
            <a class="button p-5 has-text-dark is-size-5 is-white" href="/work/@PlanId/chart">
              THỐNG KÊ
            </a>
          </li>
        </ul>
      </div>
      <div class="card p-5 p-4-mobile">
        <div class="has-text-black has-text-weight-medium is-size-6 py-2">@model.name</div>
        <div class="py-6">@model.detail</div>
      </div>
    }
    else if(model != null)
    {
      <div class="card p-3 p-4-mobile">
        <ul class="columns is-variable is-2">
          <li class="column is-narrow">
            <a class="button p-5 has-text-dark is-size-5 is-white" href="/work/@PlanId/detail">
              TỔNG QUAN
            </a>
          </li>
          <li class="column is-narrow">
            <a class="button p-5 has-text-link is-size-5 has-text-weight-semibold is_bg" href="/work/@PlanId/task">
              CÔNG VIỆC
            </a>
          </li>
          <li class="column is-narrow">
            <a class="button p-5 has-text-dark is-size-5 is-white" href="/work/@PlanId/chart">
              THỐNG KÊ
            </a>
          </li>
        </ul>
      </div>

      <div class="card px-5 pt-5 pb-3 p-4-mobile mt-4">
        <ul class="columns is-vcentered is-variable is-2 mb-3">
          <li class="column">
            <h1 class="title is-5 has-text-info is-uppercase">Danh sách công việc</h1>
          </li>
          <li class="column is-narrow">
            <a class="has-text-@(TypeView == "list" ? "link" : "grey")" href="/work/@PlanId/task/list">
              Chế độ danh sách
            </a>
          </li>
          <li class="column is-narrow">
            <a class="has-text-@(TypeView == "board" ? "link" : "grey") "href="/work/@PlanId/task/board">
              Chế độ Board
            </a>
          </li>
          <li class="column is-narrow">
            <a class="has-text-@(TypeView == "gantt" ? "link" : "grey") "href="/work/@PlanId/task/gantt">
              Chế độ Gantt
            </a>
          </li>
        </ul>

        <ul class="columns is-vcentered mb-3">
          <li class="column">
            @if(editRole)
            {
              <div class="field has-addons">
                <div class="control">
                  <a class="button is-link is-small" @onclick="() => EditTask(null, null)">
                    <span class="icon">
                      <i class="material-icons-outlined is-size-6">add</i>
                    </span>
                    <span>Tạo công việc</span>
                  </a>
                </div>
                <div class="control">
                  <div class="dropdown is-hoverable is-right">
                    <div class="dropdown-trigger">
                      <a class="button is-link is-small is-outlined">
                        <span class="icon">
                          <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                        </span>
                      </a>
                    </div>
                    <div class="dropdown-menu is-size-7">
                      <div class="dropdown-content">
                        <a class="dropdown-item" @onclick="() => EditSection(null)">Tạo nhóm công việc</a>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            }
            else if(WorkService.RoleInPlan(model, Layout.User.id) > 0)
            {
              <a class="button is-link is-small" @onclick="() => EditTask(null, null)">
                <span class="icon">
                  <i class="material-icons-outlined is-size-6">add</i>
                </span>
                <span>Tạo công việc</span>
              </a>
            }
          </li>
          <li class="column is-narrow">
            <div class="dropdown is-hoverable is-right is-size-7">
              <div class="dropdown-trigger">
                <a class="icon-text">
                  <span>
                    @(filterStatus != 0 ? WorkService.Status(filterStatus).name : "Trạng thái")      
                  </span>
                  <span class="icon">
                    <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                  </span>
                </a>
              </div>
              <div class="dropdown-menu">
                <div class="dropdown-content">
                  <a class="dropdown-item" @onclick="() => FilterStatus(0)">Tất cả</a>
                  @foreach (var item in WorkService.Status())
                  {
                    <a class="dropdown-item" @onclick="() => FilterStatus(item.id)">@item.name</a>
                  }
                </div>
              </div>
            </div>
          </li>
          <li class="column is-narrow">
            <div class="dropdown is-hoverable is-right is-size-7">
              <div class="dropdown-trigger">
                <a class="icon-text">
                  <span>
                    @(filterPriority != 0 ? WorkService.Priority(filterPriority).name : "Độ ưu tiên")      
                  </span>
                  <span class="icon">
                    <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                  </span>
                </a>
              </div>
              <div class="dropdown-menu">
                <div class="dropdown-content">
                  <a class="dropdown-item" @onclick="() => FilterPriority(0)">Tất cả</a>
                  @foreach (var item in WorkService.Priority())
                  {
                    <a class="dropdown-item" style="color: @item.color;" @onclick="() => FilterPriority(item.id)">@item.name</a>
                  }
                </div>
              </div>
            </div>
          </li>
          <li class="column is-narrow">
            <div class="dropdown is-hoverable is-right is-size-7">
              <div class="dropdown-trigger">
                <a class="icon-text">
                  <span>Nhãn dán</span>
                  <span class="icon">
                    <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                  </span>
                </a>
              </div>
              <div class="dropdown-menu">
                <div class="dropdown-content">
                  <a class="dropdown-item" @onclick="() => FilterLabel(null)">Tất cả</a>
                  @foreach (var item in model.labels)
                  {
                    <div class="dropdown-item">
                      <a class="tag @(filterLabel == item.id ? "has-text-weight-bold" : "")"
                        style="background: @(item.color + "30"); color: @item.color;" @onclick="() => FilterLabel(item.id)">
                        @item.name
                      </a>
                    </div>
                  }
                </div>
              </div>
            </div>
          </li>
          <li class="column is-narrow">
            <div class="dropdown is-hoverable is-right is-size-7">
              <div class="dropdown-trigger">
                <a class="icon-text">
                  <span>Sắp xếp theo</span>
                  <span class="icon">
                    <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                  </span>
                </a>
              </div>
              <div class="dropdown-menu">
                <div class="dropdown-content">
                  <a class="dropdown-item @(!orderByDesc ? "has-text-weight-bold" : "")" @onclick="() => OrderBy(false)">
                    Ngày kết thúc tăng dần
                  </a>
                  <a class="dropdown-item @(orderByDesc ? "has-text-weight-bold" : "")" @onclick="() => OrderBy(true)">
                    Ngày kết thúc giảm dần
                  </a>
                </div>
              </div>
            </div>
          </li>
          <li class="column is-one-fifth">
            <div class="control has-icons-right">
              <input @bind="filterKey" class="input is-small is-rounded" type="text" 
                placeholder="Tiêu đề công việc..." @onkeydown="FilterKey">
              <span class="icon is-right is-small">
                <i class="material-icons-outlined is-size-5">search</i>
              </span>
            </div>
          </li>
        </ul>

        @if(TypeView == "list")
        {
          <ul class="task_list columns is-gapless is-size-7 has-text-grey">
            <li class="column" style="width: calc(100% - 630px);">Công việc</li>
            <li class="column is-narrow" style="width: 130px;">Thời hạn</li>
            <li class="column is-narrow" style="width: 250px;">Nhãn công việc</li>
            <li class="column is-narrow" style="width: 110px;">Thành viên</li>
            <li class="column is-narrow" style="width: 80px;">Trạng thái</li>
            <li class="column is-narrow" style="width: 30px;"></li>
          </ul>

          @foreach (var item in model.sections)
          {
            var hidden = hideSections.Contains(item.id);
            var tasks = taskGroups.ContainsKey(item.id) ? taskGroups[item.id] : new();
            var count = tasks.Where(x => !string.IsNullOrEmpty(x.id)).Count();

            <ul class="task_list columns is-gapless is-size-7">
              <li class="column is-full">
                @if(editSectionId == item.id)
                {
                  <div class="control has-icons-left ">
                    <input @bind="item.name" id="section_@item.id"  type="text" 
                      class="input has-text-weight-semibold font_14 is_bg" placeholder="Nhập tiêu đề nhóm công việc...">
                    <a class="icon is-left has-text-success" title="Cập nhật" @onclick="UpdateSection">
                      <i class="material-icons-outlined is-size-5">done</i>
                    </a>
                  </div>
                }
                else
                {
                  <div class="icon-text">
                    <a class="icon is-small has-text-dark mr-2" @onclick="() => ToggleSection(item.id)">
                      <i class="material-icons-outlined is-size-5">@(hidden ? "arrow_right" : "arrow_drop_down")</i>
                    </a>
                    <span class="has-text-weight-semibold font_14">
                      @item.name @(count > 0 ? $"({count})" : "")
                    </span>
                    <a class="icon has-text-dark is_hover" title="Thêm công việc" @onclick="() => EditTask(null, item.id)">
                      <i class="material-icons-round is-size-6">add</i>
                    </a>
                    @if(editRole)
                    {
                      <div class="dropdown is-hoverable is-right icon is_hover">
                        <div class="dropdown-trigger">
                          <a class="icon has-text-dark">
                            <i class="material-icons-outlined is-size-6">more_horiz</i>
                          </a>
                        </div>
                        <div class="dropdown-menu">
                          <div class="dropdown-content">
                            <a class="dropdown-item icon-text" @onclick="() => MoveSection(item, true)">
                              <span class="icon">
                                <i class="material-icons-outlined is-size-6">arrow_upward</i>
                              </span>
                              <span>Lên trên</span>
                            </a>
                            <a class="dropdown-item icon-text" @onclick="() => MoveSection(item, false)">
                              <span class="icon">
                                <i class="material-icons-outlined is-size-6">arrow_downward</i>
                              </span>
                              <span>Xuống dưới</span>
                            </a>
                            <a class="dropdown-item icon-text" @onclick="() => EditSection(item)">
                              <span class="icon">
                                <i class="material-icons-outlined is-size-6">edit</i>
                              </span>
                              <span>Chỉnh sửa</span>
                            </a>
                            <a class="dropdown-item icon-text has-text-danger" @onclick="() => DeleteSection(item)">
                              <span class="icon">
                                <i class="material-icons-outlined is-size-6">delete</i>
                              </span>
                              <span>Xóa</span>
                            </a>
                          </div>
                        </div>
                      </div>
                    }
                  </div>
                }
              </li>
            </ul>
            
            @if(!hidden)
            {
              <Dropzone Items="tasks" TItem="WorkPlanModel.Task" Class="drop_task_list" 
                AllowsDrag="x => x.id != null" OnItemDrop="x => OnItemDragdrop(x)">
                @if(context.id == null)
                {
                  <div class="pl-4 py-1">
                    <a class="icon-text has-text-link" @onclick="() => EditTask(null, item.id)">
                      <span class="icon">
                        <i class="material-icons-outlined is-size-6">add</i>
                      </span>
                      <span class="is-size-7">Thêm công việc</span>
                    </a>
                  </div>
                }
                else
                {
                  var editTask = WorkService.RoleEditTask(model, context, Layout.User.id);
                  <_TaskListItem model="context" plan="model" editRole="editTask"
                    members="members" toggleList="toggleList" OnToggle="OnToggle"
                    OnEdit="OnEditList" OnUpdate="OnUpdateList" OnAddSub="OnAddSub" OnTodolist="OnTodolist" />
                }
              </Dropzone>
            }
          }
        }
        else if(TypeView == "board")
        {
          <div class="scrollx">
            <ul class="columns is-gapless">
              @foreach (var item in model.sections)
              {
                var tasks = taskGroups.ContainsKey(item.id) ? taskGroups[item.id] : new();
                var count = tasks.Where(x => !string.IsNullOrEmpty(x.id)).Count();

                <li class="column is-narrow mr-3" style="width: 350px;">
                  @if(editSectionId == item.id)
                  {
                    <div class="control has-icons-left ">
                      <input @bind="item.name" id="section_@item.id"  type="text" 
                        class="input has-text-weight-semibold font_14 is_bg" placeholder="Nhập tiêu đề nhóm công việc...">
                      <a class="icon is-left has-text-success" title="Cập nhật" @onclick="UpdateSection">
                        <i class="material-icons-outlined is-size-5">done</i>
                      </a>
                    </div>
                  }
                  else
                  {
                    <div class="icon-text py-2 pl-2">
                      <span class="has-text-weight-semibold font_14">
                        @item.name @(count > 0 ? $"({count})" : "")
                      </span>
                      <a class="icon has-text-dark is_hover" title="Thêm công việc" @onclick="() => EditTask(null, item.id)">
                        <i class="material-icons-round is-size-6">add</i>
                      </a>
                      @if(editRole)
                      {
                        <div class="dropdown is-hoverable is-right icon is_hover">
                          <div class="dropdown-trigger">
                            <a class="icon has-text-dark">
                              <i class="material-icons-outlined is-size-6">more_horiz</i>
                            </a>
                          </div>
                          <div class="dropdown-menu is-size-7">
                            <div class="dropdown-content">
                              <a class="dropdown-item icon-text" @onclick="() => MoveSection(item, true)">
                                <span class="icon">
                                  <i class="material-icons-outlined is-size-6">arrow_back</i>
                                </span>
                                <span>Qua trái</span>
                              </a>
                              <a class="dropdown-item icon-text" @onclick="() => MoveSection(item, false)">
                                <span class="icon">
                                  <i class="material-icons-outlined is-size-6">arrow_forward</i>
                                </span>
                                <span>Qua phải</span>
                              </a>
                              <a class="dropdown-item icon-text" @onclick="() => EditSection(item)">
                                <span class="icon">
                                  <i class="material-icons-outlined is-size-6">edit</i>
                                </span>
                                <span>Chỉnh sửa</span>
                              </a>
                              <a class="dropdown-item icon-text has-text-danger" @onclick="() => DeleteSection(item)">
                                <span class="icon">
                                  <i class="material-icons-outlined is-size-6">delete</i>
                                </span>
                                <span>Xóa</span>
                              </a>
                            </div>
                          </div>
                        </div>
                      }
                    </div>
                  }
                  <div class="scrolly p-2" style="height: calc(100vh - 310px); background: #fbfbfb; border-radius: 5px;">
                    <Dropzone Items="tasks" TItem="WorkPlanModel.Task" Class="drop_task_board"
                      AllowsDrag="x => x.id != null" OnItemDrop="x => OnItemDragdrop(x)">
                      @if(context.id == null)
                      {
                        <div class="has-text-centered p-3">
                          <a class="icon-text has-text-link" @onclick="() => EditTask(null, item.id)">
                            <span class="icon">
                              <i class="material-icons-outlined is-size-6">add</i>
                            </span>
                            <span class="is-size-7">Thêm công việc</span>
                          </a>
                        </div>
                      }
                      else
                      {
                        var editTask = WorkService.RoleEditTask(model, context, Layout.User.id);
                        <_TaskCardItem model="context" plan="model" editRole="editTask"
                          members="members" toggleList="toggleList" OnToggle="OnToggle"
                          OnEdit="OnEditList" OnUpdate="OnUpdateList" OnAddSub="OnAddSub" OnTodolist="OnTodolist" />
                      }
                    </Dropzone>
                  </div>
                </li> 
              }
            </ul>
          </div>
        }
        else
        {
          var dayHtml = string.Empty;
          <div class="list_task_gantt is-size-7">
            <ul class="task_gantt is_header columns is-gapless is-vcentered">
              <li class="column is-narrow">
                Công việc
              </li>
              @for (int d = 0; d < dayTotal; d++)
              {
                var day = dayStart.AddDays(d);
                var today = day == DateTime.Today ? "is_today" : "";
                var sunday = day.DayOfWeek == DayOfWeek.Sunday ? "is_sun" : "";
                dayHtml += $"<li class=\"column is-narrow {today} {sunday}\"></li>";

                <li class="column is-narrow @today @sunday">
                  <span class="pl-1" style="color: #C0C6DC;">@day.ToString("ddd").Substring(0, 1)</span>
                  <span class="pr-1">@day.ToString("dd")</span>
                </li>
              }
            </ul>

            @foreach (var item in model.sections)
            {
              var hidden = hideSections.Contains(item.id);
              var tasks = taskGroups.ContainsKey(item.id) ? taskGroups[item.id] : new();
              var count = tasks.Where(x => !string.IsNullOrEmpty(x.id)).Count();
              
              <ul class="task_gantt columns is-gapless is-size-7">
                <li class="column is-narrow">
                  @if(editSectionId == item.id)
                  {
                    <div class="control has-icons-left" style="width: 100%;">
                      <input @bind="item.name" id="section_@item.id"  type="text" 
                        class="input is-small has-text-weight-semibold font_14 is_bg" placeholder="Nhập tiêu đề nhóm công việc...">
                      <a class="icon is-left has-text-success" title="Cập nhật" @onclick="UpdateSection">
                        <i class="material-icons-outlined is-size-5">done</i>
                      </a>
                    </div>
                  }
                  else
                  {
                    <div class="icon-text">
                      <a class="icon is-small has-text-dark mr-2" @onclick="() => ToggleSection(item.id)">
                        <i class="material-icons-outlined is-size-5">@(hidden ? "arrow_right" : "arrow_drop_down")</i>
                      </a>
                      <span class="has-text-weight-semibold font_14">
                        @item.name @(count > 0 ? $"({count})" : "")
                      </span>
                      <a class="icon has-text-dark is_hover" title="Thêm công việc" @onclick="() => EditTask(null, item.id)">
                        <i class="material-icons-round is-size-6">add</i>
                      </a>
                      @if(editRole)
                      {
                        <div class="dropdown is-hoverable is-right icon is_hover">
                          <div class="dropdown-trigger">
                            <a class="icon has-text-dark">
                              <i class="material-icons-outlined is-size-6">more_horiz</i>
                            </a>
                          </div>
                          <div class="dropdown-menu">
                            <div class="dropdown-content">
                              <a class="dropdown-item icon-text" @onclick="() => MoveSection(item, true)">
                                <span class="icon">
                                  <i class="material-icons-outlined is-size-6">arrow_upward</i>
                                </span>
                                <span>Lên trên</span>
                              </a>
                              <a class="dropdown-item icon-text" @onclick="() => MoveSection(item, false)">
                                <span class="icon">
                                  <i class="material-icons-outlined is-size-6">arrow_downward</i>
                                </span>
                                <span>Xuống dưới</span>
                              </a>
                              <a class="dropdown-item icon-text" @onclick="() => EditSection(item)">
                                <span class="icon">
                                  <i class="material-icons-outlined is-size-6">edit</i>
                                </span>
                                <span>Chỉnh sửa</span>
                              </a>
                              <a class="dropdown-item icon-text has-text-danger" @onclick="() => DeleteSection(item)">
                                <span class="icon">
                                  <i class="material-icons-outlined is-size-6">delete</i>
                                </span>
                                <span>Xóa</span>
                              </a>
                            </div>
                          </div>
                        </div>
                      }
                    </div>
                  }
                </li>
                @for (int d = 0; d < dayTotal; d++)
                {
                  var day = dayStart.AddDays(d);
                  var today = day == DateTime.Today ? "is_today" : "";
                  var sunday = day.DayOfWeek == DayOfWeek.Sunday ? "is_sun" : "";

                  <li class="column is-narrow @today @sunday"></li>
                }
              </ul>

              @if(!hidden)
              {
                <Dropzone Items="tasks" TItem="WorkPlanModel.Task" Class="drop_task_list" 
                  AllowsDrag="x => x.id != null" OnItemDrop="x => OnItemDragdrop(x)">
                  @if(context.id == null)
                  {
                    <ul class="task_gantt columns is-gapless is-size-7">
                      <li class="column is-narrow">
                        <div class="pl-4 py-1">
                          <a class="icon-text has-text-link" @onclick="() => EditTask(null, item.id)">
                            <span class="icon">
                              <i class="material-icons-outlined is-size-6">add</i>
                            </span>
                            <span class="is-size-7">Thêm công việc</span>
                          </a>
                        </div>
                      </li>
                      @((MarkupString)dayHtml)
                    </ul>
                  }
                  else
                  {
                    var editTask = WorkService.RoleEditTask(model, context, Layout.User.id);
                    <_TaskGanttItem model="context" plan="model" editRole="editTask"
                      members="members" toggleList="toggleList" OnToggle="OnToggle"
                      dayStart="dayStart" dayTotal="dayTotal" dayHtml="@dayHtml"
                      OnEdit="OnEditList" OnUpdate="OnUpdateList" OnAddSub="OnAddSub" OnTodolist="OnTodolist" />
                  }
                </Dropzone>
              }
            }

            <ul class="task_gantt is_footer columns is-gapless is-vcentered">
              <li class="column is-narrow"></li>
              @((MarkupString)dayHtml)
            </ul>
          </div>
        }
      </div>
    }
    else 
    {
      <div class="card p-6 has-text-centered">
        Không tìm thấy kế hoạch
      </div> 
    }
  </div>
</section>

<_TaskPopup plan="model" task="taskEdit" members="members" tab="taskEditTab" 
  subTasks="subTasks" todoItems="todoItems" OnUpdate="OnUpdateTask" />

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public string PlanId { get; set; }
  [Parameter]
  public string TypeView { get; set; }
  
  private WorkPlanModel model = new();
  private bool editRole = false;
  private Dictionary<string, List<WorkPlanModel.Task>> taskGroups = new();
  private List<WorkPlanModel.Task> taskList = new();
  private List<string> toggleList = new();
  private List<UserModel> members = new();
  private int dayTotal = 0;
  private DateTime dayStart = DateTime.Today;
  private DateTime dayEnd = DateTime.Today;

  protected override async Task OnParametersSetAsync()
  {
    model = await DbWorkPlan.Get(Layout.Company.id, PlanId);
    if(model != null)
    {
      if(WorkService.ViewInPlan(model, Layout.User.id))
      {
        // Chế độ xem
        if(string.IsNullOrEmpty(TypeView))
          TypeView = "list";
        // Quyền quản lý kế hoạch
        editRole = WorkService.RoleInPlan(model, Layout.User.id) == 1;
        // Danh sách thành viên
        members = GetMembers();
        // Lấy dữ liệu công việc
        await GetTaskList();
        // Cập nhật thống kê
        await DbWorkReport.Update(Layout.Company.id, PlanId);
      }
      else
      {
        model.id = string.Empty;
        model.detail = "Bạn không có quyền xem chi tiết kế hoạch này!";
      }
    }
  }

  private List<UserModel> GetMembers()
  {
    var listId = model.members.Select(x => x.id).ToList();
    return Layout.UserList.Where(x => listId.Contains(x.id)).ToList();
  }

  #region Bộ lọc và lấy dữ liệu
  
  private int filterStatus = 0;
  private int filterPriority = 0;
  private string filterLabel = string.Empty;
  private string filterKey = string.Empty;
  private bool orderByDesc = false;

  private async Task GetTaskList()
  {
    // Lấy danh sách công việc chính
    taskList = await DbWorkTask.GetListInPlan(Layout.Company.id, model.id);

    // Bộ lọc tìm kiếm
    FilterTaskList();

    // Chia nhóm công việc
    SplitTaskList();

    // Đóng tất cả công việc
    toggleList.Clear();
    
    // Lấy ngày thấp nhỏ nhất
    if(taskList.Count > 0)
    {
      long minDay = taskList.OrderBy(x => x.date_start).Select(x => x.date_start).FirstOrDefault();
      long maxDay = taskList.OrderByDescending(x => x.date_end).Select(x => x.date_end).FirstOrDefault();
      dayStart = new DateTime(minDay);
      dayEnd = new DateTime(maxDay);
      dayTotal = dayEnd.Subtract(dayStart).Days + 4;
    }
  }

  private void FilterTaskList()
  {
    if(filterStatus != 0)
      taskList = taskList.Where(x => x.status == filterStatus).ToList();
    if(filterPriority != 0)
      taskList = taskList.Where(x => x.priority == filterPriority).ToList();
    if(!string.IsNullOrEmpty(filterLabel))
      taskList = taskList.Where(x => x.labels.Contains(filterLabel)).ToList();
    if(!string.IsNullOrEmpty(filterKey))
      taskList = taskList.Where(x => Shared.SearchKeyword(filterKey, x.name)).ToList();
    if(orderByDesc)
      taskList = taskList.OrderByDescending(x => x.date_end).ToList();
    else
      taskList = taskList.OrderBy(x => x.date_end).ToList();
  }

  private void SplitTaskList()
  {
    taskGroups.Clear();
    foreach (var group in model.sections)
    {
      var tasks = taskList.Where(x => x.section_id == group.id).ToList();
      if(tasks.Count == 0)
        tasks = new() { new() { name = "Chưa có công việc", section_id = group.id }};
      taskGroups.Add(group.id, tasks);
    }
  }

  private async Task FilterStatus(int value)
  {
    filterStatus = value;
    await GetTaskList();
  }

  private async Task FilterPriority(int value)
  {
    filterPriority = value;
    await GetTaskList();
  }

  private async Task FilterLabel(string value)
  {
    filterLabel = value;
    await GetTaskList();
  }

  private async Task FilterKey(KeyboardEventArgs args)
  {
    if (args.Key == "Enter")
      await GetTaskList();
    else if(args.Key == "Escape")
    {
      filterKey = string.Empty;
      await GetTaskList();
    }
  }

  private async Task OrderBy(bool isDesc)
  {
    orderByDesc = isDesc;
    await GetTaskList();
  }

  #endregion

  #region Nhóm công việc

  private string editSectionId = string.Empty;
  private List<string> hideSections = new();
 
  private void ToggleSection(string id)
  {
    if(hideSections.Contains(id))
      hideSections.Remove(id);
    else
      hideSections.Add(id);
  }

  private async Task EditSection(WorkPlanModel.Section item)
  {
    if(string.IsNullOrEmpty(editSectionId))
    {
      if(item == null)
      {
        item = new() {
          id = Mongo.RandomId()
        };
        model.sections.Insert(0, item);
      }
      editSectionId = item.id;
      await JSRuntime.InvokeVoidAsync("setFocus", "section_" + item.id);
    }
    else
      await JSRuntime.InvokeVoidAsync("tagline", false, "Có nhóm công việc đang được chỉnh sửa!");
  }

  private async Task DeleteSection(WorkPlanModel.Section item)
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn đang thực hiện xóa nhóm công việc {item.name}. Việc này sẽ khiến dữ liệu công việc trong nhóm bị mất.\nBạn có chắc chắn muốn thực hiện?"))
      return;
    // Thông báo chuông
    foreach (var user in model.members)
        await DbNotify.ForPlan(Layout.Company.id, 704, model.id, item.id, user.id, Layout.User.id);
    // Hàm tự động xóa
    if(await WorkService.DeleteSection(Layout.Company.id, model.id, item.id))
    {
      model = await DbWorkPlan.Get(Layout.Company.id, PlanId);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa nhóm công việc thành công!");
      await WorkService.CreateLog(Layout.Company.id, "Xóa nhóm công việc", item.name, model.id, null, Layout.User);
      await GetTaskList();
    }
    else
      await JSRuntime.InvokeVoidAsync("tagline", false, "Không thành công, vui lòng thử lại!");
  }

  private async Task UpdateSection()
  {
    if(model.sections.Where(x => string.IsNullOrEmpty(x.name)).Count() == 0)
    {
      var item = model.sections.SingleOrDefault(x => x.id == editSectionId);
      if(item != null)
      {
        if(item.pos == 0)
        {
          item.pos = model.sections.Count;
          await DbWorkPlan.Update(Layout.Company.id, model);
          await JSRuntime.InvokeVoidAsync("tagline", true, "Đã thêm nhóm công việc!");
          await WorkService.CreateLog(Layout.Company.id, "Thêm nhóm công việc", item.name, model.id, null, Layout.User);
          // Thông báo chuông
          foreach (var user in model.members)
              await DbNotify.ForPlan(Layout.Company.id, 702, model.id, item.id, user.id, Layout.User.id);
        }
        else
        {
          await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cập nhật nhóm công việc!");
          await WorkService.CreateLog(Layout.Company.id, "Cập nhật nhóm công việc", item.name, model.id, null, Layout.User);
          // Thông báo chuông
          foreach (var user in model.members)
              await DbNotify.ForPlan(Layout.Company.id, 703, model.id, item.id, user.id, Layout.User.id);
          await DbWorkPlan.Update(Layout.Company.id, model);
        }
        editSectionId = string.Empty;
        SplitTaskList();
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Có lỗi khi cập nhật nhóm công việc!");
    }
    else
      await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa nhập tiêu đề nhóm công việc!");
  }
  
  private async Task MoveSection(WorkPlanModel.Section item, bool isUp)
  {
    if(isUp)
    {
      var move = model.sections.Where(x => x.pos > item.pos).OrderBy(x => x.pos).FirstOrDefault();
      if(move != null)
      {
        item.pos++;
        move.pos--;
        await DbWorkPlan.Update(Layout.Company.id, model);
        await JSRuntime.InvokeVoidAsync("tagline", true, $"Đã duy chuyển vị trí nhóm {item.name}!");
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Không thể duy chuyển vị trí nhóm!");
    }
    else
    {
      var move = model.sections.Where(x => x.pos < item.pos).OrderByDescending(x => x.pos).FirstOrDefault();
      if(move != null)
      {
        item.pos--;
        move.pos++;
        await DbWorkPlan.Update(Layout.Company.id, model);
        await JSRuntime.InvokeVoidAsync("tagline", true, $"Đã duy chuyển vị trí nhóm {item.name}!");
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Không thể duy chuyển vị trí nhóm!");
    }
  }
  
  #endregion
  
  
  #region Popup công việc chính

  private WorkPlanModel.Task taskEdit = null;
  private int taskEditTab = 1;

  private async Task EditTask(WorkPlanModel.Task item, string sectionId)
  {
    taskEditTab = 1;
    if(item == null)
    {
      taskEdit = new()
      {
        status = 1,
        plan_id = model.id,
        section_id = sectionId,
        labels = new(),
        members = new()
      };
      await JSRuntime.InvokeVoidAsync("setFocus", "task_name");
    }
    else
    {
      taskEdit = await DbWorkTask.Get(Layout.Company.id, item.id);
    }
  }

  private async Task OnUpdateTask(WorkPlanModel.Task item)
  {
    if(item != null)
      await GetTaskList();
    taskEdit = null;
  }

  #endregion


  #region Chức năng kéo thả công việc

  private async Task OnItemDragdrop(WorkPlanModel.Task item)
  {
    if(WorkService.RoleEditTask(model, item, Layout.User.id))
    {
      foreach (var group in taskGroups)
      {
        if(group.Value.Contains(item))
        {
          var section = model.sections.SingleOrDefault(x => x.id == item.section_id);
          item.section_id = group.Key;
          await DbWorkTask.Update(Layout.Company.id, item);
          await JSRuntime.InvokeVoidAsync("console.log", "Nhóm: " + section.name);
          await WorkService.CreateLog(Layout.Company.id, "Cập nhật nhóm công việc", section.name, item.plan_id, item.id, Layout.User);
          break;
        }
      }
    }
    else
      await JSRuntime.InvokeVoidAsync("tagline", false, "Không thể thay đổi nhóm, vì bạn không tham gia vào công việc này!");
    SplitTaskList();
    toggleList.Clear();
  }

  #endregion


  #region Xử lý trong danh sách công việc

  private void OnToggle(string id)
  {
    if (toggleList.Contains(id))
      toggleList.Remove(id);
    else
      toggleList.Add(id);
  }

  private async Task OnEditList(WorkPlanModel.Task item)
  {
    await EditTask(item, item.section_id);
  }

  private List<WorkPlanModel.Task> subTasks = new();
  private async Task OnAddSub(WorkPlanModel.Task item)
  {
    subTasks = await DbWorkTask.GetListInTask(Layout.Company.id, item.plan_id, item.id);
    await EditTask(item, item.section_id);
    taskEditTab = 2;
  }

  private List<TodolistModel.Todo> todoItems = new();
  private async Task OnTodolist(WorkPlanModel.Task item)
  {
    todoItems = DbTodoItem.GetList(Layout.Company.id, item.id, Layout.User.id);
    await EditTask(item, item.section_id);
    taskEditTab = 3;
  }

  private async Task OnUpdateList(WorkPlanModel.Task item)
  {
    await GetTaskList();
  }

  #endregion
}