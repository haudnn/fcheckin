@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

@{
  var status = WorkService.Status(model.status);
  var priority = WorkService.Priority(parent.priority);
  DateTimeOffset? dateS = new DateTime(model.date_start);
  DateTimeOffset? dateE = new DateTime(model.date_end);
}

<ul id="task_@model.id" class="task_list is_sub columns is-gapless is-size-7">
  <li class="column" style="width: calc(100% - 630px); box-shadow: inset 4px 0px 0px 0px @priority.color;">
    <div class="icon-text item_title pl-0">
      <span class="item_name">@model.name</span>
    </div>
  </li>
  <li class="column is-narrow" style="width: 130px;">
    <DateRangePicker @bind-StartDate="dateS" @bind-EndDate="dateE" OnRangeSelect="UpdateDate"
      MinDate="new DateTime(parent.date_start)" MaxDate="new DateTime(parent.date_end)">
      <PickerTemplate>
        <a id="@context.Id" @onclick="context.Toggle" class="icon-text">
          <span class="icon is-small mr-1">
            <i class="material-icons-outlined is-size-6">calendar_today</i>
          </span>
          @if (context.TStartDate != null && context.TEndDate != null)
          {
            <span>@context.TStartDate.Value.ToString("dd/MM")</span>
            <span class="mx-1">-</span>
            <span>@context.TEndDate.Value.ToString("dd/MM")</span>
          }
        </a>
      </PickerTemplate>
    </DateRangePicker>
  </li>
  <li class="column is-narrow" style="width: 250px;">
    
  </li>
  <li class="column is-narrow" style="width: 110px;">
    <_MemberList members="model.members" sources="members" isEdit="isEdit" isTask="true" isSubTask="true"
      OnUpdate="UpdateMembers" />
  </li>
  <li class="column is-narrow" style="width: 80px;">
    <div class="dropdown is-fullwidth @(toggleStatus ? "is-active" : "")">
      <div class="dropdown-trigger">
        <a class="icon-text is-fullwidth pr-2" @onclick="ToggleStatus">
          <span style="flex-grow: 1;">@status.name</span>
          <span class="icon is-small">
            <i class="material-icons-outlined is-size-6">arrow_drop_down</i>
          </span>
        </a>
      </div>
      @if(isEdit)
      {
        <div class="dropdown-menu">
          <div class="dropdown-content">
            @foreach (var item in WorkService.StatusSub())
            {
              <a class="dropdown-item" @onclick="() => ChangeStatus(item.id)">@item.name</a>
            }
          </div>
        </div>
      }
    </div>
  </li>
  <li class="column is-narrow has-text-centered" style="width: 30px;">
    @if(isEdit)
    {
      <div class="dropdown is-hoverable is-right">
        <div class="dropdown-trigger">
          <span class="icon">
            <i class="material-icons-outlined is-size-6">more_horiz</i>
          </span>
        </div>
        <div class="dropdown-menu">
          <div class="dropdown-content">
            <a class="dropdown-item has-text-danger" @onclick="Delete">Xóa việc phụ này</a>
          </div>
        </div>
      </div>
    }
  </li>
</ul>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public WorkPlanModel.Task model { get; set; }
  [Parameter]
  public WorkPlanModel.Task parent { get; set; }
  [Parameter]
  public List<UserModel> members { get; set; }
  [Parameter]
  public bool isEdit { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnUpdate { get; set; }  

  private bool toggleStatus = false;
  
  private async Task ToggleStatus()
  {
    await JSRuntime.InvokeVoidAsync("dropdownClose");
    toggleStatus = !toggleStatus;
  }

  private async Task Delete()
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn đang thực hiện xóa \"{model.name}\".\nBạn có chắc chắn muốn thực hiện?"))
      return;
    await DbWorkTask.Delete(Layout.Company.id, model.id);
    await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa công việc phụ thành công!");
    await WorkService.CreateLog(Layout.Company.id, "Xóa công việc phụ", model.name, parent.plan_id, parent.id, Layout.User);
    await OnUpdate.InvokeAsync(model);
  }

  private async Task UpdateDate(DateRange range)
  {
    model.date_start = range.Start.Ticks;
    model.date_end = range.End.Ticks;
    await DbWorkTask.Update(Layout.Company.id, model);
  }

  private async Task ChangeStatus(int id)
  {
    toggleStatus = false;
    model.status = id;
    await DbWorkTask.Update(Layout.Company.id, model);
    await OnUpdate.InvokeAsync(model);
  }

  private async Task UpdateLabels()
  {
    await DbWorkTask.Update(Layout.Company.id, model);
  }

  private async Task UpdateMembers()
  {
    var old = await DbWorkTask.Get(Layout.Company.id, model.id);
    await DbWorkTask.Update(Layout.Company.id, model);
    // Lưu lịch sử
    await WorkService.LogTaskMembers(Layout.Company.id, old, model, Layout.User, Layout.UserList);
  }
}