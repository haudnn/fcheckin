@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

@{
  var toggle = toggleList.Contains(model.id);
  var status = WorkService.Status(model.status);
  var priority = WorkService.Priority(model.priority);
  var deadline = WorkService.TaskDeadline(model);
  DateTimeOffset? dateS = new DateTime(model.date_start);
  DateTimeOffset? dateE = new DateTime(model.date_end);
}

<ul id="task_@model.id" class="task_list is_item columns is-gapless is-size-7">
  <li class="column" style="width: calc(100% - 630px); box-shadow: inset 4px 0px 0px 0px @priority.color;">
    <div class="icon-text item_title">
      <span class="icon is_drag">
        <i class="material-icons-outlined is-size-6">drag_indicator</i>
      </span>
      @if(model.sub_task > 0)
      {
        <a class="icon" @onclick="Toggle">
          <i class="material-icons-outlined is-size-5">@(toggle ? "arrow_drop_down" : "arrow_right")</i>
        </a>
      }
      else 
      {
        <span class="icon"></span>
      }
      <a class="item_name has-text-@(model.status == 4 ? "success is-line-through " : "black")"
        @onclick="Edit" title="@model.name">
        @model.name
      </a>
      @if(deadline != null)
      {
        <span class="tag" style="background: @(deadline.color + "30"); color: #555; overflow: visible;">
          @deadline.name
        </span>
      }
      <span class="icon is_hover">
        @if(editRole)
        {
          <a class="material-icons-round is-size-6 has-text-dark" title="Thêm công việc phụ" @onclick="AddSub">
            add
          </a>
        }
      </span>
    </div>
  </li>
  <li class="column is-narrow" style="width: 130px;">
    <DateRangePicker @bind-StartDate="dateS" @bind-EndDate="dateE" Drops="DropsType.Down"
      TimePicker="true" TimePicker24Hour="true" OnRangeSelect="UpdateDate">
      <PickerTemplate>
        <a id="@context.Id" @onclick="context.Toggle" class="icon-text">
          <span class="icon is-small mr-1">
            <i class="material-icons-outlined is-size-6">calendar_today</i>
          </span>
          @if (context.TStartDate != null && context.TEndDate != null)
          {
            <span>@context.TStartDate.Value.ToString("dd/MM")</span>
            <span class="px-1">-</span>
            <span>@context.TEndDate.Value.ToString("dd/MM")</span>
          }
        </a>
      </PickerTemplate>
    </DateRangePicker>
  </li>
  <li class="column is-narrow" style="width: 130px;">
    @if(priority.id != 0)
    {
      if(editRole)
      {
        <div class="dropdown @(togglePriority ? "is-active" : "")">
          <div class="dropdown-trigger">
            <a class="icon-text" @onclick="TogglePriority">
              <span class="tag" style="background: @(priority.color + "30"); color: @priority.color;">@priority.name</span>
              <span class="icon is-small">
                <i class="material-icons-outlined is-size-6">arrow_drop_down</i>
              </span>
            </a>
          </div>
          <div class="dropdown-menu">
            <div class="dropdown-content">
              @foreach (var item in WorkService.Priority())
              {
                <a class="dropdown-item" style="color: @item.color;" @onclick="() => ChangePriorty(item.id)">@item.name</a>
              }
            </div>
          </div>
        </div>
      }
      else
      {
        <span class="tag" style="background: @(priority.color + "30"); color: @priority.color;">@priority.name</span>
      }
    }
  </li>
  <li class="column is-narrow" style="width: 110px;">
    <_MemberList members="model.members" sources="members" isEdit="editRole" isTask="true" 
      OnUpdate="UpdateMembers" />
  </li>
  <li class="column is-narrow" style="width: 80px;">
    @if(editRole)
    {
      <div class="dropdown @(toggleStatus ? "is-active" : "")">
        <div class="dropdown-trigger">
          <a class="icon-text" @onclick="ToggleStatus">
            <span class="tag @status.color" style="width: 58px;">@status.name</span>
            <span class="icon is-small">
              <i class="material-icons-outlined is-size-6">arrow_drop_down</i>
            </span>
          </a>
        </div>
        <div class="dropdown-menu">
          <div class="dropdown-content">
            @foreach (var item in WorkService.Status())
            {
              <a class="dropdown-item" @onclick="() => ChangeStatus(item.id)">@item.name</a>
            }
          </div>
        </div>
      </div>
    }
    else
    {
      <span class="tag @status.color" style="width: 58px;">@status.name</span>
    }
  </li>
  <li class="column is-narrow has-text-centered" style="width: 30px;">
    @if(editRole)
    {
      <div class="dropdown is-hoverable is-right">
        <div class="dropdown-trigger">
          <span class="icon">
            <i class="material-icons-outlined is-size-6">more_horiz</i>
          </span>
        </div>
        <div class="dropdown-menu">
          <div class="dropdown-content">
            <a class="dropdown-item" @onclick="AddSub">Tạo công việc phụ</a>
            <a class="dropdown-item" @onclick="AddTodo">Tạo Todolist liên kết</a>
            <a class="dropdown-item has-text-danger" @onclick="Delete">Xóa công việc này</a>
          </div>
        </div>
      </div>
    }
  </li>
</ul>

@if(toggle)
{
  foreach (var child in subTasks)
  {
    <_TaskListChild model="child" parent="model" members="members" isEdit="editRole"
      OnUpdate="UpdateSubTasks" OnView="AddSub" />
  }
  if(subTasks.Count == 0)
  {
    <ul class="task_list is_sub columns is-gapless is-size-7">
      <li class="column is-full" style="box-shadow: inset 4px 0px 0px 0px @priority.color;">
        <i class="has-text-grey">Không có công việc phụ</i>
      </li>
    </ul> 
  }
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public WorkPlanModel.Task model { get; set; }
  [Parameter]
  public WorkPlanModel plan { get; set; }
  [Parameter]
  public List<UserModel> members { get; set; }
  [Parameter]
  public bool editRole { get; set; }
  [Parameter]
  public bool showPlan { get; set; }
  [Parameter]
  public List<string> toggleList { get; set; }
  [Parameter]
  public EventCallback<string> OnToggle { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnEdit { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnUpdate { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnAddSub { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnTodolist { get; set; }

  private bool togglePriority = false;
  private bool toggleStatus = false;
  private List<WorkPlanModel.Task> subTasks = new();

  private async Task Toggle()
  {
    if(toggleList.Contains(model.id))
      subTasks = new();
    else
      subTasks = await DbWorkTask.GetListInTask(Layout.Company.id, model.plan_id, model.id);
    await OnToggle.InvokeAsync(model.id);
  }
  
  private async Task TogglePriority()
  {
    await JSRuntime.InvokeVoidAsync("dropdownClose");
    togglePriority = !togglePriority;
  }
  
  private async Task ToggleStatus()
  {
    await JSRuntime.InvokeVoidAsync("dropdownClose");
    toggleStatus = !toggleStatus;
  }

  private async Task Edit()
  {
    await OnEdit.InvokeAsync(model);
  }

  private async Task AddSub()
  {
    await OnAddSub.InvokeAsync(model);
  }

  private async Task AddTodo()
  {
    await OnTodolist.InvokeAsync(model);
  }

  private async Task Delete()
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn đang thực hiện xóa \"{model.name}\". Việc này sẽ khiến dữ liệu công việc phụ bị mất.\nBạn có chắc chắn muốn thực hiện?"))
      return;
    // Thông báo chuông
    foreach (var user in plan.members)
      await DbNotify.ForPlan(Layout.Company.id, 717, plan.id, model.id, user.id, Layout.User.id);
    // Xóa công việc
    await DbWorkTask.Delete(Layout.Company.id, model.id);
    await WorkService.CreateLog(Layout.Company.id, "Xóa công việc", model.name, model.plan_id, null, Layout.User);
    await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa công việc thành công!");
    await OnUpdate.InvokeAsync(model);
  }

  private async Task UpdateDate(DateRange range)
  {
    model.date_start = range.Start.Ticks;
    model.date_end = range.End.Ticks;
    await DbWorkTask.Update(Layout.Company.id, model);
    await WorkService.CreateLog(Layout.Company.id, "Cập nhật thời gian thực hiện", 
      string.Format("Bắt đầu {0:dd/MM/yyyy}, kết thúc {1:dd/MM/yyyy}", new DateTime(model.date_start), new DateTime(model.date_end)), model.plan_id, model.id, Layout.User);
    await OnUpdate.InvokeAsync(model);
  }
  
  private async Task ChangePriorty(int id)
  {
    togglePriority = false;
    model.priority = id;
    await DbWorkTask.Update(Layout.Company.id, model);
    await WorkService.CreateLog(Layout.Company.id, "Cập nhật mức độ ưu tiên", 
      WorkService.Priority(model.priority).name, model.plan_id, model.id, Layout.User);
    await OnUpdate.InvokeAsync(model);
  }

  private async Task ChangeStatus(int statusId)
  {
    toggleStatus = false;
    var message = await WorkService.ChangeTaskStatus(Layout.Company.id, Layout.User, model, statusId);
    if(statusId == 4)
      subTasks = await DbWorkTask.GetListInTask(Layout.Company.id, model.plan_id, model.id);
    await JSRuntime.InvokeVoidAsync("tagline", true, message);
    await OnUpdate.InvokeAsync(model);
  }

  private async Task UpdateMembers()
  {
    var old = await DbWorkTask.Get(Layout.Company.id, model.id);
    await DbWorkTask.Update(Layout.Company.id, model);
    await WorkService.LogTaskMembers(Layout.Company.id, old, model, Layout.User, Layout.UserList);
    await OnUpdate.InvokeAsync(model);
  }

  private async Task UpdateSubTasks(WorkPlanModel.Task item)
  {
    subTasks = await DbWorkTask.GetListInTask(Layout.Company.id, model.plan_id, model.id);
    // Cập nhật số lượng công việc phụ
    await WorkService.UpdateSubTaskCount(Layout.Company.id, model.id, subTasks.Count);
  }
}
