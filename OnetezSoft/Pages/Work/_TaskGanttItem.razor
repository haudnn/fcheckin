@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

@{
  var toggle = toggleList.Contains(model.id);
  var status = WorkService.Status(model.status);
  var priority = WorkService.Priority(model.priority);
  var dateS = new DateTime(model.date_start);
  var dateE = new DateTime(model.date_end);
}

<ul id="task_@model.id" class="task_gantt is_item columns is-gapless is-size-7">
  <li class="column is-narrow" style="box-shadow: inset 4px 0px 0px 0px @priority.color;">
    <div class="icon-text item_title">
      <span class="icon is_drag">
        <i class="material-icons-outlined is-size-6">drag_indicator</i>
      </span>
      @if(model.sub_task > 0)
      {
        <a class="icon" @onclick="Toggle">
          <i class="material-icons-outlined is-size-5">@(toggle ? "arrow_drop_down" : "arrow_right")</i>
        </a>
      }
      else 
      {
        <span class="icon has-text-grey-light">
          <i class="material-icons-outlined is-size-5">arrow_right</i>
        </span>
      }
      <a class="item_name" @onclick="Edit">
        @model.name
      </a>
      @if(editRole)
      {
        <div class="dropdown is-hoverable is-right icon is_hover">
          <div class="dropdown-trigger">
            <span class="icon">
              <i class="material-icons-outlined is-size-6">more_horiz</i>
            </span>
          </div>
          <div class="dropdown-menu">
            <div class="dropdown-content">
              <a class="dropdown-item" @onclick="AddSub">Tạo công việc phụ</a>
              <a class="dropdown-item" @onclick="AddTodo">Tạo Todolist liên kết</a>
              <a class="dropdown-item has-text-danger" @onclick="Delete">Xóa công việc này</a>
            </div>
          </div>
        </div>
      }
    </div>
  </li>
  
  @for (int d = 0; d < dayTotal; d++)
  {
    var day = dayStart.AddDays(d);
    var today = day == DateTime.Today ? "is_today" : "";
    var sunday = day.DayOfWeek == DayOfWeek.Sunday ? "is_sun" : "";
    var column = dateE.Subtract(dateS).Days + 1;
    <li class="column is-narrow item_day @today @sunday">
      @if(dateS == day)
      {
        <div class="is_timeline" style="width: @(column * 40)px">
          <a class="item_task" @onclick="Edit"></a>
          <div class="item_members">
            <_MemberList members="model.members" sources="members" isEdit="editRole" isTask="true" isRight="true"
              OnUpdate="UpdateMembers" />
          </div>
        </div>
      }
    </li>
  }
</ul>

@if(toggle)
{
  if(showPlan && plan != null)
  {
    <ul class="task_gantt is_plan columns is-gapless is-size-7">
      <li class="column is-narrow" style="box-shadow: inset 4px 0px 0px 0px @priority.color;">
        <a class="icon-text has-text-link">
          <span class="icon is-small mr-2">
            <i class="material-icons-outlined is-size-6">link</i>
          </span>
          <span>Kế hoạch: @plan.name</span>
        </a>
      </li>
      @((MarkupString)dayHtml)
    </ul>
  }
  foreach (var child in subTasks)
  {
    <_TaskGanttChild model="child" parent="model" members="members" isEdit="editRole"
      dayStart="dayStart" dayTotal="dayTotal" OnUpdate="UpdateSubTasks" />
  }
  if(subTasks.Count == 0)
  {
    <ul class="task_gantt is_sub columns is-gapless is-size-7">
      <li class="column is-narrow" style="box-shadow: inset 4px 0px 0px 0px @priority.color;">
        <i class="has-text-grey">Không có công việc phụ</i>
      </li>
      @((MarkupString)dayHtml)
    </ul> 
  }
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public WorkPlanModel.Task model { get; set; }
  [Parameter]
  public WorkPlanModel plan { get; set; }
  [Parameter]
  public List<UserModel> members { get; set; }
  [Parameter]
  public DateTime dayStart { get; set; }
  [Parameter]
  public int dayTotal { get; set; }
  [Parameter]
  public string dayHtml { get; set;}
  [Parameter]
  public bool editRole { get; set; }
  [Parameter]
  public bool showPlan { get; set; }
  [Parameter]
  public List<string> toggleList { get; set; }
  [Parameter]
  public EventCallback<string> OnToggle { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnEdit { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnUpdate { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnAddSub { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnTodolist { get; set; }

  private bool toggleStatus = false;
  private List<WorkPlanModel.Task> subTasks = new();

  private async Task Toggle()
  {
    if(toggleList.Contains(model.id))
      subTasks = new();
    else
      subTasks = await DbWorkTask.GetListInTask(Layout.Company.id, model.plan_id, model.id);
    await OnToggle.InvokeAsync(model.id);
  }
  
  private async Task ToggleStatus()
  {
    await JSRuntime.InvokeVoidAsync("dropdownClose");
    toggleStatus = !toggleStatus;
  }

  private async Task Edit()
  {
    await OnEdit.InvokeAsync(model);
  }

  private async Task AddSub()
  {
    await OnAddSub.InvokeAsync(model);
  }

  private async Task AddTodo()
  {
    await OnTodolist.InvokeAsync(model);
  }

  private async Task Delete()
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn đang thực hiện xóa \"{model.name}\". Việc này sẽ khiến dữ liệu công việc phụ bị mất.\nBạn có chắc chắn muốn thực hiện?"))
      return;
    // Thông báo chuông
    foreach (var user in plan.members)
      await DbNotify.ForPlan(Layout.Company.id, 717, plan.id, model.id, user.id, Layout.User.id);
    // Xóa công việc
    await DbWorkTask.Delete(Layout.Company.id, model.id);
    await WorkService.CreateLog(Layout.Company.id, "Xóa công việc", model.name, model.plan_id, null, Layout.User);
    await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa công việc thành công!");
    await OnUpdate.InvokeAsync(model);
  }

  private async Task UpdateDate(DateRange range)
  {
    model.date_start = range.Start.Ticks;
    model.date_end = range.End.Ticks;
    await DbWorkTask.Update(Layout.Company.id, model);
    await WorkService.CreateLog(Layout.Company.id, "Cập nhật thời gian thực hiện", 
      string.Format("Bắt đầu {0:dd/MM/yyyy}, kết thúc {1:dd/MM/yyyy}", new DateTime(model.date_start), new DateTime(model.date_end)), model.plan_id, model.id, Layout.User);
  }

  private async Task ChangeStatus(int statusId)
  {
    toggleStatus = false;
    var message = await WorkService.ChangeTaskStatus(Layout.Company.id, Layout.User, model, statusId);
    await JSRuntime.InvokeVoidAsync("tagline", true, message);
    if(showPlan) await OnUpdate.InvokeAsync(model);
  }

  private async Task UpdateMembers()
  {
    var old = await DbWorkTask.Get(Layout.Company.id, model.id);
    await DbWorkTask.Update(Layout.Company.id, model);
    await WorkService.LogTaskMembers(Layout.Company.id, old, model, Layout.User, Layout.UserList);
  }

  private async Task UpdateLabels()
  {
    await DbWorkTask.Update(Layout.Company.id, model);
  }

  private async Task UpdateSubTasks(WorkPlanModel.Task item)
  {
    subTasks = await DbWorkTask.GetListInTask(Layout.Company.id, model.plan_id, model.id);
    // Cập nhật số lượng công việc phụ
    await WorkService.UpdateSubTaskCount(Layout.Company.id, model.id, subTasks.Count);
  }
}
