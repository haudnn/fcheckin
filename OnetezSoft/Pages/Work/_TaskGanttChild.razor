
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

@{
  var status = WorkService.Status(model.status);
  var priority = WorkService.Priority(parent.priority);
  var dateS = new DateTime(model.date_start);
  var dateE = new DateTime(model.date_end);
}

<ul id="task_@model.id" class="task_gantt is_item is_sub columns is-gapless is-size-7">
  <li class="column is-narrow" style="box-shadow: inset 4px 0px 0px 0px @priority.color;">
    <div class="icon-text item_title pl-0">
      <span class="item_name">@model.name</span>
      @if(isEdit)
      {
        <div class="dropdown is-hoverable is-right icon is_hover">
          <div class="dropdown-trigger">
            <span class="icon">
              <i class="material-icons-outlined is-size-6">more_horiz</i>
            </span>
          </div>
          <div class="dropdown-menu">
            <div class="dropdown-content">
              <a class="dropdown-item has-text-danger" @onclick="Delete">Xóa việc phụ này</a>
            </div>
          </div>
        </div>
      }
    </div>
  </li>

  @for (int d = 0; d < dayTotal; d++)
  {
    var day = dayStart.AddDays(d);
    var today = day == DateTime.Today ? "is_today" : "";
    var sunday = day.DayOfWeek == DayOfWeek.Sunday ? "is_sun" : "";
    var column = dateE.Subtract(dateS).Days + 1;
    <li class="column is-narrow item_day @today @sunday">
      @if(dateS == day)
      {
        <div class="is_timeline" style="width: @(column * 40)px">
          <a class="item_task"></a>
          <div class="item_members">
            <_MemberList members="model.members" sources="members" isEdit="isEdit" isTask="true" isRight="true"
              OnUpdate="UpdateMembers" />
          </div>
        </div>
      }
    </li>
  }
</ul>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public WorkPlanModel.Task model { get; set; }
  [Parameter]
  public WorkPlanModel.Task parent { get; set; }
  [Parameter]
  public List<UserModel> members { get; set; }
  [Parameter]
  public DateTime dayStart { get; set; }
  [Parameter]
  public int dayTotal { get; set; }
  [Parameter]
  public bool isEdit { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnUpdate { get; set; }
  

  private async Task Delete()
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn đang thực hiện xóa công việc {model.name}.\nBạn có chắc chắn muốn thực hiện?"))
      return;
    await DbWorkTask.Delete(Layout.Company.id, model.id);
    await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa công việc phụ thành công!");
    await WorkService.CreateLog(Layout.Company.id, "Xóa công việc phụ", model.name, parent.plan_id, parent.id, Layout.User);
    await OnUpdate.InvokeAsync(model);
  }

  private async Task UpdateDate(DateRange range)
  {
    model.date_start = range.Start.Ticks;
    model.date_end = range.End.Ticks;
    await DbWorkTask.Update(Layout.Company.id, model);
    await OnUpdate.InvokeAsync(model);
  }

  private async Task ChangeStatus(int id)
  {
    model.status = id;
    await DbWorkTask.Update(Layout.Company.id, model);
    await OnUpdate.InvokeAsync(model);
  }

  private async Task UpdateLabels()
  {
    await DbWorkTask.Update(Layout.Company.id, model);
  }

  private async Task UpdateMembers()
  {
    var old = await DbWorkTask.Get(Layout.Company.id, model.id);
    await DbWorkTask.Update(Layout.Company.id, model);
    // Lưu lịch sử
    await WorkService.LogTaskMembers(Layout.Company.id, old, model, Layout.User, Layout.UserList);
  }
}