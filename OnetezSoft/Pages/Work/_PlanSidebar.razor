@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<div class="card teams_left py-3">
  <div class="px-3">
    <div class="user_item p-1 @(url.StartsWith("/work/my-task") || url == "/work" ? "has_bg" : "")">
      <img class="image is-24x24 mr-2" src="@Layout.User.avatar" alt="IMG">
      <a href="/work">Công việc của tôi</a>
    </div>
  </div>
  <hr class="my-3">
  <div class="scrolly px-3 pb-5" style="height: calc(100vh - 116px);">
    <div class="control has-icons-right">
      <input @bind="keyword" @bind:event="oninput" class="input is-rounded" type="text" placeholder="Tiêu đề kế hoạch">
      <span class="icon is-right">
        <i class="material-icons-round is-size-5">search</i>
      </span>
    </div>
    <div class="dropdown is-hoverable is-fullwidth is-size-7 mt-3 is-hidden">
      <div class="dropdown-trigger">
        <a class="icon-text is-fullwidth">
          <span style="flex-grow: 1;">Sắp xếp theo</span>
          <span class="icon is-small">
            <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
          </span>
        </a>
      </div>
      <div class="dropdown-menu">
        <div class="dropdown-content">
          <a class="dropdown-item">Tiêu đề A-Z</a>
          <a class="dropdown-item">Tiêu đề Z-A</a>
          <a class="dropdown-item">Ngày tạo mới nhất</a>
          <a class="dropdown-item">Ngày tạo cũ nhất</a>
        </div>
      </div>
    </div>
    <a id="sidebar_plan_refresh" class="is-hidden" @onclick="GetList">Làm mới</a>
    @foreach (var type in typeList.OrderBy(x => x.id))
    {
      var hidden = toggle.Contains(type.id);
      <hr class="my-3">
      <a class="icon-text is-fullwidth" @onclick="() => Toggle(type.id)">
        <span class="icon mr-2" style="border-radius: 4px; background: @type.color;">
          <i class="material-icons-outlined is-size-6">@type.icon</i>
        </span>
        <span class="is-size-7 has-text-weight-semibold" style="flex-grow: 1;">@type.name</span>
        <span class="icon is-small">
          <i class="material-icons-outlined is-size-5">@(hidden ? "arrow_drop_down" : "arrow_right")</i>
        </span>
      </a>
      if(hidden)
      {
        var list = planList.ContainsKey(type.id) ? planList[type.id] : new();
        foreach (var plan in list)
        {
          var link = "/work/" + plan.id;
          var show = string.IsNullOrEmpty(keyword) || Shared.SearchKeyword(keyword, plan.name);
          var active = url.StartsWith(link) ? "active" : "";
          <div class="sidebar_plan_item @active @(show ? "icon-text " : "is-hidden")">
            <a class="has-text-info" href="@link" style="flex-grow: 1;" title="@plan.name">
              @plan.name
            </a>
            <div class="dropdown is-hoverable is-right icon is-small is_hover">
              <div class="dropdown-trigger">
                <span class="icon is-small">
                  <i class="material-icons-outlined is-size-6">more_horiz</i>
                </span>
              </div>
              <div class="dropdown-menu is-size-7" style="min-width: 0;">
                <div class="dropdown-content">
                  <a class="dropdown-item is-hidden">
                    Ghim kế hoạch
                  </a>
                  @if(type.id == 0)
                  {
                    <a class="dropdown-item" @onclick="() => PinPlan(plan)">
                      Hủy ghim
                    </a>
                  }
                  else
                  {
                    <a class="dropdown-item" @onclick="() => PinPlan(plan)">
                      Ghim kế hoạch
                    </a>
                  }
                  @if(type.id == 3)
                  {
                    <a class="dropdown-item" @onclick="() => HidePlan(plan)">
                      Hủy lưu trữ
                    </a>
                  }
                  else
                  {
                    <a class="dropdown-item" @onclick="() => HidePlan(plan)">
                      Thêm vào lưu trữ
                    </a>
                  }
                  <a class="dropdown-item has-text-danger" @onclick="() => LeavePlan(plan)">
                    Rời khỏi kế hoạch
                  </a>
                  <a class="dropdown-item has-text-danger" @onclick="() => DeletePlan(plan)">
                    Xóa kế hoạch
                  </a>
                </div>
              </div>
            </div>
          </div>
        }
        if(list.Count == 0)
        {
          <div class="sidebar_plan_item has-text-grey is-size-7">Không có kế hoạch</div>
        }
      }
    }
  </div>
  <div class="px-3">
    <a class="button is-info is-fullwidth" @onclick="CreatePlan">
      <span class="icon">
        <i class="material-icons-round is-size-5">add</i>
      </span>
      <span>Tạo kế hoạch</span>
    </a>
  </div>
</div>

<_PlanCreate model="planEdit" OnUpdate="OnCreate" />

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  private string url = string.Empty;
  private List<int> toggle = new() { 0, 1 };
  private Dictionary<int, List<WorkPlanModel>> planList = new();
  private WorkPlanModel planEdit = null;
  private string keyword = string.Empty;
  private List<StaticModel> typeList = new();

  protected override void OnInitialized()
  {
    typeList.Clear();
    typeList.Add(new() { id = 0, name = "Kế hoạch đã ghim", icon = "push_pin", color ="#AEC6FF" });
    typeList.Add(new() { id = 3, name = "Kế hoạch lưu trữ", icon = "archive", color = "#FFEDE9" });
    typeList.Add(new() { id = 1, name = "Kế hoạch đang diễn ra", icon = "show_chart", color = "#FFFDC6" });
    typeList.Add(new() { id = 2, name = "Kế hoạch hoàn thành", icon = "done_all", color = "#CEF9CC" });
  }

  protected override async Task OnParametersSetAsync()
  {
    url = navigation.Uri.Replace(navigation.BaseUri, "/");
    await GetList();
  }

  private async Task GetList()
  {
    var data = await DbWorkPlan.GetListJoin(Layout.Company.id, Layout.User.id);
    planList.Clear();
    foreach (var type in typeList)
    {
      var list = new List<WorkPlanModel>();
      if(type.id == 0)
      {
        list = data.Where(x => Layout.User.plans_pin.Contains(x.id)).ToList();
        //data.RemoveAll(x => Layout.User.plans_pin.Contains(x.id));
      }
      else if(type.id == 3)
      {
        list = data.Where(x => Layout.User.plans_hide.Contains(x.id)).ToList();
        data.RemoveAll(x => Layout.User.plans_hide.Contains(x.id));
      }
      else if(type.id == 1 || type.id == 2)
      {
        list = data.Where(x => x.status == type.id).ToList();
        data.RemoveAll(x => x.status == type.id);
      }
      planList.Add(type.id, list);
    }
  }

  private void Toggle(int id)
  {
    if(toggle.Contains(id))
      toggle.Remove(id);
    else
      toggle.Add(id);
  }

  private async Task PinPlan(WorkPlanModel item)
  {
    if(Layout.User.plans_pin.Contains(item.id))
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn hủy ghim kế hoạch: {item.name}?"))
        return;
      Layout.User.plans_pin.Remove(item.id);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Đã hủy ghim kế hoạch " + item.name);
    }
    else
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn ghim kế hoạch: {item.name}?"))
        return;
      Layout.User.plans_pin.Add(item.id);
      Layout.User.plans_hide.Remove(item.id);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Đã ghim kế hoạch " + item.name);
    }
    await DbUser.Update(Layout.Company.id, Layout.User);
    await GetList();
  }

  private async Task HidePlan(WorkPlanModel item)
  {
    if(Layout.User.plans_hide.Contains(item.id))
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn hủy lưu trữ kế hoạch: {item.name}?"))
        return;
      Layout.User.plans_hide.Remove(item.id);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Đã hủy lưu trữ kế hoạch " + item.name);
    }
    else
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn lưu trữ kế hoạch: {item.name}?"))
        return;
      Layout.User.plans_hide.Add(item.id);
      Layout.User.plans_pin.Remove(item.id);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Đã lưu trữ kế hoạch " + item.name);
    }
    await DbUser.Update(Layout.Company.id, Layout.User);
    await GetList();
  }

  private async Task DeletePlan(WorkPlanModel item)
  {
    if(WorkService.RoleInPlan(item, Layout.User.id) == 1)
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn đang thực hiện xóa kế hoạch {item.name}. Việc này sẽ khiến dữ liệu công việc trong kế hoạch bị mất.\nBạn có chắc chắn muốn thực hiện?"))
        return;
      // Thông báo chuông
      foreach (var user in item.members)
         await DbNotify.ForPlan(Layout.Company.id, 705, item.id, null, user.id, Layout.User.id);
      await WorkService.DeletePlan(Layout.Company.id, item.id);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa kế hoạch thành công!");
      navigation.NavigateTo("/work");
    }
    else
      await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn không có quyền xóa kế hoạch này!");
  }

  private async Task LeavePlan(WorkPlanModel item)
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc chắn muốn rời khỏi kế hoạch này?"))
        return;
    if(await WorkService.RemoveMemberInPlan(Layout.Company.id, item.id, Layout.User.id))
      await JSRuntime.InvokeVoidAsync("tagline", true, "Đã rời khỏi kế hoạch thành công!");
    else if(WorkService.CheckPlanSingleManager(item, Layout.User.id))
      await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn đang là quản lý duy nhất của kế hoạch, vui lòng thêm quản lý khác trước khi rời khỏi kế hoạch!");
    else
      await JSRuntime.InvokeVoidAsync("tagline", false, "Không thành công, vui lòng thử lại!");
  }

  private async Task CreatePlan()
  {
    planEdit = new() {
      creator = Layout.User.id,
      members = new() { new() { id = Layout.User.id, role = 1 } },
      labels = new(),
      sections = new(),
      timelines = new()
    };
    await JSRuntime.InvokeVoidAsync("setFocus", "plan_name");
  }

  private async Task OnCreate(WorkPlanModel item)
  {
    if(item != null)
    {
      await JSRuntime.InvokeVoidAsync("tagline", true, "Đã tạo kế hoạch: " + item.name);
      navigation.NavigateTo("/work/" + item.id);
    }
    planEdit = null;
  }
}