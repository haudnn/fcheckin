@page "/work"
@page "/work/my-task"
@page "/work/my-task/{TypeView}"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

<section class="columns is-gapless has_menu_left">
  <div class="column is-narrow">
    <_PlanSidebar />
  </div>
  <div class="column">
    <div class="card p-5 p-4-mobile">
      <ul class="columns is-vcentered is-variable is-2 mb-3">
        <li class="column">
          <h1 class="title is-5 has-text-info is-uppercase">Công việc của tôi</h1>
        </li>
        <li class="column is-narrow">
          <a class="has-text-@(TypeView == "list" ? "link" : "grey")" href="/work/my-task/list">
            Chế độ danh sách
          </a>
        </li>
        <li class="column is-narrow">
          <a class="has-text-@(TypeView == "board" ? "link" : "grey") "href="/work/my-task/board">
            Chế độ Board
          </a>
        </li>
        <li class="column is-narrow">
          <a class="has-text-@(TypeView == "gantt" ? "link" : "grey") "href="/work/my-task/gantt">
            Chế độ Gantt
          </a>
        </li>
      </ul>

      <ul class="columns is-vcentered mb-3">
        <li class="column">
          <a class="button is-link is-small">
            <span class="icon">
              <i class="material-icons-outlined is-size-6">add</i>
            </span>
            <span>Tạo công việc</span>
          </a>
        </li>
        <li class="column is-narrow">
          <div class="dropdown is-hoverable is-right is-size-7">
            <div class="dropdown-trigger">
              <a class="icon-text">
                <span>Độ ưu tiên</span>
                <span class="icon">
                  <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                </span>
              </a>
            </div>
            <div class="dropdown-menu">
              <div class="dropdown-content">
                <a class="dropdown-item">Tất cả</a>
                <a class="dropdown-item">Trống</a>
                @foreach (var item in WorkService.Priority())
                {
                  <a class="dropdown-item" style="color: @item.color;">@item.name</a>
                }
              </div>
            </div>
          </div>
        </li>
        <li class="column is-narrow">
          <div class="dropdown is-hoverable is-right is-size-7">
            <div class="dropdown-trigger">
              <a class="icon-text">
                <span>Theo ngày kết thúc</span>
                <span class="icon">
                  <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                </span>
              </a>
            </div>
            <div class="dropdown-menu">
              <div class="dropdown-content">
                <a class="dropdown-item">Tuần này</a>
                <a class="dropdown-item">Tháng này</a>
                <a class="dropdown-item">Quý này</a>
              </div>
            </div>
          </div>
        </li>
        <li class="column is-one-fifth">
          <div class="control has-icons-right">
            <input class="input is-small is-rounded" type="text" placeholder="Tiêu đề công việc...">
            <span class="icon is-right is-small">
              <i class="material-icons-outlined is-size-5">search</i>
            </span>
          </div>
        </li>
      </ul>

      <ul class="task_list columns is-gapless is-size-7 has-text-grey">
        <li class="column" style="width: calc(100% - 630px);">Công việc</li>
        <li class="column is-narrow" style="width: 130px;">Thời hạn</li>
        <li class="column is-narrow" style="width: 250px;">Nhãn công việc</li>
        <li class="column is-narrow" style="width: 110px;">Thành viên</li>
        <li class="column is-narrow" style="width: 80px;">Trạng thái</li>
        <li class="column is-narrow" style="width: 30px;"></li>
      </ul>

      @foreach (var status in WorkService.Status())
      {
        var toggle = toggleStatus.Contains(status.id);
        var tasks = taskList.Where(x => x.status == status.id).ToList();
        <ul class="task_list columns is-gapless is-size-7">
          <li class="column is-full">
            <div class="icon-text">
              <a class="icon is-small has-text-dark mr-2" @onclick="() => ToggleStatus(status.id)">
                <i class="material-icons-outlined is-size-5">arrow_@(toggle ? "drop_down" : "right")</i>
              </a>
              <span class="has-text-weight-semibold font_14">
                @status.name @(tasks.Count > 0 ? $"({tasks.Count})" : "")
              </span>
              <a class="icon has-text-dark is_hover" title="Thêm công việc">
                <i class="material-icons-round is-size-6">add</i>
              </a>
            </div>
          </li>
        </ul>
        @if(toggle)
        {
          <Dropzone Items="tasks" TItem="WorkTaskModel" Class="drop_task">
            @* <_TaskItem model="context" childs="childList" toggleList="toggleList"
              OnToggle="OnToggle" OnUpdate="OnUpdate" /> *@
          </Dropzone>
        }
      }
    </div>
  </div>
</section>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public string TypeView { get; set; }
  private string _title = "Công việc của tôi";

  private List<WorkTaskModel> taskList = new();
  private List<WorkTaskModel> childList = new();
  private List<int> toggleStatus = new() { 1, 2 };
  private List<string> toggleList = new();

  protected override async Task OnParametersSetAsync()
  {
    if(string.IsNullOrEmpty(TypeView))
      TypeView = "list";

    taskList = new();
    for (int i = 1; i <= 20; i++)
    {
     taskList.Add(new() { id = Mongo.RandomId(), 
      name = $"Đây là công việc {i} để test giao diện, có thể nó sẽ rất dài, nhiều khi còn xuống dòng đó nha",
      status = Shared.RandomInt(1, 5),
      priority = Shared.RandomInt(1, 4)
      });
    }

    childList = new();
    for (int i = 1; i <= 3; i++)
    {
     childList.Add(new() { id = Mongo.RandomId(), 
      name = $"Đây là công việc phụ {i} để test giao diện",
      status = Shared.RandomInt(1, 5),
      priority = Shared.RandomInt(1, 4)
      });
    }
  }

  private void ToggleStatus(int id)
  {
    if(toggleStatus.Contains(id))
      toggleStatus.Remove(id);
    else
      toggleStatus.Add(id);
  }

  private void OnToggle(string id)
  {
    if (toggleList.Contains(id))
      toggleList.Remove(id);
    else
      toggleList.Add(id);
  }

  private void OnUpdate(WorkTaskModel item)
  {
    
  }

  private async Task OnItemDragdrop(WorkTaskModel item)
  {
    await JSRuntime.InvokeVoidAsync("console.log", item.name);
  }

  private void OnItemReplaced(WorkTaskModel item)
  {
    //replaced = item;
  }
}