@page "/work"
@page "/work/my-task"
@page "/work/my-task/{TypeView}"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>Công việc của tôi</PageTitle>

<section class="columns is-gapless has_menu_left">
  <div class="column is-narrow">
    <_PlanSidebar />
  </div>
  <div class="column">
    <div class="card pt-5 pb-2 px-5 p-4-mobile">
      <ul class="columns is-vcentered is-variable is-2 mb-3">
        <li class="column">
          <h1 class="title is-5 has-text-info is-uppercase">Công việc của tôi</h1>
        </li>
        <li class="column is-narrow">
          <a class="has-text-@(TypeView == "list" ? "link" : "grey")" href="/work/my-task/list">
            Chế độ danh sách
          </a>
        </li>
        <li class="column is-narrow">
          <a class="has-text-@(TypeView == "board" ? "link" : "grey") "href="/work/my-task/board">
            Chế độ Board
          </a>
        </li>
        <li class="column is-narrow">
          <a class="has-text-@(TypeView == "gantt" ? "link" : "grey") "href="/work/my-task/gantt">
            Chế độ Gantt
          </a>
        </li>
      </ul>

      <ul class="columns is-vcentered mb-3">
        <li class="column">
          <a class="button is-link is-small is-hidden" @onclick="() => EditTask(null, 1)">
            <span class="icon">
              <i class="material-icons-outlined is-size-6">add</i>
            </span>
            <span>Tạo công việc</span>
          </a>
        </li>
        <li class="column is-narrow">
          <div class="dropdown is-hoverable is-right is-size-7">
            <div class="dropdown-trigger">
              <a class="icon-text">
                <span>
                  @(filterPriority != 0 ? WorkService.Priority(filterPriority).name : "Độ ưu tiên")      
                </span>
                <span class="icon">
                  <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                </span>
              </a>
            </div>
            <div class="dropdown-menu">
              <div class="dropdown-content">
                <a class="dropdown-item" @onclick="() => FilterPriority(0)">Tất cả</a>
                @foreach (var item in WorkService.Priority())
                {
                  <a class="dropdown-item" style="color: @item.color;" @onclick="() => FilterPriority(item.id)">@item.name</a>
                }
              </div>
            </div>
          </div>
        </li>
        <li class="column is-narrow">
          <div class="dropdown is-hoverable is-right is-size-7">
            <div class="dropdown-trigger">
              <a class="icon-text">
                <span>Theo ngày kết thúc</span>
                <span class="icon">
                  <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                </span>
              </a>
            </div>
            <div class="dropdown-menu">
              <div class="dropdown-content">
                <a class="dropdown-item @(filterDate == 1 ? "has-text-weight-bold" : "")" @onclick="() => FilterDate(1)">
                  Tuần này
                </a>
                <a class="dropdown-item @(filterDate == 2 ? "has-text-weight-bold" : "")" @onclick="() => FilterDate(2)">
                  Tháng này
                </a>
                <a class="dropdown-item @(filterDate == 3 ? "has-text-weight-bold" : "")" @onclick="() => FilterDate(3)">
                  Quý này
                </a>
                <a class="dropdown-item @(filterDate == 0 ? "has-text-weight-bold" : "")" @onclick="() => FilterDate(0)">
                  Tất cả
                </a>
              </div>
            </div>
          </div>
        </li>
        <li class="column is-one-fifth">
          <div class="control has-icons-right">
            <input class="input is-small is-rounded" type="text" 
                placeholder="Tiêu đề công việc..." @onchange="FilterKeyword">
            <span class="icon is-right is-small">
              <i class="material-icons-outlined is-size-5">search</i>
            </span>
          </div>
        </li>
      </ul>
      
      @if(TypeView == "list")
      {
        <ul class="task_list columns is-gapless is-size-7 has-text-grey">
          <li class="column" style="width: calc(100% - 630px);">Công việc</li>
          <li class="column is-narrow" style="width: 130px;">Thời hạn</li>
          <li class="column is-narrow" style="width: 130px;">Mức độ ưu tiên</li>
          <li class="column is-narrow" style="width: 110px;">Thành viên</li>
          <li class="column is-narrow" style="width: 80px;">Trạng thái</li>
          <li class="column is-narrow" style="width: 30px;"></li>
        </ul>

        @foreach (var status in statusList)
        {
          var show = toggleStatus.Contains(status.id);
          var tasks = taskGroups.ContainsKey(status.id) ? taskGroups[status.id] : new();
          var count = tasks.Where(x => !string.IsNullOrEmpty(x.id)).Count();

          <ul class="task_list columns is-gapless is-size-7">
            <li class="column is-full">
              <div class="icon-text">
                <a class="icon is-small has-text-dark mr-2" @onclick="() => ToggleStatus(status.id)">
                  <i class="material-icons-outlined is-size-5">@(show ? "arrow_drop_down" : "arrow_right")</i>
                </a>
                <span class="has-text-weight-semibold font_14">
                  @status.name @(count > 0 ? $"({count})" : "")
                </span>
              </div>
            </li>
          </ul>

          @if(show)
          {
            <Dropzone Items="tasks" TItem="WorkPlanModel.Task" Class="drop_task_list" 
              AllowsDrag="x => x.id != null" OnItemDrop="x => OnItemDragdrop(x)">
              @if(context.id == null)
              {
                <div class="pl-5 py-1 is-size-7">
                  Chưa có công việc
                </div>
              }
              else
              {
                var plan = planList.SingleOrDefault(x => x.id == context.plan_id);
                <_TaskListItem model="context" plan="plan" showPlan="true" editRole="true"
                  members="memberList[plan.id]" toggleList="toggleList" OnToggle="OnToggle" 
                  OnEdit="OnEditList" OnUpdate="OnUpdateList" OnAddSub="OnAddSub" OnTodolist="OnTodolist" />
              }
            </Dropzone>
          }
        }
      }
      else if(TypeView == "board")
      {
        <div class="scrollx">
          <ul class="columns is-gapless">
            @foreach (var status in statusList)
            {
              var tasks = taskGroups.ContainsKey(status.id) ? taskGroups[status.id] : new();
              var count = tasks.Where(x => !string.IsNullOrEmpty(x.id)).Count();

              <li class="column is-narrow mr-3" style="width: 350px;">
                <div class="icon-text py-2 pl-2">
                  <span class="has-text-weight-semibold font_14">
                    @status.name @(count > 0 ? $"({count})" : "")
                  </span>
                  <a class="icon has-text-dark is_hover is-hidden" title="Thêm công việc" @onclick="() => EditTask(null, status.id)">
                    <i class="material-icons-round is-size-6">add</i>
                  </a>
                </div>
                <div class="scrolly p-2" style="height: calc(100vh - 220px); background: #fbfbfb; border-radius: 5px;">
                  <Dropzone Items="tasks" TItem="WorkPlanModel.Task" Class="drop_task_board"
                    AllowsDrag="x => x.id != null" OnItemDrop="x => OnItemDragdrop(x)">
                    @if(context.id == null)
                    {
                      <div class="has-text-centered p-3">
                        <a class="icon-text has-text-link" @onclick="() => EditTask(null, status.id)">
                          <span class="icon">
                            <i class="material-icons-outlined is-size-6">add</i>
                          </span>
                          <span class="is-size-7">Thêm công việc</span>
                        </a>
                      </div>
                    }
                    else
                    {
                      var plan = planList.SingleOrDefault(x => x.id == context.plan_id);
                      <_TaskCardItem model="context" plan="plan" showPlan="true" editRole="true"
                        members="memberList[plan.id]" toggleList="toggleList" OnToggle="OnToggle"
                        OnEdit="OnEditList" OnUpdate="OnUpdateList" OnAddSub="OnAddSub" OnTodolist="OnTodolist" />
                    }
                  </Dropzone>
                </div>
              </li> 
            }
          </ul>
        </div>
      }
      else
      {
        var dayHtml = string.Empty;
        <div class="list_task_gantt is-size-7" style="height: calc(100vh - 165px);">
          <ul class="task_gantt is_header columns is-gapless is-vcentered">
            <li class="column is-narrow">
              Công việc
            </li>
            @for (int d = 0; d < dayTotal; d++)
            {
              var day = dayStart.AddDays(d);
              var today = day == DateTime.Today ? "is_today" : "";
              var sunday = day.DayOfWeek == DayOfWeek.Sunday ? "is_sun" : "";
              dayHtml += $"<li class=\"column is-narrow {today} {sunday}\"></li>";

              <li class="column is-narrow @today @sunday">
                <span class="pl-1" style="color: #C0C6DC;">@day.ToString("ddd").Substring(0, 1)</span>
                <span class="pr-1">@day.ToString("dd")</span>
              </li>
            }
          </ul>

          @foreach (var status in statusList)
          {
            var show = toggleStatus.Contains(status.id);
            var tasks = taskGroups.ContainsKey(status.id) ? taskGroups[status.id] : new();
            var count = tasks.Where(x => !string.IsNullOrEmpty(x.id)).Count();
            
            <ul class="task_gantt columns is-gapless is-size-7">
              <li class="column is-narrow">
                <div class="icon-text">
                  <a class="icon is-small has-text-dark mr-2" @onclick="() => ToggleStatus(status.id)">
                    <i class="material-icons-outlined is-size-5">@(show ? "arrow_drop_down" : "arrow_right")</i>
                  </a>
                  <span class="has-text-weight-semibold font_14">
                    @status.name @(count > 0 ? $"({count})" : "")
                  </span>
                </div>
              </li>
              @for (int d = 0; d < dayTotal; d++)
              {
                var day = dayStart.AddDays(d);
                var today = day == DateTime.Today ? "is_today" : "";
                var sunday = day.DayOfWeek == DayOfWeek.Sunday ? "is_sun" : "";

                <li class="column is-narrow @today @sunday"></li>
              }
            </ul>

            @if(show)
            {
              <Dropzone Items="tasks" TItem="WorkPlanModel.Task" Class="drop_task_list" 
                AllowsDrag="x => x.id != null" OnItemDrop="x => OnItemDragdrop(x)">
                @if(context.id == null)
                {
                  <ul class="task_gantt columns is-gapless is-size-7">
                    <li class="column is-narrow">
                      <div class="pl-5 py-1">Chưa có công việc</div>
                    </li>
                    @((MarkupString)dayHtml)
                  </ul>
                }
                else
                {
                  var plan = planList.SingleOrDefault(x => x.id == context.plan_id);
                  <_TaskGanttItem model="context" plan="plan" showPlan="true" editRole="true"
                    members="memberList[plan.id]" toggleList="toggleList" OnToggle="OnToggle"
                    dayStart="dayStart" dayTotal="dayTotal" dayHtml="@dayHtml"
                    OnEdit="OnEditList" OnUpdate="OnUpdateList" OnAddSub="OnAddSub" OnTodolist="OnTodolist" />
                }
              </Dropzone>
            }
          }

          <ul class="task_gantt is_footer columns is-gapless is-vcentered">
            <li class="column is-narrow"></li>
            @((MarkupString)dayHtml)
          </ul>
        </div>
      }
    </div>
  </div>
</section>

<_TaskPopup plan="planEdit" task="taskEdit" members="Layout.UserList" tab="taskEditTab" 
  subTasks="subTasks" todoItems="todoItems" OnUpdate="OnUpdateTask" />

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public string TypeView { get; set; }

  private List<StaticModel> statusList = new();
  private List<WorkPlanModel> planList = new();
  private Dictionary<string, List<UserModel>> memberList = new();
  private Dictionary<int, List<WorkPlanModel.Task>> taskGroups = new();
  private List<int> toggleStatus = new() { 1, 2 };
  private List<string> toggleList = new();
  private int dayTotal = 0;
  private DateTime dayStart = DateTime.Today;
  private DateTime dayEnd = DateTime.Today;

  protected override async Task OnInitializedAsync()
  {
    // Lấy danh sách dự án đang tham gia
    planList = await DbWorkPlan.GetListJoin(Layout.Company.id, Layout.User.id);
    // Lấy thành viên trong từng kế hoạch
    memberList.Clear();
    foreach (var plan in planList)
    {
      var listId = plan.members.Select(x => x.id).ToList();
      var members = Layout.UserList.Where(x => listId.Contains(x.id)).ToList();
      memberList.Add(plan.id, members);
    }
  }

  protected override async Task OnParametersSetAsync()
  {
    if(string.IsNullOrEmpty(TypeView))
      TypeView = "list";
    statusList = WorkService.Status();
    await GetTaskList();
  }

  #region Bộ lọc và lấy dữ liệu

  private int filterPriority = 0;
  private int filterDate = 0;
  private string filterKey = string.Empty;

  private async Task GetTaskList()
  {
    // Lấy danh sách công việc đang tham gia
    List<WorkPlanModel.Task> taskList = new();
    foreach (var plan in planList)
    {
      var tasks = await DbWorkTask.GetListJoin(Layout.Company.id, plan.id, Layout.User.id);
      taskList.AddRange(tasks);
    }
    
    // Bộ lọc tìm kiếm
    if(filterPriority != 0) // Lọc theo độ ưu tiên
      taskList = taskList.Where(x => x.priority == filterPriority).ToList();
    if(!string.IsNullOrEmpty(filterKey)) // Lọc theo tiêu đề công việc
      taskList = taskList.Where(x => Shared.SearchKeyword(filterKey, x.name)).ToList();
    if(filterDate != 0) // Lọc theo ngày kết thúc
    {
      Shared.GetTimeSpan(filterDate, out DateTime start, out DateTime end);
      taskList = taskList.Where(x => start.Ticks <= x.date_end && x.date_end <= end.Ticks).ToList();
    }
    
    // Chia nhóm công việc
    taskGroups.Clear();
    foreach (var status in statusList)
    {
      var tasks = taskList.Where(x => x.status == status.id).OrderByDescending(x => x.date_end).ToList();
      if(tasks.Count == 0)
        tasks = new() { new() { name = "Chưa có công việc", status = status.id }};
      taskGroups.Add(status.id, tasks);
    }

    // Lấy ngày thấp nhỏ nhất
    if(taskList.Count > 0)
    {
      long minDay = taskList.OrderBy(x => x.date_start).Select(x => x.date_start).FirstOrDefault();
      long maxDay = taskList.OrderByDescending(x => x.date_end).Select(x => x.date_end).FirstOrDefault();
      dayStart = new DateTime(minDay);
      dayEnd = new DateTime(maxDay);
      dayTotal = dayEnd.Subtract(dayStart).Days + 4;
    }
  }

  private async Task FilterPriority(int value)
  {
    filterPriority = value;
    await GetTaskList();
  }

  private async Task FilterDate(int value)
  {
    filterDate = value;
    await GetTaskList();
  }

  private async Task FilterKeyword(ChangeEventArgs e)
  {
    filterKey = e.Value.ToString();
    await GetTaskList();
  }

  private void ToggleStatus(int id)
  {
    if(toggleStatus.Contains(id))
      toggleStatus.Remove(id);
    else
      toggleStatus.Add(id);
  }
  
  #endregion


  #region Popup công việc chính

  private WorkPlanModel planEdit = null;
  private WorkPlanModel.Task taskEdit = null;
  private int taskEditTab = 1;

  private async Task EditTask(WorkPlanModel.Task item, int status)
  {
    taskEditTab = 1;
    if(item == null)
    {
      taskEdit = new()
      {
        status = status,
        //plan_id = model.id,
        //section_id = sectionId,
        labels = new(),
        members = new()
      };
      await JSRuntime.InvokeVoidAsync("setFocus", "task_name");
    }
    else
    {
      planEdit = planList.SingleOrDefault(x => x.id == item.plan_id);
      taskEdit = await DbWorkTask.Get(Layout.Company.id, item.id);
    }
  }

  private async Task OnUpdateTask(WorkPlanModel.Task item)
  {
    if(item != null)
      await GetTaskList();
    taskEdit = null;
    planEdit = null;
  }

  #endregion


  #region Chức năng kéo thả công việc

  private async Task OnItemDragdrop(WorkPlanModel.Task item)
  {
    foreach (var group in taskGroups)
    {
      if(group.Value.Contains(item))
      {
        var statusId = group.Key;
        var message = await WorkService.ChangeTaskStatus(Layout.Company.id, Layout.User, item, statusId);
        await JSRuntime.InvokeVoidAsync("tagline", true, message);
        break;
      }
    }
    toggleList.Clear();
    await GetTaskList();
  }

  #endregion


  #region Xử lý trong danh sách công việc

  private void OnToggle(string id)
  {
    if (toggleList.Contains(id))
      toggleList.Remove(id);
    else
      toggleList.Add(id);
  }

  private async Task OnEditList(WorkPlanModel.Task item)
  {
    await EditTask(item, item.status);
  }

  private List<WorkPlanModel.Task> subTasks = new();
  private async Task OnAddSub(WorkPlanModel.Task item)
  {
    subTasks = await DbWorkTask.GetListInTask(Layout.Company.id, item.plan_id, item.id);
    await EditTask(item, item.status);
    taskEditTab = 2;
  }

  private List<TodolistModel.Todo> todoItems = new();
  private async Task OnTodolist(WorkPlanModel.Task item)
  {
    todoItems = DbTodoItem.GetList(Layout.Company.id, item.id, Layout.User.id);
    await EditTask(item, item.status);
    taskEditTab = 3;
  }

  private async Task OnUpdateList(WorkPlanModel.Task item)
  {
    await GetTaskList();
  }

  #endregion
}