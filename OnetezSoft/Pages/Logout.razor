@page "/logout"
@layout LayoutLogin
@inject IJSRuntime JSRuntime
@inject ProtectedLocalStorage storage
@inject NavigationManager navigation

@code {
  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      try
      {
        var userStorage = await storage.GetAsync<string>("user");
        if (userStorage.Success && !string.IsNullOrEmpty(userStorage.Value))
        {
          var user = await DbMainUser.GetbySession(userStorage.Value);
          if (user != null)
          {
            user.session = null;
            await DbMainUser.Update(user);
          }
        }
      }
      catch (Exception ex)
      {
        await JSRuntime.InvokeVoidAsync("console.log", "ERROR: " + ex.Message);
      }

      await JSRuntime.InvokeVoidAsync("localStorage.clear");

      navigation.NavigateTo("/", true);
    }
  }
}