@inject IJSRuntime JSRuntime

@if (model != null)
{
  <section class="modal is-active">
    <div class="modal-background"></div>
    <section class="modal-card has_bg">
      <section class="modal-card-head is-success" style="background-image: url('/images/illustrations/users.png')">
        <div class="modal-card-title">
          <div class="title has-text-white">
            Thêm người dùng
          </div>
          <div class="subtitle has-text-white">
            Người dùng sản phẩm là người dùng truy cập
            <br />
            vào sử dụng sản phẩm
          </div>
        </div>
        <a class="delete is-medium" @onclick="Cancel"></a>
      </section>
      <section class="modal-card-body">
        <form class="columns" autocomplete="off">
          <div class="column is-one-quarter">
            <div class="image is-128x128 is-radius mb-3">
              <img src="@model.avatar" />
            </div>
            <a class="button is-white is-small is-fullwidth @(uploading ? "is-loading" : "")"
                onclick="document.getElementById('file').click()">
              <span class="icon">
                <i class="material-icons-sharp is-size-6">file_upload</i>
              </span>
              <span>Tải ảnh lên</span>
            </a>
            <InputFile OnChange="Upload" accept="image/*" class="is-hidden" id="file" />
          </div>

          <div class="column is-three-quarters">
            <div class="field has-text-weight-bold">
              Thông tin tài khoản
            </div>
            <ul class="columns is-multiline is-variable is-2">
              <li class="column is-full">
                <div class="field">
                  <div class="control has-icons-left">
                    <input @onchange="ChangeEmail" value="@model.email" type="email" class="input is_line"
                        placeholder="Nhập địa chỉ email của người dùng..." />
                    <span class="icon is-left has-text-black">
                      <i class="material-icons-round is-size-6">account_circle</i>
                    </span>
                  </div>
                </div>
              </li>
              <li class="column is-half">
                <div class="field">
                  <div class="control has-icons-left">
                    <input @bind="model.last_name" type="text" class="input is_line" placeholder="Nhập họ" />
                    <span class="icon is-left has-text-black">
                      <i class="material-icons-round is-size-6">person</i>
                    </span>
                  </div>
                </div>
              </li>
              <li class="column is-half">
                <div class="field">
                  <div class="control has-icons-left">
                    <input @bind="model.first_name" type="text" class="input is_line" placeholder="Nhập tên" />
                    <span class="icon is-left has-text-black">
                      <i class="material-icons-round is-size-6">person</i>
                    </span>
                  </div>
                </div>
              </li>
            </ul>

            <div class="field has-text-weight-bold mt-5">
              Sản phẩm được quyền truy cập
            </div>
            @foreach (var product in company.products.Where(x => x.active))
            {
              var access = ProductService.CheckAccess(products, product.id);
              <div class="icon-text mb-3 @(product.used == product.total && !access ? "is_opacity" : "")">
                <a class="icon is-small mr-2" @onclick="() => AccessProduct(product)">
                  <i class="material-icons-round is-size-5 has-text-@(access ? "success" : "grey")">
                    toggle_@(access ? "on" : "off")
                  </i>
                </a>
                <span class="has-text-weight-semibold is-size-7">
                  @product.title - @product.used/@product.total
                </span>
              </div>
            }
            <label class="checkbox is-size-7">
              <input type="checkbox" @onchange="AccessAllProduct" />
              <span class="has-text-weight-semibold">Kích hoạt tất cả bộ giải pháp</span>
            </label>

            <div class="field has-text-weight-bold mt-5">
              Trạng thái
            </div>
            <label class="checkbox is-size-7">
              <input @bind="model.active" type="checkbox" />
              <span class="has-text-weight-semibold">Kích hoạt</span>
            </label>
          </div>
        </form>
      </section>
      <section class="modal-card-foot is-right">
        <a class="button" @onclick="Cancel">
          <span class="icon">
            <i class="material-icons-round is-size-6">chevron_left</i>
          </span>
          <span class="is-size-7">Trở về</span>
        </a>
        <a class="button @(string.IsNullOrEmpty(model.id) ? "is-link" : "is-static")" @onclick="Update">
          <span class="icon">
            <i class="material-icons-round is-size-6">done</i>
          </span>
          <span class="is-size-7">Xác nhận</span>
        </a>
      </section>
    </section>
  </section>
}

@code {
  [CascadingParameter]
  public LayoutAdmin Layout { get; set; }
  [Parameter]
  public UserModel model { get; set; }
  [Parameter]
  public CompanyModel company { get; set; }
  [Parameter]
  public EventCallback<bool> OnUpdate { get; set; }

  private bool exist = false;
  private List<string> products = new();

  private async Task Cancel()
  {
    exist = false;
    products = new();
    await OnUpdate.InvokeAsync(false);
  }

  private async Task ChangeEmail(ChangeEventArgs e)
  {
    model.id = string.Empty;
    model.email = e.Value.ToString().Trim();
    // Kiểm tra tài khoản
    var checkUser = await DbMainUser.GetbyEmail(model.email);
    if (checkUser != null)
    {
      model.first_name = checkUser.first_name;
      model.last_name = checkUser.last_name;
      model.avatar = checkUser.avatar;
      exist = true;
      var companyUser = await DbUser.Get(company.id, checkUser.id);
      if(companyUser != null)
      {
        model.id = checkUser.id;
        await Tagline("Địa chỉ email này đã có trong tổ chức của bạn.");
      }
    }
    else
    {
      model.first_name = string.Empty;
      model.last_name = string.Empty;
      model.avatar = $"https://avatars.dicebear.com/api/micah/{DateTime.Now.Minute}.svg?background=grey";
      exist = false;
    }
  }

  private async Task Update()
  {
    if (string.IsNullOrEmpty(model.email) || !model.email.Contains("@"))
      await Tagline("Bạn chưa nhập địa chỉ email, hoặc email không đúng định dạng!");
    if (string.IsNullOrEmpty(model.first_name) && string.IsNullOrEmpty(model.last_name))
      await Tagline("Bạn chưa nhập họ và tên cho tài khoản!");
    else
    {
      // Kiểm tra tài khoản
      var checkUser = await DbMainUser.GetbyEmail(model.email);
      if (checkUser == null)
      {
        await DbMainUser.Create(model);
        // Gửi email cấp tài khoản
        JSRuntime.InvokeVoidAsync("tagline", true, "Đang gửi email thông tin tài khoản...");
        bool send = EmailService.UserInfo(model.email, model.id, out string message);
        JSRuntime.InvokeVoidAsync("tagline", send, message);
      }
      else
        model = checkUser;

      model.products = model.active ? products : new List<string>();

      // Thêm tài khoản vào tổ chức
      await CompanyService.AddStaff(company, model);
      
      exist = false;
      products = new();
      await OnUpdate.InvokeAsync(true);
    }
  }

  private void AccessAllProduct(ChangeEventArgs e)
  {
    if(Convert.ToBoolean(e.Value))
    {
      foreach (var product in company.products.Where(x => x.active))
      {
        var access = ProductService.CheckAccess(products, product.id);
        if(!access && product.used < product.total)
          products.Add(product.id);
      }
    }
    else
      products = new();
  }

  private async Task AccessProduct(CompanyModel.Product product)
  {
    var access = ProductService.CheckAccess(products, product.id);
    if (access)
    {
      // Có quyền rồi → Thì xóa
      products.Remove(product.id);
    }
    else if (product.used < product.total)
    {
      // Chưa có → Thì thêm quyền sử dụng
      products.Add(product.id);
    }
    else
    {
      await JSRuntime.InvokeVoidAsync("tagline", false, "Đã hết số lượng người dùng sản phẩm " + product.title);
    }
  }

  private bool uploading = false;
  private async Task Upload(InputFileChangeEventArgs e)
  {
    uploading = true;
    foreach (var file in e.GetMultipleFiles())
    {
      try
      {
        if (file.Size <= Layout.MaxFileSize)
        {
          var fileStream = new StreamContent(file.OpenReadStream(Layout.MaxFileSize));
          model.avatar = await Files.SaveFileAsync(fileStream, file.Name);
        }
        else
          await Tagline($"Chỉ cho phép file tối đa {string.Format("{0:0,0}", Layout.MaxFileSize / 1024000)} MB");
      }
      catch (Exception ex)
      {
        await Tagline($"Không thể tải ảnh lên: {ex.Message}");
      }
    }
    uploading = false;
  }

  private async Task Tagline(string message)
  {
    await JSRuntime.InvokeVoidAsync("tagline", false, message);
  }
}