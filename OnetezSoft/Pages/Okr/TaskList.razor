@page "/okr/tasks"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

@if (!string.IsNullOrEmpty(_message))
{
  <div id="notify">
    <div class="notification is-@(_success ? "success" : "danger")">
      <button class="delete" @onclick="() => _message = string.Empty"></button>
      <p>@((MarkupString)_message)</p>
    </div>
  </div>
}

<section class="p-4 @(_loaded ? "" : "is-loading")">
  <div class="card p-5 p-4-mobile">
    <ul class="columns is-vcentered is-mobile">
      <li class="column">
        <h1 class="title is-5 is-size-6-mobile has-text-info">
          OKRs - HÀNH ĐỘNG
        </h1>
      </li>
      <li class="column is-narrow">
        <a class="button is-link" href="/okr/tasks/edit">
          <span class="icon">
            <span class="material-icons-outlined is-size-5">add</span>
          </span>
          <span>Thêm</span>
          <span class="is-hidden-mobile ml-1">hành động</span>
        </a>
      </li>
    </ul>
    <ul class="columns is-variable is-2 is-mobile is-multiline">
      <li class="column is-one-quarter-tablet is-half-mobile">
        <div class="select is-fullwidth">
          <select @onchange="ChangeDepartment" class="is-family-code">
            <option value="">Tất cả phòng ban</option>
            @foreach (var item in departments)
            {
              <option value="@item.id">@item.name</option>
            }
          </select>
        </div>
      </li>
      <li class="column is-one-quarter-tablet is-half-mobile">
        <div class="control has-icons-right has_suggest">
          <input class="input" type="text" placeholder="Nhập tên nhân viên..."
                 autocomplete="off" @bind="UserSearch" @bind:event="oninput" />
          <ul class="suggest">
            @foreach (var item in userSuggests)
            {
              <li class="rsitem" @onclick="() => UserSelected(item)">
                <div class="user_item">
                  <img class="image is-24x24 mr-2" src="@item.avatar" alt="IMG">
                  <span>@item.FullName</span>
                </div>
              </li>
            }
          </ul>
          <span class="icon is-right">
            <i class="material-icons-outlined">search</i>
          </span>
        </div>
      </li>
      <li class="column is-one-quarter-tablet is-full-mobile">
        <div class="field has-addons">
          <div class="control">
            <span class="button is-link">
              <span class="icon">
                <i class="material-icons-outlined">calendar_today</i>
              </span>
            </span>
          </div>
          <div class="control is-expanded">
            <div class="input">
              <DateRangePicker @bind-StartDate="filterStart" @bind-EndDate="filterEnd" />
            </div>
          </div>
        </div>
      </li>
      <li class="column is-narrow-tablet">
        <div class="select is-fullwidth">
          <select @bind="filterStatus">
            <option value="0">- Trạng thái -</option>
            @foreach (var sl in DbOkrTask.Status())
            {
              <option value="@sl.id">@sl.name</option>
            }
          </select>
        </div>
      </li>
      <li class="column is-narrow-mobile has-text-right">
        <a class="button is-link is-outlined" @onclick="Search">
          <span class="icon">
            <i class="material-icons-outlined">search</i>
          </span>
          <span>Lọc</span>
        </a>
      </li>
    </ul>
    <table class="table is-fullwidth is-striped is-noborder is-responsive mt-5">
      <thead>
        <tr>
          <th width="35%">Hành động</th>
          <th>Kết quả</th>
          <th width="110px">Bắt đầu</th>
          <th width="110px">Kết thúc</th>
          <th width="100px">Trạng thái</th>
        </tr>
      </thead>
      <tbody>
        @for (int o = 0; o < okrList.Count; o++)
        {
          var okr = okrList[o];
          <tr>
            <td colspan="5">
              @if (o > 0)
              {
                <hr class="mt-2 mb-3" />
              }
              <div class="has-text-weight-semibold is-size-6">
                <span class="has-text-link">O</span>
                <span class="has-text-info">• @okr.name</span>
              </div>
            </td>
          </tr>
          @foreach (var kr in okr.key_results)
          {
            var tasks = dataList.Where(x => x.kr == kr.id && x.okr == okr.id).ToList();

            <tr>
              <td colspan="5" class="pl-">
                <div class="has-text-weight-semibold">
                  <span class="has-text-link">K</span>
                  <span class="has-text-info">• @kr.name</span>
                </div>
              </td>
            </tr>
            @foreach (var task in tasks)
            {
              var status = DbOkrTask.Status(task.status);

              <tr>
                <td class="pl-5">
                  <label class="td-label">Công việc</label>
                  <div class="td-value has-text-weight-medium">
                    @if (Layout.User.id == task.user)
                    {
                      <a class="has-text-info pl-3 pl-0-mobile text_1_line" @onclick="() => EditItem(task)" title="@task.name">
                        • @task.name
                      </a>
                    }
                    else
                    {
                      <span class="has-text-info pl-3 pl-0-mobile text_1_line" onclick="toggleText(this)" title="@task.name">
                        • @task.name
                      </span>
                    }
                  </div>
                </td>
                <td>
                  <label class="td-label">Kết quả</label>
                  <div class="td-value">
                    <div class="text_1_line" onclick="toggleText(this)">
                      @if (!string.IsNullOrEmpty(task.link))
                      {
                        <a class="icon-text mr-4 has-text-link" href="@task.link" target="_blank">
                          <span class="icon is-small">
                            <i class="material-icons-outlined">attach_file</i>
                          </span>
                          <span>Kế hoạch</span>
                        </a>
                      }
                      @((MarkupString)Shared.GetLinks(task.result))
                    </div>
                  </div>
                </td>
                <td>
                  <label class="td-label">Bắt đầu</label>
                  <div class="td-value">
                    @string.Format("{0:dd/MM/yyyy}", new DateTime(task.start))
                  </div>
                </td>
                <td width="110px">
                  <label class="td-label">Kết thúc</label>
                  <div class="td-value">
                    @string.Format("{0:dd/MM/yyyy}", new DateTime(task.end))
                  </div>
                </td>
                <td width="110px" align="center">
                  <label class="td-label">Trạng thái</label>
                  <div class="td-value has-text-weight-semibold">
                    <span class="@status.color">@status.name</span>
                  </div>
                </td>
              </tr>
            }
          }
        }
      </tbody>
    </table>
  </div>
</section>

@if (current != null)
{
  var status = DbOkrTask.Status(current.status);

  <div class="modal is-active">
    <div class="modal-background"></div>
    <div class="modal-card">
      <div class="modal-card-head">
        <div class="modal-card-title">
          Thông tin hành động
        </div>
        <a class="delete" @onclick="() => current = null"></a>
      </div>
      <form @onsubmit="Update" class="modal-card-body">
        <ul class="columns is-multiline">
          <li class="column is-full">
            <div class="field">
              <label class="label">Tên hành động *</label>
              <div class="control">
                <input @bind="current.name" type="text" class="input" placeholder="Nhập tiêu đề hành động" />
              </div>
            </div>
          </li>
          <li class="column is-one-third">
            <div class="field">
              <label class="label">Ngày bắt đầu *</label>
              <div class="control has-icons-left">
                <div class="input">
                  <DateRangePicker SingleDatePicker="true" @bind-StartDate="StartDate" />
                </div>
                <span class="icon is-left">
                  <i class="material-icons-outlined">
                    calendar_today
                  </i>
                </span>
              </div>
            </div>
          </li>
          <li class="column is-one-third">
            <div class="field">
              <label class="label">Ngày kết thúc *</label>
              <div class="control has-icons-left">
                <div class="input">
                  <DateRangePicker SingleDatePicker="true" @bind-StartDate="EndDate" />
                </div>
                <span class="icon is-left">
                  <i class="material-icons-outlined">
                    calendar_today
                  </i>
                </span>
              </div>
            </div>
          </li>
          <li class="column is-one-third">
            <div class="field">
              <label class="label">Trạng thái</label>
              <div class="control">
                <div class="select is-fullwidth @status.color.Replace("has-text", "is")">
                  <select @bind="current.status">
                    @foreach (var sl in DbOkrTask.Status())
                    {
                      <option value="@sl.id">@sl.name</option>
                    }
                  </select>
                </div>
              </div>
            </div>
          </li>
          <li class="column is-full">
            <div class="field">
              <label class="label">Link kế hoạch</label>
              <div class="control">
                <input @bind="current.link" type="url" class="input" placeholder="Nhập link kế hoạch" />
              </div>
            </div>
          </li>
          <li class="column is-full">
            <div class="field">
              <label class="label">Kết quả hành động</label>
              <div class="control">
                <textarea @bind="current.result" class="textarea" rows="3" placeholder="Mô tả kết quả hành động" />
              </div>
            </div>
          </li>
        </ul>
        <div class="field mt-5">
          <div class="buttons is-right">
            <a class="button" @onclick="() => current = null">
              Hủy
            </a>
            <a class="button is-danger" @onclick="() => DeleteItem(current)">
              <span class="icon">
                <span class="material-icons-outlined is-size-6">
                  cancel
                </span>
              </span>
              <span>Xóa</span>
            </a>
            <a class="button is-link" @onclick="Update">
              <span class="icon">
                <span class="material-icons-outlined is-size-6">
                  done
                </span>
              </span>
              <span>Cập nhật</span>
            </a>
          </div>
        </div>
      </form>
    </div>
  </div>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }

  private bool _loaded = false;
  private bool _success = false;
  private string _message = string.Empty;
  private string _title = "OKRs - Hành động";

  private List<OkrTaskModel> dataList = new();
  private List<OkrModel> okrList = new();
  private OkrTaskModel current = null;
  DateTimeOffset? StartDate { get; set; }
  DateTimeOffset? EndDate { get; set; }

  private List<DepartmentModel.SelectList> departments = new();
  private string filterDepartment = string.Empty;
  private string filterUserName = string.Empty;
  private string filterUserId = string.Empty;
  private int filterStatus = 0;
  private DateTimeOffset? filterStart { get; set; }
  private DateTimeOffset? filterEnd { get; set; }
  private List<UserModel> userSuggests = new();

  protected override async Task OnInitializedAsync()
  {
    departments.AddRange(DbDepartment.GetSelectList(Layout.Company.id, null, 0, null));
    filterUserId = Layout.User.id;
    await Search();
  }

  private async Task Search()
  {
    _loaded = false;
    DateTime? start = null;
    if (filterStart != null) start = filterStart.Value.DateTime;
    DateTime? end = null;
    if (filterEnd != null) end = filterEnd.Value.DateTime;

    okrList = DbOkr.GetList(Layout.Company.id, Layout.CycleId, filterUserId);
    dataList = await DbOkrTask.GetList(Layout.Company.id, Layout.CycleId, filterUserId, start, end);
    if (filterStatus != 0)
      dataList = dataList.Where(x => x.status == filterStatus).ToList();
    _loaded = true;
  }

  private void ChangeDepartment(ChangeEventArgs e)
  {
    filterDepartment = e.Value.ToString();
    filterUserName = string.Empty;
    userSuggests = new();
  }

  private string UserSearch
  {
    get => filterUserName;
    set
    {
      filterUserName = value;
      userSuggests = new();
      if (!string.IsNullOrEmpty(value))
      {
        foreach (var item in Layout.UserList)
        {
          bool check = true;
          if (!string.IsNullOrEmpty(filterDepartment))
            if (item.departments_id == null || !item.departments_id.Contains(filterDepartment))
              check = false;
          if (!Handled.Shared.SearchKeyword(filterUserName, item.FullName))
            check = false;

          if (check)
            userSuggests.Add(item);
        }
      }
    }
  }

  private void UserSelected(UserModel item)
  {
    filterUserId = item.id;
    filterUserName = item.FullName;
    userSuggests = new();
  }

  private async Task DeleteItem(OkrTaskModel item)
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa: {item.name}"))
      return;

    if (await DbOkrTask.Delete(Layout.Company.id, item.id))
    {
      dataList.Remove(item);
      current = null;
    }
    else
    {
      _message = "Không thể xóa mục này, vui lòng thử lại !";
      _success = false;
    }
  }

  private void EditItem(OkrTaskModel item)
  {
    current = item;
    StartDate = new DateTime(current.start);
    EndDate = new DateTime(current.end);
  }

  private async Task Update()
  {
    _success = false;
    _message = string.Empty;

    if (string.IsNullOrEmpty(current.name) || StartDate == null || EndDate == null)
    {
      _message = "Nhập các trường bắt buộc (*)";

      await Task.Delay(5000);
      _message = string.Empty;
    }
    else
    {
      current.start = StartDate.Value.DateTime.Ticks;
      current.end = EndDate.Value.DateTime.Ticks;
      await DbOkrTask.Update(Layout.Company.id, current);

      current = null;

      await Search();
    }
  }
}