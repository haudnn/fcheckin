@page "/okr/tasks/edit"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

@if (!string.IsNullOrEmpty(_message))
{
  <div id="notify">
    <div class="notification is-@(_success ? "success" : "danger")">
      <button class="delete" @onclick="() => _message = string.Empty"></button>
      <p>@((MarkupString)_message)</p>
    </div>
  </div>
}

<section class="p-4 scrolly @(_loaded ? "" : "is-loading")" style="max-height: calc(100vh - 60px);">
  <div class="card p-5" style="padding-bottom: 220px !important;">
    <ul class="columns is-vcentered is-mobile">
      <li class="column">
        <h1 class="title is-5 is-size-6-mobile has-text-info">
          OKRs - HÀNH ĐỘNG
        </h1>
      </li>
      <li class="column has-text-right">
        <a class="button" onclick="goBack()">
          <span class="icon">
            <i class="material-icons-outlined">arrow_back_ios</i>
          </span>
          <span>Quay lại</span>
        </a>
      </li>
    </ul>
    <table class="table is-fullwidth is-noborder is-responsive mt-5">
      <thead>
        <tr class="tr-hide">
          <th width="40%">Hành động</th>
          <th>Kết quả</th>
          <th width="110px">Bắt đầu</th>
          <th width="110px">Kết thúc</th>
          <th width="100px">Trạng thái</th>
        </tr>
      </thead>
      <tbody>
        @for (int o = 0; o < okrList.Count; o++)
        {
          var okr = okrList[o];
          <tr>
            <td colspan="5">
              @if (o > 0)
              {
                <hr class="mt-2 mb-3 is-hidden-mobile" />
              }
              <div class="has-text-weight-semibold is-size-6">
                <span class="has-text-link">O</span>
                <a class="has-text-info">• @okr.name</a>
              </div>
            </td>
          </tr>
          @foreach (var kr in okr.key_results)
          {
            var tasks = dataList.Where(x => x.kr == kr.id && x.okr == okr.id).ToList();

            <tr>
              <td colspan="5" class="pl-5">
                <hr class="mt-2 mb-3" />
                <div class="field is-grouped">
                  <div class="control is-expanded has-text-weight-semibold">
                    <span class="has-text-link">K</span>
                    <a class="has-text-info">• @kr.name</a>
                  </div>
                  <div class="control" style="width: 90px;">
                    <a class="button is-fullwidth is-link is-outlined" title="Thêm hành động"
                       @onclick="() => Add(okr.id, kr.id)">
                      <span class="icon">
                        <span class="material-icons-outlined">add</span>
                      </span>
                      <span>Thêm</span>
                    </a>
                  </div>
                </div>
              </td>
            </tr>
            @foreach (var task in tasks)
            {
              var status = DbOkrTask.Status(task.status);
              DateTimeOffset? start = new DateTime(task.start);
              DateTimeOffset? end = new DateTime(task.end);

              <tr>
                <td class="pl-5">
                  <label class="td-label">Công việc</label>
                  <div class="td-value">
                    <div class="field has-addons">
                      <div class="control">
                        <a class="button has-text-danger" title="Xóa" @onclick="() => DeleteItem(task)">
                          <span class="icon">
                            <i class="material-icons-outlined is-size-5">close</i>
                          </span>
                        </a>
                      </div>
                      <div class="control is-expanded">
                        <input @bind="task.name" type="text" class="input has-text-weight-semibold" placeholder="Nhập tiêu đề hành động..." />
                      </div>
                    </div>
                    <div class="field mt-1">
                      <div class="control has-icons-left">
                        <input @bind="task.link" type="text" class="input is-italic" placeholder="Nhập link kế hoạch.." />
                        <span class="icon is-left has-text-link">
                          <i class="material-icons-outlined">add_link</i>
                        </span>
                      </div>
                    </div>
                  </div>
                </td>
                <td>
                  <label class="td-label">Kết quả</label>
                  <div class="td-value">
                    <textarea @bind="task.result" type="text" class="textarea" rows="3" placeholder="Nhập kết quả..." />
                  </div>
                </td>
                <td colspan="2">
                  <label class="td-label">Thời gian</label>
                  <div class="td-value">
                    <div class="field has-addons">
                      <div class="control is-expanded">
                        <div class="input">
                          <DateRangePicker SingleDatePicker="true" @bind-StartDate="start"
                              OnSelectionStart="(DateTimeOffset date) => DatePickerChange(date , task, true)" />
                        </div>
                      </div>
                      <div class="control is-expanded">
                        <div class="input">
                          <DateRangePicker SingleDatePicker="true" @bind-StartDate="end" MinDate="start"
                              OnSelectionStart="(DateTimeOffset date) => DatePickerChange(date , task, false)" />
                        </div>
                      </div>
                    </div>
                  </div>
                </td>
                <td align="center">
                  <label class="td-label">Trạng thái</label>
                  <div class="td-value">
                    <div class="select is-fullwidth @status.color.Replace("has-text", "is")">
                      <select @bind="task.status">
                        @foreach (var sl in statusList)
                        {
                          <option value="@sl.id">@sl.name</option>
                        }
                      </select>
                    </div>
                  </div>
                </td>
              </tr>
            }
          }
        }
      </tbody>
    </table>
    <hr />
  </div>
</section>

<section class="buttons_footer px-5 py-3">
  <div class="buttons is-right mr-6">
    <a class="button is-danger is-outlined" onclick="goBack()">
      <span class="icon">
        <i class="material-icons-outlined is-size-6">cancel</i>
      </span>
      <span>Hủy nhập</span>
    </a>
    <a class="button is-link" @onclick="Update">
      <span class="icon">
        <i class="material-icons-outlined is-size-6">done</i>
      </span>
      <span>Cập nhật</span>
    </a>
  </div>
</section>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }

  private bool _loaded = false;
  private bool _success = false;
  private string _message = string.Empty;
  private string _title = "OKRs - Hành động";

  private List<OkrTaskModel> dataList = new();
  private List<OkrModel> okrList = new();
  private List<StaticModel> statusList = new();

  private Dictionary<string, DateTimeOffset> dateStart { get; set; }
  private Dictionary<string, DateTimeOffset> dateEnd { get; set; }

  protected override async Task OnInitializedAsync()
  {
    statusList = DbOkrTask.Status();
    okrList = DbOkr.GetList(Layout.Company.id, Layout.CycleId, Layout.User.id);
    dataList = await DbOkrTask.GetList(Layout.Company.id, Layout.CycleId, Layout.User.id, null, null);

    dateStart = new();
    dateEnd = new();
    foreach (var task in dataList)
    {
      dateStart.Add(task.id, new DateTime(task.start));
      dateEnd.Add(task.id, new DateTime(task.end));
    }
    _loaded = true;
  }

  private async Task DeleteItem(OkrTaskModel item)
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa: {item.name}"))
      return;

    dataList.Remove(item);
    await DbOkrTask.Delete(Layout.Company.id, item.id);
  }

  private void DatePickerChange(DateTimeOffset date, OkrTaskModel item, bool isStart)
  {
    if(isStart)
      item.start = date.DateTime.Ticks;
    else
      item.end = date.DateTime.Ticks;
  }

  private void Add(string okrId, string krId)
  {
    var item = new OkrTaskModel()
    {
      id = Mongo.RandomId(),
      user = Layout.User.id,
      okr = okrId,
      kr = krId,
      start = Convert.ToDateTime(DateTime.Now.ToShortDateString()).Ticks,
      end = Convert.ToDateTime(DateTime.Now.ToShortDateString()).Ticks,
      status = 1
    };
    dataList.Add(item);
    dateStart.Add(item.id, new DateTime(item.start));
    dateEnd.Add(item.id, new DateTime(item.end));
  }

  private bool CheckItem()
  {
    foreach (var item in dataList)
    {
      if (item.name == null || string.IsNullOrEmpty(item.name.Trim()))
        return false;
    }
    return true;
  }

  private async Task Update()
  {
    _success = false;
    _message = string.Empty;

    if(CheckItem() == false)
    {
      _message = "Có hành động chưa nhập tiêu đề, vui lòng nhập tiêu đề cho tất cả hành động hoặc xóa hành động không cần thiết !";
      await Task.Delay(10000);
      _message = string.Empty;
    }
    else
    {
      foreach (var item in dataList)
      {
        if (string.IsNullOrEmpty(item.cycle))
        {
          item.cycle = Layout.CycleId;
          await DbOkrTask.Create(Layout.Company.id, item);
        }
        else
        {
          await DbOkrTask.Update(Layout.Company.id, item);
        }
      }

      _message = "Đã cập nhật hành động cho OKRs !";
      _success = true;
    }
  }
}