@page "/okr/setup/suggest"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

@if (!string.IsNullOrEmpty(_message))
{
  <div id="notify">
    <div class="notification is-@(_success ? "success" : "danger")">
      <button class="delete" @onclick="() => _message = string.Empty"></button>
      <p>@((MarkupString)_message)</p>
    </div>
  </div>
}

<section class="p-4 @(_loaded ? "" : "is-loading")">
  <div class="card p-5 p-4-mobile">
    <ul class="columns is-vcentered is-variable is-2 is-mobile is-multiline">
      <li class="column is-full-mobile">
        <h1 class="title is-5 is-size-6-mobile has-text-info">
          OKRs - GÓP Ý MỤC TIÊU
        </h1>
      </li>
      <li class="column is-one-fifth">
        <div class="select is-fullwidth">
          <select @onchange="ChangeType">
            <option value="">Chọn lý do</option>
            @foreach (var sl in Layout.OkrConfig.suggests)
            {
              <option value="@sl.id">@sl.name</option>
            }
          </select>
        </div>
      </li>
      <li class="column is-one-fifth is-narrow-mobile">
        <div class="select is-fullwidth">
          <select @onchange="ChangeDepartment" class="is-family-code">
            <option value="">GÓP Ý CỦA TÔI</option>
            @foreach (var item in departments)
            {
              var count = database.Where(x => x.department == item.id).Count();
              <option value="@item.id">@item.name @(count > 0 ? $"({count})" : "")</option>
            }
          </select>
        </div>
      </li>
      <li class="column is-narrow">
        <a class="button is-link" @onclick="Edit">
          <span class="icon">
            <i class="material-icons-outlined is-size-6">add</i>
          </span>
          <span>Thêm mới</span>
        </a>
      </li>
    </ul>
    <table class="table is-striped is-noborder is-fullwidth is-responsive mt-5">
      <thead>
        <tr>
          <th>Nội dung góp ý</th>
          <th width="15%">Gửi đến</th>
          <th width="20%">Lý do bạn muốn góp ý</th>
          <th width="160px">Ngày gửi</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var item in dataList)
        {
          var type = Layout.OkrConfig.suggests.SingleOrDefault(x => x.id == item.type);
          var department = departmentAll.SingleOrDefault(x => x.id == item.department);

          <tr>
            <td>
              <div class="is-word-break">
                @((MarkupString)Shared.GetLinks(item.name))
              </div>
            </td>
            <td>
              <label class="td-label">Gửi đến</label>
              <div class="td-value">
                @(department != null ? department.name : "TỔNG CÔNG TY")
              </div>
            </td>
            <td>
              <label class="td-label">Lý do</label>
              <div class="td-value">
                @(type != null ? type.name : "Không xác định")
              </div>
            </td>
            <td>
              <label class="td-label">Ngày gửi</label>
              <div class="td-value">
                @string.Format("{0:HH:mm - dd/MM/yyyy}", new DateTime(item.date))
              </div>
            </td>
          </tr>
        }
      </tbody>
    </table>
  </div>
</section>

@if (drafts != null)
{
  <div class="modal is-active">
    <div class="modal-background"></div>
    <div class="modal-card is-medium">
      <div class="modal-card-head">
        <div class="modal-card-title is-uppercase">
          Tạo góp ý mục tiêu
        </div>
        <a class="delete" @onclick="() => drafts = null"></a>
      </div>
      <div class="modal-card-body">
        @foreach (var item in drafts)
        {
          <div class="field mb-5">
            <div class="columns is-variable is-2">
              <div class="column is-two-fifths">
                <div class="field">
                  <label class="label">Gửi đến *</label>
                  <div class="control">
                    <div class="select is-fullwidth is_bg">
                      <select @bind="item.department" class="is-family-code">
                        <option value="">Chọn phòng ban</option>
                        @foreach (var sl in departments)
                        {
                          <option value="@sl.id">@sl.name</option>
                        }
                      </select>
                    </div>
                  </div>
                </div>
                <div class="field">
                  <label class="label">Lý do bạn muốn góp ý *</label>
                  <div class="control">
                    <div class="select is-fullwidth is_bg">
                      <select @bind="item.type">
                        <option value="">Chọn lý do</option>
                        @foreach (var sl in Layout.OkrConfig.suggests)
                        {
                          <option value="@sl.id">@sl.name</option>
                        }
                      </select>
                    </div>
                  </div>
                </div>
              </div>
              <div class="column is-three-fifths">
                <div class="field">
                  <label class="label">
                    <span>Nội dung mục góp ý *</span>
                    <a class="icon is-pulled-right has-text-info" @onclick="() => DeleteItem(item)">
                      <i class="material-icons-outlined">close</i>
                    </a>
                  </label>
                  <div class="control">
                    <textarea @bind="item.name" class="textarea is_bg" 
                              placeholder="Bạn muốn công ty dành nguồn lực tập trung vào mục tiêu / điều gì trong quý tới... " />
                  </div>
                </div>
              </div>
            </div>
          </div>
        }
        <div class="field">
          <div class="buttons is-right">
            <a class="button" @onclick="Add">
              <span class="icon">
                <i class="material-icons-outlined is-size-6">add</i>
              </span>
              <span>Thêm</span>
            </a>
            <a class="button is-link is-outlined" @onclick="() => Update(true)">
              <span class="icon">
                <i class="material-icons-outlined is-size-6">save</i>
              </span>
              <span>Lưu nháp</span>
            </a>
            <a class="button is-link" @onclick="() => Update(false)">
              <span class="icon">
                <i class="material-icons-outlined is-size-6">done</i>
              </span>
              <span>Gửi góp ý</span>
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }

  private bool _loaded = false;
  private bool _success = false;
  private string _message = string.Empty;
  private string _title = "OKRs - Góp ý mục tiêu";

  private List<SuggestModel> database = new();
  private List<SuggestModel> dataList = new();
  private List<SuggestModel> drafts = null;

  private List<DepartmentModel> departmentAll = new();
  private List<DepartmentModel.SelectList> departments = new();
  private string departmentId = string.Empty;
  private string typeId = string.Empty;

  protected override async Task OnInitializedAsync()
  {
    departmentAll.AddRange(DbDepartment.GetAll(Layout.Company.id));
    departments.AddRange(DbDepartment.GetSelectList(Layout.Company.id, null, 0, null));
    database = DbOkrSuggest.GetAll(Layout.Company.id, Layout.CycleId);
    await Search();
    _loaded = true;
  }

  private async Task Search()
  {
    if (string.IsNullOrEmpty(departmentId))
      dataList = await DbOkrSuggest.GetList(Layout.Company.id, Layout.CycleId, null, Layout.User.id);
    else
      dataList = await DbOkrSuggest.GetList(Layout.Company.id, Layout.CycleId, departmentId, null);
    if (!string.IsNullOrEmpty(typeId))
      dataList = dataList.Where(x => x.type == typeId).ToList();
  }

  private async Task ChangeType(ChangeEventArgs e)
  {
    typeId = e.Value.ToString();
    await Search();
  }

  private async Task ChangeDepartment(ChangeEventArgs e)
  {
    departmentId = e.Value.ToString();
    await Search();
  }

  private async Task DeleteItem(SuggestModel item)
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa mục này"))
      return;

    drafts.Remove(item);
    await DbOkrSuggest.Delete(Layout.Company.id, item.id);
  }

  private async Task Add()
  {
    _message = departmentId;

    var item = new SuggestModel()
    {
      user = Layout.User.id,
      cycle = Layout.CycleId,
      department = departmentId,
      draft = true
    };

    item = await DbOkrSuggest.Create(Layout.Company.id, item);

    drafts.Add(item);
  }

  private async Task Edit()
  {
    drafts = await DbOkrSuggest.GetDrafts(Layout.Company.id, Layout.CycleId, Layout.User.id);

    if (drafts.Count == 0)
      await Add();
  }

  private async Task Update(bool isDraft)
  {
    _success = false;
    _message = string.Empty;

    if (drafts.Where(x => string.IsNullOrEmpty(x.department)).Count() > 0)
    {
      _message = "Chọn phòng ban cần góp ý !";
      await Task.Delay(5000);
      _message = string.Empty;
    }
    else if (drafts.Where(x => string.IsNullOrEmpty(x.type)).Count() > 0
      || drafts.Where(x => string.IsNullOrEmpty(x.name)).Count() > 0)
    {
      _message = "Nhập các trường bắt buộc (*) hoặc xóa góp ý không cần thiết !";
      await Task.Delay(5000);
      _message = string.Empty;
    }
    else
    {
      foreach (var item in drafts)
      {
        item.date = DateTime.Now.Ticks;
        item.draft = isDraft;
        await DbOkrSuggest.Update(Layout.Company.id, item);
      }

      drafts = null;

      await Search();
    }
  }
}