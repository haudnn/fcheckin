@page "/hrm/timekeeping"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

@if (!CheckAccess())
{
  <_PopupUnauthorized msgAccess="@msgAccess" />
}
else 
{
	<section style="overflow: hidden;">
			@if (Layout.IsMobile && rules != null)
			{
					<div class="columns is-multiline is-mobile" style="height:100%">
							<div class="column is-full">
									<div style="border-bottom: 1px solid #e2e2e2;">
											<ul class="columns is-vcentered is-center is-mobile is-variable is-1">
													<li class="column">
															<div class="py-2 has-text-centered is_border_bottom @(tab == 1 ? "has-text-link" : "")" style="height:100%; @(tab == 1 ? "border-color:#355CAA" : "")" @onclick="() => tab = 1">
																	<span style="margin-left: 0;" class="icon">
																			<i class="material-icons-outlined is-size-6">timelapse</i>
																	</span>
																	<p>Lịch sử</p>
															</div>
													</li>
													<li class="column">
															<div class="py-2 has-text-centered is_border_bottom @(tab == 2 ? "has-text-link" : "")" style="height:100%; @(tab == 2 ? "border-color:#355CAA" : "")" @onclick="() => tab = 2">
																	<span style="margin-left: 0;" class="icon">
																			<i class="material-icons-outlined is-size-6">timer</i>
																	</span>
																	<p>Chấm công</p>
															</div>
													</li>
											</ul>
									</div>
							</div>

							@if (tab == 1)
							{
									<div class="column is-full">
											<TimekeepingList />
									</div>
							}
							<div class="@(tab == 2 ? "column is-full" : "is-hidden")">
									<div style="padding: 0px 16px 16px 16px;" class="has-text-centered">
											@if (!isHybrid)
											{
												<div class="is-flex is-align-items-center is-justify-content-center pb-2">
														<span class="has-text-black" style="line-height: 24px;">Địa điểm:</span>
															<span class="icon-text has-text-weight-medium has-text-link">
																	<span class="icon mr-0">
																		<i class="material-icons-outlined is-size-6">location_on</i>
																	</span>
																	<span>@companyAddress</span>
															</span>
												</div>
											}
											else
											{
												<div class="is-flex is-align-items-center is-justify-content-center pb-2">
													<span class="has-text-black">Địa điểm:</span>
															<span class="ml-1 has-text-weight-medium has-text-link">
																	Chế độ linh động
														</span>
												</div>
											}
											@if (currentShift != null)
											{
													<div class="pb-2 is-flex is-align-items-center is-justify-content-center" style="gap: 0 5px;">
															<span class="has-text-black" style="line-height: 24px;">Ca làm hiện tại:</span>
															<div class="dropdown @(toggleShift ? "is-active" : "") is-right">
																	<div class="dropdown-trigger">
																			@if (isCheckin)
																			{
																					<a class="icon-text" @onclick="ToggleShift">
																							<span class="has-text-link">@(currentShift.name)</span>
																							<span class="icon ml-0">
																									<i class="material-icons-outlined is-size-5">arrow_drop_down</i>
																							</span>
																					</a>
																			}
																			else
																			{
																					<a class="icon-text" style="margin-left: 0;">
																							<span class="has-text-link">@(currentShift.name)</span>
																					</a>
																			}
																	</div>
																	<div class="dropdown-menu">
																			<div class="dropdown-content">
																					@if (shifts != null)
																					{
																							@foreach (var item in shifts)
																							{
																									if (item != null)
																									{
																											<a class="dropdown-item" @onclick="() => ChangeShift(item)">
																													<span class="has-text-weight-semibold">@item.name </span> (@($"{item.checkin} - {item.checkout}"))
																											</a>
																									}
																							}
																					}
																					@if (rules.overtime.is_active)
																					{
																							<a class="dropdown-item has-text-weight-semibold" @onclick="() => ChangeShift(null)">
																									Làm ngoài giờ
																							</a>
																					}
																			</div>
																	</div>
															</div>
													</div>
											}
											else
											{
															if (rules.overtime.is_active)
															{
															<div class="pb-2">
																	<span class="has-text-black">Ca làm hiện tại:</span>
																	<span>Làm ngoài giờ</span>
															</div>
															}
											}
												@if (rules.is_check_device)
												{
													<div class="is-flex is-align-items-center is-justify-content-center">
														<span class="has-text-black mr-1">Thiết bị hiện tại:</span>
														<div class=" @(isValidDevice ? "has-text-success" : "has-text-danger")">
																<span>@(isValidDevice ? "Hợp lệ" : "Không hợp lệ")</span>
														</div>
													</div>
												}
											<div class="timekeeping p-2" style="background: radial-gradient(closest-side, white 89%, transparent 90% 100%), conic-gradient(@hexColor @(PERCENTAGE)%, @(hexColor)30 0);">
													<div class="mb-2 has-text-centered">
															<p class="is-size-7">
																	@DateTime.Today.ToString("dddd, dd/MM/yyyy", System.Globalization.CultureInfo.CreateSpecificCulture("vi-VN"))
															</p>
															<span id="clock" class="is-size-4">
																	@DateTime.Now.ToString("HH:mm:ss")
															</span>
													</div>
													<div>
															@if (isNoShift)
															{
																	<div style="background-color: @hexColor;" class="btn_timekeeping">
																			@(isDayOff ? "Ngày nghỉ" : "Không có ca làm")
																	</div>
															}
															else
															{
																	@if (!isLoading)
																	{
																			if (isCheckin)
																			{
																					<div style="background-color: @textColor;" class="btn_timekeeping" @onclick="Checkin">
																							<a class="is_btn has-text-white">Check in</a>
																					</div>
																			}
																			else
																			{
																					<div style="background-color: @textColor;" class="btn_timekeeping" @onclick="Checkout">
																							<a class="is_btn has-text-white">Check out</a>
																					</div>
																			}
																	}
															}
													</div>
											</div>
											<div class="is-flex is-align-items-center is-justify-content-center">
													@if (!isHybrid)
													{
															<span class="has-text-black" style="line-height: 24px;">Vị trí hiện tại:</span>
															@if (inCompany == null)
															{
																	<span>đang kiểm tra...</span>
															}
															else if (inCompany.Value)
															{
																<span class="icon-text has-text-success">
																	<span class="icon">
																		<i class="material-icons-outlined is-size-6">done</i>
																	</span>
																	<span>Hợp lệ</span>
																</span>
															}
															else
															{
																<span class="icon-text has-text-danger">
																	<span class="icon mr-0" >
																		<i class="material-icons-outlined is-size-6">error_outline</i>
																	</span>
																	<span>Ngoài vị trí</span>
																</span>
															}
													}
											</div>
											@if (!isHybrid)
											{
											<div class="is-family-code @(inCompany == true ? "has-text-success" : "has-text-danger")">
													@((MarkupString)logs)
											</div>
											}
									</div>
									<div class="card p-5 m-4">
											<div class="has-text-weight-medium is-size-6 mb-3 has-text-centered">
													Lịch sử chấm công trong ngày
											</div>
											@if (timekeeping != null)
											{
													<ul class="columns is-mobile is-multiline is-variable is-1" style="line-height: 1.5rem;">
															@for (int item = 0; item < timekeeping.time_tracking.Count(); item += 1)
															{
																	var log = timekeeping.time_tracking[item];
																	if (log.time_type == "Check-in")
																	{
																			var checkout = timekeeping.time_tracking.FirstOrDefault(l => l.time_type == "Check-out" && l.checkin_id == log.checkin_id);
																			var isEarly = HrmService.CheckEarly(log.time_shift, checkout.time_shift, checkout.time_active, checkout.is_overday);
																			<TimekeepingLog checkin="@log" checkout="@checkout" isEarly="@isEarly" />
																			<li class="column is-full">
																					<hr class="my-2" />
																			</li>
																	}
															}
													</ul>
											}
											else
											{
													<div class="has-text-centered">Hôm nay chưa có lịch sử chấm công!</div>
											}
									</div>
									@if (!isDayOff)
									{
											<div class="card m-4 p-5">
													<div class="has-text-weight-medium has-text-centered is-size-6 mb-3">
															Danh sách ca làm trong ngày
													</div>
													@if (shiftList != null && userShift != null)
													{
															<ul class="is-flex is-flex-wrap-wrap" style="gap:5px;">
																	@foreach (var item in userShift.shifts_id)
																	{
																			var shift = shiftsOriginal.FirstOrDefault(i => i.id == item);
																			@if (shift != null)
																			{
																					<span class="tag" style="background-color:#f0f0ff;">
																							<span class="has-text-weight-medium">
																									@shift.name
																							</span>
																					</span>
																			}
																			else
																			{
																					<span class="tag" style="background-color:#f0f0ff;">
																							<span class="has-text-weight-medium">
																									Ca làm đã xoá
																							</span>
																					</span>
																			}
																	}
															</ul>
													}
													else
													{
															<p style="text-align: center" class="mt-2">Bạn không có ca làm trong ngày hôm nay!</p>
													}
													@if (rules.check_in_out.is_in_early && rules.check_in_out.in_early > 0)
													{
															<p style="font-size: 12px;" class="has-text-grey is-italic  mt-2">(*) Bạn chỉ được phép check-in sớm trước ca làm @rules.check_in_out.in_early phút so với giờ bắt đầu ca!</p>
													}
											</div>
									}
							</div>
					</div>
			}
			else
			{
					<section class="p-4" style="height:calc(100vh - 56px)">
							<TimekeepingCalendar />
					</section>
			}
	</section>

	@if (deviceComfirm == false)
	{
		<_WrongDevicePopup deviceCode="@deviceCode" OnConfirm="ConfirmDevice" timeNearest="timeNearest"/>
	}

	@if (outsideConfirm == false)
	{
		<TimekeepingOutside time="earlyTime" checkin="isCheckin" OnConfirm="ConfirmOutside" OffConfirmOutside="OffConfirmOutside" />
	}

	@if (earlyConfirm == false)
	{
		<TimekeepingEarly time="earlyTime" OnConfirm="ConfirmEarly" OffConfirmEarly="OffConfirmEarly" />
	}

	@if (isConfirmOT)
	{
		<TimekeepingOT time="timeDifference" OnConfirm="ConfirmOT" OffConfirmOT="OffConfirmOT" />
	}

}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  private string _title = "Chấm công";
  private string companyName = "Chưa có công ty, phòng ban";
  private string companyAddress = string.Empty;
  private string companyId = string.Empty;
  private string userId = string.Empty;
  private HrmTimekeepingModel timekeeping = null;
  private HrmTimekeepingModel timekeepingPrev = null;
  private List<HrmLocationModel> locationsUser = new();
		private List<HrmLocationModel> locations = new();
  private List<HrmWorkShiftModel> shiftList = new();
  private HrmTimeListModel.Shift userShift = null;
  private bool? inCompany = null;
  private bool isCheckin = true;
  private string hexColor = "";
  private string textColor = "";
  private bool isNoShift = false;
  private bool isLoading = false;
  private bool? outsideConfirm = null;
  private HrmTimekeepingModel.TimeData outsideReason = null;
  private bool? earlyConfirm = null;
  private long earlyTime = 0;
  private string logs = string.Empty;
  private int tab = 2;
  private string msgAccess = string.Empty;
  private System.Threading.Timer timer;
  private HrmWorkShiftModel currentShift = null;
  private HrmTimekeepingModel.TimeData shiftData = null;
  private bool toggleShift = false;
  private bool isChangedShift = false;
  private long timeDifference = 0;
  private bool isOT = false;
  private bool isOverDay = false;
  private bool isConfirmOT = false;
  private HrmRulesModel rules = null;
  private List<HrmWorkShiftModel> shifts = null;
  public bool isHybrid = false;
  private List<HrmWorkShiftModel> shiftsOriginal = null;
  private double CURRENT_TICK = (DateTime.Now - DateTime.Today).TotalSeconds;
  private double MAX_TICK = 24 * 60 * 60;
  private double PERCENTAGE = 0;
  private bool isDayOff = false;
		private string deviceCode = string.Empty;
		private bool? deviceComfirm = null;
		private bool isValidDevice = false;
		private long timeNearest = 0;
		private HrmLocationModel currentLocation = null;


  private bool CheckAccess()
  {
    return ProductService.CheckAccess(Layout.Company, Layout.User, "timekeeping", out msgAccess);
  }

  protected override async Task OnInitializedAsync()
  {
    userId = Layout.User.id;
    companyId = Layout.Company.id;
    companyName = Layout.Company.name;


    PERCENTAGE = CURRENT_TICK / MAX_TICK * 100;
    rules = await DbHrmRules.Get(Layout.Company.id, Layout.Company.id);

				locations = await DbHrmLocation.GetList(companyId, true);
    locationsUser = locations.FindAll(x => x.members_id.Contains(userId)).ToList();

    // Lấy thông tin chấm công	của user
    timekeeping = await DbHrmTimekeeping.Get(companyId, DateTime.Today.ToString("yyMMdd") + userId);

    // Lấy danh ca làm của user ngày hôm nay
    userShift = await DbHrmTimeList.GetByDay(companyId, userId, DateTime.Today.Ticks);

    // Lấy danh sách ca làm của công ty
    shiftList = await DbHrmWorkShift.GetList(companyId);
    shiftsOriginal = new List<HrmWorkShiftModel>(shiftList);

				if (Layout.IsMobile)
					await CheckAvailableDevice();

	 		await RenderButtonStatus();

    if (userShift != null && Layout.IsMobile)
     StartTimer();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender && Layout.IsMobile)
    {
      if (!isHybrid)
       inCompany = await CheckLocation();
      await JSRuntime.InvokeVoidAsync("showClock");
      StateHasChanged();
    }
  }

  private async Task CheckDayOff()
  {
    isDayOff = DbHrmDayOff.CheckOff(companyId, DateTime.Today, userId);
	   isHybrid = Layout.User.is_hybrid;
				if (!isHybrid && Layout.IsMobile)
     inCompany = await CheckLocation();
    if (isDayOff)
      CheckOT();
    else
    {
      if (userShift == null)
        CheckOT();
      else
      {
        shifts = SuggestShift(userShift, shiftList);
        currentShift = shifts.FirstOrDefault();

        if (currentShift != null)
        {
          isCheckin = true;
          isOverDay = currentShift.is_overday;
          GetStateColor(isCheckin);
        }
        else
          CheckOT();
      }
    }
  }

  private void CheckOT()
  {
    if (rules.overtime.is_active)
    {
      isCheckin = true;
      isOT = true;
      hexColor = "#AEC6FF";
      textColor = "#355CAA";
    }
    else
    {
      isNoShift = true;
      hexColor = "#666666";
    }
  }

  public void StartTimer()
  {
    timer = new System.Threading.Timer(async (object stateInfo) =>
    {
      await RenderButtonStatus();
      PERCENTAGE = CURRENT_TICK / MAX_TICK * 100;
      await InvokeAsync(StateHasChanged);
      if (isNoShift)
      {
        timer.Dispose();
      }
    }, new System.Threading.AutoResetEvent(false), 10000, 10000);
  }

  private async Task RenderButtonStatus()
  {
    var timeNow = DateTime.Now.ToString("HH:mm");

    // Nếu đã có data chấm công ở ngày hiện tại
    if (timekeeping != null)
    {
      var data = timekeeping.time_tracking.LastOrDefault();
      // Có ca làm chưa checkout
      if (Shared.IsEmpty(data.time_active))
      {
        isCheckin = false;
        currentShift = shiftList.FirstOrDefault(x => x.id == data.time_id);
        isOT = data.is_ot;
        shiftData = data;
								currentLocation = data.location != null ? locations.FirstOrDefault(x => x.id == data.location.id) : null;
								isHybrid = data.is_hybrid;
        GetStateColor(isCheckin);
      }
      else
      {
        RemoveShift(timekeeping);
        if (!isChangedShift)
         await CheckDayOff();
      }
    }

    // Ngày hiện tại không có data
    else
    {
      // Lấy ngày chưa checkout trong lịch sử
      timekeepingPrev = await DbHrmTimekeeping.GetUnCheckout(companyId, userId);
      // Có ca làm chưa checkout
      if (timekeepingPrev != null)
      {
        // Lấy record cuối cùng
        var data = timekeepingPrev.time_tracking.Last();
        isCheckin = false;
        currentShift = shiftList.FirstOrDefault(x => x.id == data.time_id);
        shiftData = data;
        isOT = data.is_ot;
        isOverDay = data.is_overday || data.is_ot;
								currentLocation = data.location != null ? locations.FirstOrDefault(x => x.id == data.location.id) : null;
        GetStateColor(isCheckin);
      }
      else
      {
        if (!isChangedShift)
         await CheckDayOff();
      }
    }
  }

  // Xóa những ca làm đã checkout để không đề xuất lại nữa
  public void RemoveShift(HrmTimekeepingModel timekeeping)
  {
    shiftList.RemoveAll(s => timekeeping.time_tracking.Any(t => t.time_id == s.id && t.time_type == "Check-out" && !Shared.IsEmpty(t.time_active)));
  }

  // Đề xuất ca làm
  private List<HrmWorkShiftModel> SuggestShift(HrmTimeListModel.Shift userShift, List<HrmWorkShiftModel> shiftList)
  {
    return HrmService.SuggestShift(userShift, shiftList, rules.check_in_out.is_in_early ? rules.check_in_out.in_early : 0);
  }

  private async Task Checkin()
  {
    isLoading = true;
    inCompany = null;

    var now = DateTime.Now;

    if (!isHybrid)
      inCompany = await CheckLocation();
    else
      inCompany = true;

    if (inCompany != true && outsideConfirm != true)
      outsideConfirm = false;
    else
    {
      var checkinId = Mongo.RandomId();

      var checkin = new HrmTimekeepingModel.TimeData()
      {
       time_name = "Làm ngoài giờ",
       time_type = "Check-in",
       checkin_id = checkinId,
       time_active = now.ToString("HH:mm"),
       time_active_tick = now.Ticks,
       in_company = inCompany.Value,
       is_ot = isOT,
       is_valid = true,
							is_valid_device = isValidDevice,
							is_hybrid = isHybrid,
							location = isHybrid ? null : new HrmTimekeepingModel.Location()
							{
								id = currentLocation.id,
								name = currentLocation.name,
							}
      };

      var checkout = new HrmTimekeepingModel.TimeData()
      {
       time_name = "Làm ngoài giờ",
       checkin_id = checkinId,
       time_type = "Check-out",
       is_ot = isOT,
							is_hybrid = isHybrid,
							location = isHybrid ? null : new HrmTimekeepingModel.Location()
							{
								id = currentLocation.id,
								name = currentLocation.name,
							}
      };

      if (!isOT)
      {
        var timeDifference = CompareTime(currentShift.checkin, now.ToString("HH:mm"));
        // Nếu có quy định checkin trễ
        checkin.is_valid = rules.check_in_out.is_in_late ? timeDifference <= rules.check_in_out.in_late : true;
        checkin.time_name = currentShift.name;
        checkin.time_id = currentShift.id;
        checkin.time_shift = currentShift.checkin;
        checkin.time_work = currentShift.value;
        checkin.time_difference = timeDifference;
        checkin.is_overday = currentShift.is_overday;
								

        checkout.time_name = currentShift.name;
        checkout.time_id = currentShift.id;
        checkout.time_shift = currentShift.checkout;
        checkout.time_work = currentShift.value;
        checkout.is_overday = currentShift.is_overday;
      }
      if (inCompany == false && outsideReason != null)
      {
        checkin.reason = outsideReason.reason;
        checkin.note = outsideReason.note;
        checkin.images = outsideReason.images;
      }
      if (timekeeping == null)
        timekeeping = new() { user = userId };

      timekeeping.time_tracking.AddRange(new[] { checkin, checkout });
      if (Shared.IsEmpty(timekeeping.id))
      {
        timekeeping.date = DateTime.Today.Ticks;
        timekeeping.id = DateTime.Today.ToString("yyMMdd") + userId;
        await DbHrmTimekeeping.Create(companyId, timekeeping);
      }
      else
        await DbHrmTimekeeping.Update(companyId, timekeeping);

      isChangedShift = false;
      isOverDay = false;
						currentLocation = null;
    }
    await RenderButtonStatus();
    isLoading = false;
  }

  private async Task Checkout()
  {
    isLoading = true;
    inCompany = null;
    timeDifference = 0;
    var now = DateTime.Now;
    var timeNow = now.ToString("HH:mm");
    var timeNowTick = now.Ticks;

    if (!isOT)
    {
      if (currentShift.is_overday)
      {
        var data = timekeeping != null ?
          timekeeping.time_tracking.FirstOrDefault(x => x.checkin_id == shiftData.checkin_id && x.time_type == "Check-in") :
          timekeepingPrev.time_tracking.FirstOrDefault(x => x.checkin_id == shiftData.checkin_id && x.time_type == "Check-in");

        timeDifference = HrmService.CheckTimeDifference(timeNowTick, data.time_active_tick, currentShift.checkout);
      }
      else
        timeDifference = CompareTime(timeNow, currentShift.checkout);
    }

    if (!isHybrid && !shiftData.is_hybrid)
      inCompany = await CheckLocation();
    else
      inCompany = true;

    if (inCompany != true && outsideConfirm != true)
    {
      outsideConfirm = false;
      earlyTime = timeDifference > 0 ? timeDifference : 0;
      earlyTime = isOT ? 0 : timeDifference;
    }
    else
    {
      if (timeDifference > 0 && earlyConfirm != true)
      {
        earlyTime = timeDifference;
        earlyConfirm = false;
      }
      else
      {
        // Chấm công ngoài công ty
        if (inCompany == false && outsideReason != null)
        {
          shiftData.reason = outsideReason.reason;
          shiftData.note = outsideReason.note;
          shiftData.images = outsideReason.images;
        }
        // Nếu checkout ca OT
        if (isOT)
        {
          // Kiểm tra thời gian tối thiểu OT
          long timeOT = 0;
          if (rules.overtime.is_active && rules.overtime.min_minutes > 0)
          {
            var shift = new HrmTimekeepingModel.TimeData();
            // Kiểm tra thời gian checkin là ngày trước hay hôm nay
            if (timekeepingPrev != null)
            {
              shift = timekeepingPrev.time_tracking.FirstOrDefault(x => x.checkin_id == shiftData.checkin_id);
              timeOT = timeNowTick - shift.time_active_tick;
            }
            else
            {
              shift = timekeeping.time_tracking.FirstOrDefault(x => x.checkin_id == shiftData.checkin_id);
              timeOT = CompareTime(shift.time_active, timeNow);
            }
            if (timeOT < rules.overtime.min_minutes)
            {
              await JSRuntime.InvokeVoidAsync("tagline", false, "Thời gian tối thiểu của 1 ca làm ngoài giờ là " + rules.overtime.min_minutes + " phút!");
              isLoading = false;
              return;
            }
          }
          shiftData.time_active = timeNow;
          shiftData.time_active_tick = now.Ticks;
          shiftData.in_company = inCompany.Value;
          shiftData.is_valid = true;
          shiftData.time_difference = timeOT;
										shiftData.is_valid_device = isValidDevice;
        }
        else
        {
          // Checkout trễ
          if (timeDifference <= 0)
          {
            var caculate = CompareTime(currentShift.checkout, timeNow);
            if (rules.overtime.is_active && caculate > rules.overtime.min_minutes)
              isConfirmOT = true;
            else
            {
              shiftData.time_active = timeNow;
              shiftData.time_active_tick = now.Ticks;
              shiftData.in_company = inCompany.Value;
              shiftData.is_valid = true;
              shiftData.time_difference = timeDifference;
														shiftData.is_valid_device = isValidDevice;
            }
          }
          // Checkout sóm || đúng giờ
          else
          {
            shiftData.time_active = timeNow;
            shiftData.time_active_tick = now.Ticks;
            shiftData.in_company = inCompany.Value;
            shiftData.time_difference = timeDifference;
												shiftData.is_valid_device = isValidDevice;
            shiftData.is_valid = rules.check_in_out.is_out_early ? timeDifference <= rules.check_in_out.out_early : true;
          }
        }
        await UpdateCheckout();
        isOT = false;
        isChangedShift = false;
        isOverDay = false;
      }
    }
    await RenderButtonStatus();;
    isLoading = false;
  }

  private async Task UpdateCheckout()
  {
    // Nếu là ca qua ngày thì update ca ngày trước đó
    if (isOverDay)
    {
      shiftData = timekeepingPrev.time_tracking.Last();
      await DbHrmTimekeeping.Update(companyId, timekeepingPrev);
    }
    // Nếu không phải ca qua ngày thì update ngày hiện tại
    else
    {
      shiftData = timekeeping.time_tracking.Last();
      await DbHrmTimekeeping.Update(companyId, timekeeping);
    }
  }

  private async Task ConfirmOutside(HrmTimekeepingModel.TimeData data)
  {
    if (data != null)
    {
      outsideConfirm = true;
      outsideReason = data;
      earlyConfirm = true;
      if (isCheckin)
        await Checkin();
      else
        await Checkout();
    }
    OffConfirmOutside();
  }

  private void OffConfirmOutside()
  {
    outsideConfirm = null;
    outsideReason = null;
    earlyConfirm = null;
    earlyTime = 0;
  }

  private async Task ConfirmOT(bool isConfirm)
  {
    var now = DateTime.Now;
    var timeNow = now.ToString("HH:mm");
    var timeNowTick = now.Ticks;

    // Xác nhận OT và checkout
    if (isConfirm)
    {
      TimeSpan time = TimeSpan.Parse(currentShift.checkout);
      DateTime combinedDateTime = now.Date + time;

      shiftData.time_active = currentShift.checkout;
      shiftData.time_difference = 0;
      shiftData.is_valid = true;
      shiftData.time_active_tick = combinedDateTime.Ticks;
      shiftData.in_company = inCompany.Value;
      await UpdateCheckout();

      var checkinid = Mongo.RandomId();

      var checkin = new HrmTimekeepingModel.TimeData()
        {
          time_name = "Làm ngoài giờ",
          checkin_id = checkinid,
          time_type = "Check-in",
          time_active = currentShift.checkout,
          time_active_tick = combinedDateTime.Ticks,
          time_difference = 0,
          in_company = inCompany.Value,
          is_valid = true,
          is_ot = true,
          note = shiftData.note,
          reason = shiftData.reason,
          images = shiftData.images,
										is_valid_device = isValidDevice,
        };

      var checkout = new HrmTimekeepingModel.TimeData()
        {
          time_name = "Làm ngoài giờ",
          checkin_id = checkinid,
          time_type = "Check-out",
          is_ot = true,
          time_active = timeNow,
          time_active_tick = timeNowTick,
          in_company = inCompany.Value,
          is_valid = true,
          note = shiftData.note,
          reason = shiftData.reason,
          images = shiftData.images,
										is_valid_device = isValidDevice,
        };

      if (timekeeping == null)
        timekeeping = new() { user = userId };

      timekeeping.time_tracking.AddRange(new[] { checkin, checkout });

      if (Shared.IsEmpty(timekeeping.id))
      {
        timekeeping.date = DateTime.Today.Ticks;
        timekeeping.id = DateTime.Today.ToString("yyMMdd") + Layout.User.id;
        await DbHrmTimekeeping.Create(companyId, timekeeping);
      }
      else
        await DbHrmTimekeeping.Update(companyId, timekeeping);
    }
    // Chỉ checkout
    else
    {
      shiftData.time_active = timeNow;
      shiftData.time_difference = timeDifference;
      shiftData.in_company = inCompany.Value;
      shiftData.is_valid = true;
      shiftData.time_active_tick = now.Ticks;
						shiftData.is_valid_device = isValidDevice;
      await UpdateCheckout();
    }
    isConfirmOT = false;
    isOT = false;
    isChangedShift = false;
    isOverDay = false;
    await RenderButtonStatus();
  }

  private void OffConfirmOT()
  {
    isConfirmOT = false;
  }

  private long CompareTime(string time1, string time2)
  {
    var date1 = Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd, " + time1));
    var date2 = Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd, " + time2));
    return Shared.CompareTime(date1, date2);
  }

  private async Task<double[]> GetLocation()
  {
    try
    {
      var results = await JSRuntime.InvokeAsync<double[]>("getLocation").ConfigureAwait(true);
      if (results != null)
        return results;
    }
    catch (System.Exception ex)
    {
      Console.WriteLine("GetLocation: " + ex.Message);
    }
    await JSRuntime.InvokeVoidAsync("tagline", false, "Vui lòng cấp quyền truy cập vị trí cho app Workdo và bật vị trí trên điện thoại của bạn.");
    inCompany = false;
    return null;
  }

		private async Task<bool> CheckLocation()
		{
			inCompany = null;
			var location = await GetLocation();

			if (location != null)
			{
				if (currentLocation != null)
				{
					inCompany = HrmService.CompareLocation(currentLocation, location[0], location[1], out string message);
					logs = $"<div>{message}</div>";
					companyAddress = string.Join(". ", currentLocation.name);
					return inCompany.Value;
				}
				else
				{
					if (locationsUser.Count	== 0)
					{
						inCompany = true;
						isHybrid = true;
						return inCompany.Value;
					}
					long nearestDistance = long.MaxValue;
					HrmLocationModel nearestLocation = null;
					foreach (var item in locationsUser)
					{
						long distance = HrmService.GetDistance(item, location[0], location[1]);
						if (distance < nearestDistance)
						{
							nearestDistance = distance;
							nearestLocation = item;
						}
					}
					if (nearestLocation != null)
					{
						inCompany = HrmService.CompareLocation(nearestLocation, location[0], location[1], out string message);
						logs = $"<div>{message}</div>";
						companyAddress = string.Join(". ", nearestLocation.name);
						currentLocation = nearestLocation;
						return inCompany.Value;
					}
				}
			}
			return false;
		}

  private async Task ToggleShift()
  {
    await JSRuntime.InvokeVoidAsync("dropdownClose");
    toggleShift = !toggleShift;
  }

  // Hàm xử lý việc user thay đổi ca làm
  private async Task ChangeShift(HrmWorkShiftModel model)
  {
    // Ca làm ngoài giờ
    if (model == null)
    {
      if (!isOT)
      {
        currentShift = new HrmWorkShiftModel
          {
            id = Mongo.RandomId(),
            name = "Làm ngoài giờ",
          };
        isOT = true;
        hexColor = "#AEC6FF";
        textColor = "#355CAA";
        await JSRuntime.InvokeVoidAsync("tagline", true, "Thay đổi ca làm thành công!");
      }
    }
    // Ca bình thường
    else
    {
      if (!(model.id == currentShift.id))
      {
        // Xác nhận thay đổi ca làm
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Bạn đang tiến hành thay đổi ca làm, bạn có muốn tiếp tục?"))
        {
          toggleShift = !toggleShift;
          return;
        }
        await JSRuntime.InvokeVoidAsync("tagline", true, "Thay đổi ca làm thành công!");
      }
      currentShift = model;
      isOT = false;
      GetStateColor(true);

    }
    isChangedShift = true;
    toggleShift = !toggleShift;
  }

  // Xác nhận checkout sớm
  private async Task ConfirmEarly(bool isConfirm)
  {
    if (isConfirm)
    {
      earlyConfirm = true;
      await Checkout();
    }
    OffConfirmEarly();
  }

  private void OffConfirmEarly()
  {
    earlyConfirm = null;
    earlyTime = 0;
  }

  /// Hàm dùng để xử lý lấy màu
  private void GetStateColor(bool isCheckin)
  {
    var timeNow = DateTime.Now.ToString("HH:mm");
    long timeDifference = 0;
    // Màu nút checkin
    if (isCheckin)
    {
      timeDifference = CompareTime(currentShift.checkin, timeNow);
      hexColor = timeDifference > 0 ? "#FFB4A9" : "#AEC6FF";
      textColor = timeDifference > 0 ? "#BA1B1B" : "#355CAA";
    }
    // Màu nút checkout
    else
    {
      if (!isOT)
      {
        if (currentShift.is_overday)
        {
          if (!isOverDay)
          {
            hexColor = "#FFB4A9";
            textColor = "#BA1B1B";
          }
          else
          {
            timeDifference = CompareTime(timeNow, currentShift.checkout);
            hexColor = timeDifference > 0 ? "#FFB4A9" : "#CEF9CC";
            textColor = timeDifference > 0 ? "#BA1B1B" : "#0F913D";
          }
        }
        else
        {
          timeDifference = CompareTime(timeNow, currentShift.checkout);
          hexColor = timeDifference > 0 ? "#FFB4A9" : "#CEF9CC";
          textColor = timeDifference > 0 ? "#BA1B1B" : "#0F913D";
        }
      }
      else
      {
        hexColor = "#CEF9CC";
        textColor = "#0F913D";
      }
    }
  }

		// Hàm kiểm tra có cho phép kiểm tra thiết bị không
		private async Task CheckAvailableDevice()
		{
			// Kiểm tra đang có thiết bị nào đợi duyệt không
			var isDevicePending = await DbHrmDevice.CheckPending(Layout.Company.id, Layout.User.id);

			if (isDevicePending)
			{
				await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn đang có 1 thiết bị đang chờ duyệt!");
				isValidDevice = false;
			}
			else
			{
				if (!rules.is_check_device)
					isValidDevice = true;
				else
				{
					if (Layout.IsMobile)
						await CheckDevice();
				}
			}
		}

		// Hàm dùng để kiểm tra device người dùng
		private async Task CheckDevice()
		{
			var cookieDevice = await JSRuntime.InvokeAsync<string>("getCookie", "_device");
			var genarateCookie = Guid.NewGuid().ToString();


			if(Shared.IsEmpty(Layout.User.device_id))
			{
				var user = await DbUser.Get(Layout.Company.id, Layout.User.id);
				if (user != null)
				{
					await JSRuntime.InvokeVoidAsync("setCookieDevice", "_device", genarateCookie);

					user.device_id = genarateCookie;
					await DbUser.Update(Layout.Company.id, user);
					isValidDevice = true;
				}
			}
			else 
			{
				// Kiểm tra device có match với user không
				bool isResult = await DbUser.GetDevice(Layout.Company.id, Layout.User.id, cookieDevice);
				if (isResult)
					isValidDevice = true;
				else
				{
						isValidDevice = false;
						deviceComfirm = isValidDevice;
						deviceCode = genarateCookie;
						// Lấy dữ liệu chấm công gần nhất
						timeNearest = await DbHrmTimekeeping.GetNearest(Layout.Company.id, Layout.User.id);

				}
			}
		}

		// Hàm xác nhận yêu cầu thay đổi thiết bị
		private async Task ConfirmDevice(bool isConfirm)
		{
			if	(isConfirm)
			{
				var model = new HrmDeviceModel()
     {
						user_request = Layout.User.id,
						date_request = DateTime.Now.Ticks,
						status = 1,
						old_code = Layout.User.device_id,
						new_code = deviceCode
     };
					await DbHrmDevice.Create(Layout.Company.id, model);
					await JSRuntime.InvokeVoidAsync("tagline", true, "Đã gửi yêu cầu cập nhật thiết bị mới!");
					
   		var managerList = await DbUser.GetManager(Layout.Company.id, false);
   		foreach (var user in managerList)
   		{
      if (user.role == 1 || (user.role == 2 && user.role_manage.timekeeping))
       await DbNotify.Create(Layout.Company.id, 816, model.user_request, user.id, model.user_request);
   		}
					await JSRuntime.InvokeVoidAsync("deleteCookie", "_device");
					await JSRuntime.InvokeVoidAsync("setCookieDevice", "_device", deviceCode);
			}
			deviceComfirm = true;
			deviceCode = string.Empty;
			timeNearest	= 0;
		}
}


