@inject IJSRuntime JSRuntime

@if (model != null)
{
  <section class="modal is-active">
    <div class="modal-background"></div>
    <section class="modal-card is-medium">
      <section class="modal-card-head">
        <div class="modal-card-title is-flex is-align-items-center">
          <span class="mr-2">          
            @(string.IsNullOrEmpty(model.id) ? "Tạo mới" : "Chỉnh sửa") địa điểm chấm công
          </span>
          <a target="_blank" href="https://docs.google.com/document/d/1d20HWXYRt_g9Qp4htIa-rKNZ2lHJNWPt/edit" class="icon">
            <span class="material-icons">
              info
            </span>
          </a>
        </div>
        <a class="delete is-medium" @onclick="Cancel"></a>
      </section>
      <section class="modal-card-body">
        <div class="columns is-variable is-2">
          <div class="column is-narrow">
            <img src="/images/location-setup.jpg" alt="location thumbnail" style="border-radius:10px">
          </div>
          <div class="column">
            <ul class="columns is-multiline is-variable is-2">
              <li class="column is-full">
                <div class="field">
                  <label class="label">Tên địa điểm *</label>
                  <div class="control">
                    <input @bind="model.name" placeholder="Nhập tên địa điểm" class="input" type="text">
                  </div>
                </div>
              </li>
              <li class="column is-half">
                <div class="field">
                  <label class="label">Vĩ độ *</label>
                  <div class="control">
                    <input @bind="model.latitude" placeholder="Nhập giá trị vĩ độ" class="input" type="text">
                  </div>
                </div>
              </li>
              <li class="column is-half">
                <div class="field">
                  <label class="label">Kinh độ *</label>
                  <div class="control">
                    <input @bind="model.longitude" placeholder="Nhập giá trị kinh độ" class="input" type="text">
                  </div>
                </div>
              </li>
              <li class="column is-full">
                <div class="field">
                  <label class="label">Khoảng cách hợp lệ (m)</label>
                  <div class="control">
                    <input @bind="model.radius" class="input" type="number" min="0">
                  </div>
																		<p style="font-size: 12px;" class="has-text-grey is-italic mt-2">(*) Khuyến nghị: Nên thiết lập khoảng cách hợp lệ trên 25m để tăng độ chính xác.</p>
                </div>
              </li>
            </ul>
          </div>
        </div>
      </section>
      <section class="modal-card-foot is-right">
        <a class="button" @onclick="Cancel">
          <span class="icon">
            <i class="material-icons-round is-size-6">close</i>
          </span>
          <span>Hủy</span>
        </a>
        <a class="button is-link" @onclick="Update">
          <span class="icon">
            <i class="material-icons-round is-size-6">done</i>
          </span>
          <span>Cập nhật</span>
        </a>
      </section>
    </section>
  </section>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public HrmLocationModel model { get; set; }
  [Parameter]
  public EventCallback<bool> OnUpdate { get; set; }

  private async Task Cancel()
  {
    await OnUpdate.InvokeAsync(false);
  }

  private async Task Update()
  {
    if (Shared.IsEmpty(model.name))
      await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa nhập tên địa điểm!");
    else if (Shared.IsEmpty(model.latitude))
      await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa nhập vĩ độ!");
    else if (Shared.IsEmpty(model.longitude))
      await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa nhập kinh độ!");
    else if (model.radius < 0)
      await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa nhập khoảng cách hợp lệ!");
    else
    {
      model.latitude = model.latitude.Trim();
      model.longitude = model.longitude.Trim();
      if (string.IsNullOrEmpty(model.id))
      {
        await DbHrmLocation.Create(Layout.Company.id, model);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Tạo địa điểm chấm công thành công!");
        await SendNotify(803);
      }
      else
      {
        await DbHrmLocation.Update(Layout.Company.id, model);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Chỉnh sửa địa điểm chấm công thành công!");
        await SendNotify(804);
      }
      await OnUpdate.InvokeAsync(true);
    }
  }

  private async Task SendNotify(int notifyType)
  {
    // Gủi thông báo chuông
    var targetList = Layout.UserList.Where(x => x.role == 1 || (x.role == 2 && x.role_manage.timekeeping));
    foreach (var user in targetList)
      await DbNotify.Create(Layout.Company.id, notifyType, model.name, user.id, Layout.User.id);
  }
}