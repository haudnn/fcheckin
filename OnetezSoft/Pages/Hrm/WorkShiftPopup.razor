@inject IJSRuntime JSRuntime

@if (model != null)
{
  <section class="modal is-active">
    <div class="modal-background"></div>
    <section class="modal-card">
      <section class="modal-card-head">
        <div class="modal-card-title">
          @(string.IsNullOrEmpty(model.id) ? "Tạo mới" : "Chỉnh sửa") ca làm việc
        </div>
        <a class="delete is-medium" @onclick="Cancel"></a>
      </section>
      <section class="modal-card-body">
        <ul class="columns is-multiline is-variable is-2">
          <li class="column is-full">
            <div class="field">
              <label class="label">Tên ca làm việc</label>
              <div class="control">
                <input @bind="model.name" class="input" type="text">
              </div>
            </div>
          </li>
          <li class="column is-half">
            <div class="field">
              <label class="label">Giờ bắt đầu</label>
              <div class="control">
                <div class="select is-fullwidth">
                  <select @bind="model.checkin">
                    <option value="">- chọn -</option>
                    @foreach (var item in Shared.TimeList())
                    {
                      <option value="@item.name">@item.name</option>
                    }
                  </select>
                </div>
              </div>
            </div>
          </li>
          <li class="column is-half">
            <div class="field">
              <label class="label">Giờ kết thúc</label>
              <div class="control">
                <div class="select is-fullwidth">
                  <select @bind="model.checkout">
                    <option value="">- chọn -</option>
                    @foreach (var item in Shared.TimeList())
                    {
                      <option value="@item.name">@item.name</option>
                    }
                  </select>
                </div>
              </div>
            </div>
          </li>
          <li class="column is-full">
            <div class="field">
              <label class="label">Số công</label>
              <div class="control">
                <input @bind="model.value" class="input" type="number" min="0" step="0.5">
              </div>
            </div>
          </li>
        </ul>
      </section>
      <section class="modal-card-foot is-right">
        <a class="button" @onclick="Cancel">
          <span class="icon">
            <i class="material-icons-round is-size-6">close</i>
          </span>
          <span>Hủy</span>
        </a>
        <a class="button is-link" @onclick="Update">
          <span class="icon">
            <i class="material-icons-round is-size-6">done</i>
          </span>
          <span>Cập nhật</span>
        </a>
      </section>
    </section>
  </section>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public HrmWorkShiftModel model { get; set; }
  [Parameter]
  public EventCallback<bool> OnUpdate { get; set; }

  private async Task Cancel()
  {
    await OnUpdate.InvokeAsync(false);
  }

  private async Task Update()
  {
    if(Shared.IsEmpty(model.name))
      await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa nhập tên ca làm việc!");
    else if(Shared.IsEmpty(model.checkin))
      await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa chọn giờ bắt đầu!");
    else if(Shared.IsEmpty(model.checkout))
      await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa nhập giờ kết thúc!");
    else if(model.value <= 0)
      await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa nhập số công!");
    else
    {
      if(string.IsNullOrEmpty(model.id))
      {
        await DbHrmWorkShift.Create(Layout.Company.id, model);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Tạo ca làm thành công");
        await SendNotify(800);
      }
      else
      {
        await DbHrmWorkShift.Update(Layout.Company.id, model);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Chỉnh sửa ca làm thành công");
        await SendNotify(801);
      }
      await OnUpdate.InvokeAsync(true);
    }
  }

  private async Task SendNotify(int notifyType)
  {
    // Gủi thông báo chuông
    var targetList = Layout.UserList.Where(x => x.role == 1 || (x.role == 2 && x.role_manage.timekeeping));
    foreach (var user in targetList)
      await DbNotify.Create(Layout.Company.id, notifyType, model.name, user.id, Layout.User.id);
  }
}